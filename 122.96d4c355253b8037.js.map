{"version":3,"file":"122.96d4c355253b8037.js","mappings":"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","names":["i0","DataExportComponent","formsService","sessionService","usersService","exportJobsService","pollingService","breakpointService","eventBusService","isDesktop$","forms","fieldsMap","exportJobs","hxlEnabled","hxlApiKey","showProgress","exportView","exportJobsReady","constructor","this","pipe","untilDestroyed","ngOnInit","listenEventProcess","get","subscribe","results","attachFormAttributes","initUserSettings","getFeatureConfigurations","hxl","enabled","loadExportJobs","on","next","value","process","userId","localStorage","getItem","generalHelpers","getUserSettings","response","some","setting","config_key","jobs","reverse","error","err","console","exportAll","startExport","send_to_hdx","include_hxl","send_to_browser","selectAll","form","isAllSelected","attributes","forEach","attr","id","key","getSelectedAttrCount","length","formId","Object","values","filter","q","exportSelected","selectFields","fields","keys","push","getAttributes","toString","selectors","tslib_es6","UntilDestroy","FormsService","SessionService","UsersService","ExportJobsService","PollingService","BreakpointService","EventBusService","routes","path","component","DataExportRoutingModule","RouterModule","DataExportModule","CommonModule","TranslateModule","MatTabsModule","DirectiveModule","MatButtonModule","MatTableModule","MatCheckboxModule","FormsModule","MatIconModule","SpinnerModule","MatFormFieldModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/data-export/data-export.component.html","./apps/web-mzima-client/src/app/settings/data-export/data-export.component.ts","./apps/web-mzima-client/src/app/settings/data-export/data-export-routing.module.ts","./apps/web-mzima-client/src/app/settings/data-export/data-export.module.ts"],"sourcesContent":["<ng-container *ngIf=\"exportView; else fieldSelector\">\n  <h1>{{ (hxlEnabled ? 'data_export.title_hxl' : 'data_export.title') | translate }}</h1>\n  <div class=\"description\">\n    <p\n      *ngIf=\"showProgress; else description\"\n      [innerHTML]=\"'data_export.export_progress' | translate\"\n    ></p>\n  </div>\n  <mat-tab-group dynamicHeight disableRipple disablePagination animationDuration=\"0ms\">\n    <mat-tab [label]=\"'data_export.export' | translate\" [data-qa]=\"'tab-export'\">\n      <ng-container *ngIf=\"hxlEnabled && !hxlApiKey\">\n        <div class=\"alert\">\n          <p>{{ 'data_export.hxl_apikey_alert_1' | translate }}</p>\n          <p>\n            {{ 'data_export.hxl_apikey_alert_2' | translate }}\n            <a [routerLink]=\"['/settings/user-settings']\" class=\"link-blue\">\n              {{ 'data_export.hxl_configure' | translate }}\n            </a>\n            {{ 'data_export.hxl_apikey_alert_3' | translate }}\n          </p>\n        </div>\n      </ng-container>\n      <div class=\"form-controls-spacer\" *ngIf=\"!(isDesktop$ | async)!\"></div>\n      <div class=\"form-controls-panel\">\n        <mzima-client-button\n          fill=\"outline\"\n          color=\"secondary\"\n          (buttonClick)=\"selectFields()\"\n          [disabled]=\"showProgress\"\n          [data-qa]=\"'btn-select-fields'\"\n        >\n          {{ 'data_export.select_fields' | translate }}\n        </mzima-client-button>\n        <mzima-client-button\n          (buttonClick)=\"exportAll()\"\n          [disabled]=\"showProgress\"\n          [data-qa]=\"'btn-export-all'\"\n        >\n          {{ 'data_export.all' | translate }}\n        </mzima-client-button>\n      </div>\n    </mat-tab>\n    <mat-tab [label]=\"'data_export.export_history' | translate\" [data-qa]=\"'tab-export-history'\">\n      <div class=\"history-table\" *ngIf=\"exportJobsReady; else showLoader\">\n        <table mat-table [dataSource]=\"exportJobs\">\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef>{{ 'app.name' | translate }}</th>\n            <td mat-cell *matCellDef=\"let job\">\n              <span class=\"title\">{{ 'data_export.job' | translate : { jobId: job.id } }} </span>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"status\">\n            <th mat-header-cell *matHeaderCellDef>{{ 'global_filter.status' | translate }}</th>\n            <td mat-cell *matCellDef=\"let job\">{{ job.status | titlecase }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"created\">\n            <th mat-header-cell *matHeaderCellDef>\n              {{ 'global_filter.sort.orderby.created' | translate }}\n            </th>\n            <td mat-cell *matCellDef=\"let job\">{{ job.created }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"expires\">\n            <th mat-header-cell *matHeaderCellDef>\n              {{ 'global_filter.filter_tabs.expires' | translate }}\n            </th>\n            <td mat-cell [align]=\"!job.url_expiration ? 'center' : 'left'\" *matCellDef=\"let job\">\n              {{ job.url_expiration || '-' }}\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"download\">\n            <th mat-header-cell *matHeaderCellDef align=\"center\">\n              {{ 'global_filter.filter_tabs.download' | translate }}\n            </th>\n            <td mat-cell align=\"center\" *matCellDef=\"let job\">\n              <mzima-client-button\n                fill=\"clear\"\n                [href]=\"job.url\"\n                color=\"secondary\"\n                [iconOnly]=\"true\"\n                class=\"download-btn\"\n                [download]=\"'data_export.job' | translate : { jobId: job.id }\"\n              >\n                <mat-icon icon svgIcon=\"download\"></mat-icon>\n              </mzima-client-button>\n            </td>\n          </ng-container>\n\n          <tr\n            mat-header-row\n            *matHeaderRowDef=\"['name', 'status', 'created', 'expires', 'download']\"\n          ></tr>\n          <tr\n            mat-row\n            *matRowDef=\"let row; columns: ['name', 'status', 'created', 'expires', 'download']\"\n          ></tr>\n        </table>\n      </div>\n    </mat-tab>\n  </mat-tab-group>\n</ng-container>\n\n<ng-template #fieldSelector>\n  <h1>{{ 'data_export.select_fields_title' | translate }}</h1>\n  <div class=\"description\">\n    <p>{{ 'data_export.select_fields_desc' | translate }}</p>\n  </div>\n\n  <div class=\"form-row\" *ngFor=\"let form of forms\">\n    <mat-label>{{ form.name }}</mat-label>\n    <div class=\"checkbox-group\">\n      <div class=\"checkbox\" *ngIf=\"form.attributes\">\n        <mat-checkbox (change)=\"selectAll(form)\" [checked]=\"isAllSelected(form)\">\n          <i>{{ 'category.select_all' | translate }}</i>\n        </mat-checkbox>\n      </div>\n      <div class=\"checkbox\" *ngFor=\"let attribute of form.attributes\">\n        <mat-checkbox [value]=\"attribute.key\" [(ngModel)]=\"fieldsMap[form.id][attribute.key]\">\n          {{ attribute.label }}\n        </mat-checkbox>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-controls-spacer\" *ngIf=\"!(isDesktop$ | async)!\"></div>\n  <div class=\"form-controls-panel form-controls-panel--sticky\">\n    <mzima-client-button\n      fill=\"outline\"\n      color=\"secondary\"\n      [data-qa]=\"'btn-cancel'\"\n      (buttonClick)=\"selectFields()\"\n    >\n      {{ 'data_export.cancel' | translate }}\n    </mzima-client-button>\n    <mzima-client-button (buttonClick)=\"exportSelected()\" [data-qa]=\"'btn-export-selected'\">\n      {{ 'data_export.export_selected' | translate }}\n    </mzima-client-button>\n  </div>\n</ng-template>\n\n<ng-template #description>\n  <p *ngIf=\"!hxlEnabled\">{{ 'data_export.description' | translate }}</p>\n  <p *ngIf=\"hxlEnabled\">\n    {{ 'data_export.description_hxl' | translate }}\n    <a href=\"https://hxlstandard.org/standard/1-1final/tagging/\" class=\"link-blue\" target=\"_blank\">\n      <mat-icon svgIcon=\"external-link\"></mat-icon>\n      {{ 'data_export.hxl_tags' | translate }} </a\n    >,\n    <a\n      href=\"https://hxlstandard.org/standard/1-1final/dictionary/\"\n      class=\"link-blue\"\n      target=\"_blank\"\n    >\n      <strong>\n        <mat-icon svgIcon=\"external-link\"></mat-icon>\n        {{ 'data_export.hxl_attributes' | translate }}\n      </strong>\n    </a>\n    {{ 'data_export.and_choose' | translate }}\n    <a href=\"https://data.humdata.org/\" class=\"link-blue\" target=\"_blank\">\n      <strong>\n        <mat-icon svgIcon=\"external-link\"></mat-icon>\n        {{ 'data_export.HDX' | translate }}\n      </strong>\n    </a>\n    {{ 'data_export.account' | translate }}\n  </p>\n</ng-template>\n\n<ng-template #showLoader>\n  <app-spinner class=\"spinner\"></app-spinner>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ExportJobInterface,\n  ExportJobsService,\n  FormInterface,\n  FormsService,\n  generalHelpers,\n  UsersService,\n} from '@mzima-client/sdk';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport {\n  BreakpointService,\n  EventBusService,\n  EventType,\n  PollingService,\n  SessionService,\n} from '@services';\nimport { Observable } from 'rxjs';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-data-export',\n  templateUrl: './data-export.component.html',\n  styleUrls: ['./data-export.component.scss'],\n})\nexport class DataExportComponent implements OnInit {\n  public isDesktop$: Observable<boolean>;\n  forms: FormInterface[] = [];\n  fieldsMap: any = {};\n  exportJobs: ExportJobInterface[] = [];\n  hxlEnabled = false;\n  hxlApiKey = true;\n  showProgress = false;\n  exportView = true;\n  exportJobsReady = false;\n\n  constructor(\n    private formsService: FormsService,\n    private sessionService: SessionService,\n    private usersService: UsersService,\n    private exportJobsService: ExportJobsService,\n    private pollingService: PollingService,\n    private breakpointService: BreakpointService,\n    private eventBusService: EventBusService,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$.pipe(untilDestroyed(this));\n  }\n\n  ngOnInit() {\n    this.listenEventProcess();\n    this.formsService.get().subscribe((forms) => {\n      this.forms = forms.results;\n      this.attachFormAttributes();\n    });\n    this.initUserSettings();\n\n    this.hxlEnabled = !!this.sessionService.getFeatureConfigurations().hxl?.enabled;\n    this.loadExportJobs();\n  }\n\n  listenEventProcess() {\n    this.eventBusService.on(EventType.StopExportPolling).subscribe({\n      next: (value) => (this.showProgress = value.process),\n    });\n  }\n\n  initUserSettings() {\n    const userId = localStorage.getItem(`${generalHelpers.CONST.LOCAL_STORAGE_PREFIX}userId`);\n    if (userId) {\n      this.usersService.getUserSettings(userId).subscribe({\n        next: (response) => {\n          this.hxlApiKey = response.results?.some((setting: any) => {\n            return setting.config_key === 'hdx_api_key';\n          });\n        },\n      });\n    }\n  }\n\n  loadExportJobs() {\n    this.exportJobsReady = false;\n    this.exportJobsService.get().subscribe({\n      next: (jobs) => {\n        this.exportJobs = jobs.reverse();\n        this.exportJobsReady = true;\n      },\n      error: (err) => {\n        console.error('Export failed: ', err);\n        this.exportJobsReady = true;\n      },\n    });\n  }\n\n  exportAll() {\n    this.pollingService\n      .startExport({ send_to_hdx: false, include_hxl: false, send_to_browser: true })\n      .subscribe();\n  }\n\n  selectAll(form: FormInterface) {\n    if (this.isAllSelected(form)) {\n      form.attributes?.forEach((attr) => {\n        this.fieldsMap[form.id][attr.key] = false;\n      });\n    } else {\n      form.attributes?.forEach((attr) => {\n        this.fieldsMap[form.id][attr.key] = true;\n      });\n    }\n  }\n\n  isAllSelected(form: FormInterface) {\n    return this.getSelectedAttrCount(form.id) === form.attributes?.length;\n  }\n\n  private getSelectedAttrCount(formId: string | number) {\n    return Object.values(this.fieldsMap[formId]).filter((q) => !!q).length;\n  }\n\n  exportSelected() {\n    this.selectFields();\n    const fields: string[] = [];\n    Object.keys(this.fieldsMap).forEach((form) => {\n      Object.keys(this.fieldsMap[form]).forEach((key) => {\n        if (this.fieldsMap[form][key]) {\n          fields.push(key);\n        }\n      });\n    });\n    this.pollingService\n      .startExport({ fields, send_to_hdx: false, include_hxl: false, send_to_browser: true })\n      .subscribe();\n  }\n\n  selectFields() {\n    this.exportView = !this.exportView;\n  }\n\n  private attachFormAttributes() {\n    this.forms.forEach((form) => {\n      this.formsService\n        .getAttributes(form.id.toString())\n        .pipe()\n        .subscribe({\n          next: (attr) => {\n            form.attributes = attr;\n            this.fieldsMap[form.id] = {};\n          },\n        });\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { DataExportComponent } from './data-export.component';\n\nconst routes: Routes = [{ path: '', component: DataExportComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DataExportRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule, SpinnerModule } from '@shared';\n\nimport { DataExportRoutingModule } from './data-export-routing.module';\nimport { DataExportComponent } from './data-export.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [DataExportComponent],\n  imports: [\n    CommonModule,\n    DataExportRoutingModule,\n    TranslateModule,\n    MatTabsModule,\n    DirectiveModule,\n    MatButtonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    FormsModule,\n    MatIconModule,\n    SpinnerModule,\n    MatFormFieldModule,\n    MzimaUiModule,\n  ],\n})\nexport class DataExportModule {}\n"],"x_google_ignoreList":[]}