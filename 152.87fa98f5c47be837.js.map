{"version":3,"file":"152.87fa98f5c47be837.js","mappings":"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","names":["i0","DataSourceItemComponent","BaseComponent","sessionService","breakpointService","fb","ref","route","router","configService","dataSourcesService","confirmModalService","surveysService","formsService","translate","location","provider","surveyList","form","dataSourceList","selectedSurvey","surveyAttributesList","currentProviderId","availableProviders","onCreating","submitted","providersData","cloneProviders","tableData","isLoading","constructor","super","this","checkDesktop","group","ngOnInit","snapshot","paramMap","get","getProviders","loadData","getAvailableProviders","providers","tempProviders","key","push","id","name","type","enabled","arrayHelpers","filter","objectToArray","obj","Object","keys","map","label","value","providers$","getDataSource","pipe","switchMap","dataSources","getProvidersData","surveys$","combineLatest","subscribe","next","surveys","results","p","visible_survey","params","form_id","selected_survey","find","s","_","setCurrentProvider","providerId","removeControls","controls","createForm","addControlsToForm","control","Validators","getSurveyAttributes","survey","patchValue","getAttributes","order","orderby","response","inbound_fields","el","checkKeyFields","ngAfterContentChecked","detectChanges","createControls","options","entries","removeControl","validatorsToAdd","rules","rule","addControl","turnOffDataSource","event","checked","_this","open","title","instant","providerName","description","confirmButtonText","cancelButtonText","updateProviderById","prepareAPI","navigate","error","saveProviderData","preparedForAPI","prov","field","providerKey","filterAttributes","replace","param","fillForApi","back","isDesktop","isProviderEnabled","selectors","ctx","DataSourcesComponent","isDesktop$","isAllProvidersAdded","getProvidersList","routes","path","component","data","breadcrumb","DataSourcesRoutingModule","RouterModule","DataSourcesModule","CommonModule","MatButtonModule","DirectiveModule","MatIconModule","SpinnerModule","TranslateModule","MatSelectModule","FormsModule","MatSlideToggleModule","ReactiveFormsModule","MatTableModule","MatInputModule","MatRadioModule","MatRippleModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/data-sources/data-source-item/data-source-item.component.html","./apps/web-mzima-client/src/app/settings/data-sources/data-source-item/data-source-item.component.ts","./apps/web-mzima-client/src/app/settings/data-sources/data-sources.component.html","./apps/web-mzima-client/src/app/settings/data-sources/data-sources.component.ts","./apps/web-mzima-client/src/app/settings/data-sources/data-sources-routing.module.ts","./apps/web-mzima-client/src/app/settings/data-sources/data-sources.module.ts"],"sourcesContent":["<h1 *ngIf=\"isDesktop\">\n  {{\n    (provider && !onCreating ? 'Edit ' + provider.name + ' Data Source' : 'Add Data Source')\n      | translate\n  }}\n</h1>\n\n<div *ngIf=\"!isLoading; else showLoader\">\n  <div class=\"form-row\" *ngIf=\"onCreating\">\n    <mat-label>\n      {{ 'settings.data_sources.type_of_data_source' | translate }}\n      <span class=\"color-accent\">*</span>\n    </mat-label>\n    <mat-form-field appearance=\"outline\">\n      <mat-select\n        disableOptionCentering\n        [placeholder]=\"'settings.data_sources.choose_data_source' | translate\"\n        [(ngModel)]=\"currentProviderId\"\n        (selectionChange)=\"setCurrentProvider($event.value)\"\n        [data-qa]=\"'select-provider'\"\n      >\n        <ng-container *ngFor=\"let provider of providersData\">\n          <mat-option\n            [value]=\"provider.id\"\n            *ngIf=\"!isProviderEnabled(provider)\"\n            [data-qa]=\"provider.id\"\n          >\n            {{ provider.name }}\n          </mat-option>\n        </ng-container>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"survey\" *ngIf=\"currentProviderId\">\n    <div class=\"form-row toggle-group\">\n      <div class=\"toggle\" *ngIf=\"!onCreating\">\n        <mat-slide-toggle\n          name=\"accept-survey\"\n          [(ngModel)]=\"provider.enabled\"\n          (change)=\"turnOffDataSource($event)\"\n          [data-qa]=\"'toogle-available-provider'\"\n        >\n          {{ 'settings.data_sources.enable_provider_message' | translate }}\n        </mat-slide-toggle>\n      </div>\n      <div class=\"toggle\">\n        <mat-slide-toggle\n          name=\"import-to-survey\"\n          [(ngModel)]=\"provider.visible_survey\"\n          [data-qa]=\"'toogle-import-to-survey'\"\n        >\n          {{ 'settings.data_sources.associate_with_form' | translate }}\n        </mat-slide-toggle>\n      </div>\n    </div>\n  </div>\n</div>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"saveProviderData()\">\n  <ng-container *ngIf=\"provider?.visible_survey\">\n    <div class=\"form-row\">\n      <mat-label>\n        <span>{{ 'data_import.import_to' | translate }}</span>\n        <strong>\n          <span *ngIf=\"!selectedSurvey?.id\">{{ 'data_import.which_survey' | translate }}</span>\n          <span *ngIf=\"selectedSurvey?.id\">{{ selectedSurvey.name }}</span>\n        </strong>\n      </mat-label>\n      <mat-form-field appearance=\"outline\" *ngIf=\"surveyList.length\">\n        <mat-select\n          formControlName=\"form_id\"\n          (selectionChange)=\"getSurveyAttributes($event.value)\"\n          [data-qa]=\"'survey-select'\"\n        >\n          <mat-option *ngFor=\"let survey of surveyList\" [value]=\"survey\" [data-qa]=\"survey.name\">\n            {{ survey.name }}\n          </mat-option>\n        </mat-select>\n        <mat-hint\n          [translate]=\"'survey.choose_survey_field_desc'\"\n          [translateParams]=\"{ datasource_type: provider?.name | titlecase }\"\n        >\n        </mat-hint>\n      </mat-form-field>\n    </div>\n\n    <ng-container *ngIf=\"surveyAttributesList?.length\">\n      <h2>{{ 'survey.choose_survey_field' | translate }}</h2>\n      <p>{{ 'survey.choose_survey_field_desc' | translate }}</p>\n      <table mat-table [dataSource]=\"tableData\" class=\"survey__table\" [data-qa]=\"'survey-table'\">\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef>{{ provider?.name | titlecase }} data</th>\n          <td mat-cell *matCellDef=\"let element\">\n            {{ element.label | titlecase }}\n          </td>\n        </ng-container>\n        <ng-container matColumnDef=\"field\">\n          <th mat-header-cell *matHeaderCellDef>{{ 'survey.survey_field' | translate }}</th>\n          <td mat-cell *matCellDef=\"let element\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" [data-qa]=\"'source-select'\">\n                <mat-select\n                  [formControlName]=\"element.label\"\n                  disableOptionCentering\n                  [placeholder]=\"'data_import.leave_empty' | translate\"\n                  [data-qa]=\"element.label\"\n                >\n                  <mat-option [value]=\"null\">\n                    {{ 'data_import.leave_empty' | translate }}\n                  </mat-option>\n                  <div\n                    *ngFor=\"let attribute of surveyAttributesList\"\n                    [data-qa]=\"'survey-attributes-list'\"\n                  >\n                    <mat-option\n                      *ngIf=\"element.value === attribute.input\"\n                      [value]=\"attribute?.key\"\n                      [data-qa]=\"attribute.key\"\n                    >\n                      {{ attribute?.label }}\n                    </mat-option>\n                  </div>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"['name', 'field']\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['name', 'field']\"></tr>\n      </table>\n    </ng-container>\n  </ng-container>\n\n  <br />\n\n  <div *ngFor=\"let control of provider?.options\" [data-qa]=\"'provider-options'\">\n    <ng-container [ngSwitch]=\"control.input\">\n      <ng-container *ngSwitchCase=\"'read-only-text'\">\n        <h2 *ngIf=\"control.label?.length\">{{ control.label }}</h2>\n        <p *ngIf=\"control.description?.length\" [innerHTML]=\"control.description\"></p>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'hidden'\">\n        <input\n          [formControlName]=\"control.id\"\n          type=\"hidden\"\n          [data-qa]=\"'control-text' + control.id\"\n        />\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <div class=\"form-row\">\n          <mat-label>\n            {{ control.label }}\n            <span class=\"color-accent\" *ngIf=\"control.rules?.indexOf('required') > -1\">*</span>\n          </mat-label>\n          <mat-form-field\n            *ngIf=\"control.input === 'text'\"\n            appearance=\"outline\"\n            [data-qa]=\"'control-type-text'\"\n          >\n            <input\n              matInput\n              [placeholder]=\"control.description\"\n              [formControlName]=\"control.id\"\n              [type]=\"control.input\"\n              [data-qa]=\"'control-text' + control.id\"\n            />\n            <mat-hint\n              *ngIf=\"control.description?.length\"\n              [innerHTML]=\"control.description\"\n            ></mat-hint>\n            <mat-error\n              *ngIf=\"\n                (form.get(control.id)?.touched || form.get(control.id)?.dirty) &&\n                form.get(control.id)?.hasError('required')\n              \"\n            >\n              {{ 'form.field_required' | translate }}\n            </mat-error>\n          </mat-form-field>\n\n          <mat-radio-group\n            *ngIf=\"control.input === 'radio'\"\n            aria-label=\"Select an option\"\n            [formControlName]=\"control.id\"\n            [data-qa]=\"'control-type-radio'\"\n          >\n            <mat-radio-button\n              *ngFor=\"let item of control.options\"\n              [value]=\"item\"\n              [data-qa]=\"'control-text' + item\"\n            >\n              {{ item }}\n            </mat-radio-button>\n          </mat-radio-group>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <div class=\"form-controls-spacer\" *ngIf=\"!isDesktop\"></div>\n  <div class=\"form-controls-panel form-controls-panel--sticky\">\n    <div>\n      <mzima-client-button\n        color=\"danger\"\n        class=\"delete-btn\"\n        *ngIf=\"!onCreating\"\n        [iconOnly]=\"!isDesktop\"\n        [data-qa]=\"'btn-provider-delete'\"\n        (buttonClick)=\"turnOffDataSource($event)\"\n      >\n        <ng-container *ngIf=\"isDesktop\">{{ 'app.delete' | translate }}</ng-container>\n        <mat-icon icon *ngIf=\"!isDesktop\" svgIcon=\"delete\"></mat-icon>\n      </mzima-client-button>\n    </div>\n    <div>\n      <mzima-client-button\n        fill=\"outline\"\n        color=\"secondary\"\n        (buttonClick)=\"back()\"\n        [data-qa]=\"'btn-provider-cancel'\"\n      >\n        {{ 'app.cancel' | translate }}\n      </mzima-client-button>\n      <mzima-client-button\n        [disabled]=\"form.invalid || submitted\"\n        [data-qa]=\"'btn-provider-save'\"\n        type=\"submit\"\n      >\n        {{ 'app.save' | translate }}\n      </mzima-client-button>\n    </div>\n  </div>\n</form>\n\n<ng-template #showLoader>\n  <app-spinner class=\"spinner\"></app-spinner>\n</ng-template>\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { arrayHelpers } from '@helpers';\nimport { combineLatest, switchMap } from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormsService, DataSourcesService, SurveysService } from '@mzima-client/sdk';\nimport { BaseComponent } from '../../../base.component';\nimport { BreakpointService, SessionService, ConfigService, ConfirmModalService } from '@services';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'app-data-source-item',\n  templateUrl: './data-source-item.component.html',\n  styleUrls: ['./data-source-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// WHOLE COMPONENT SHOULD BE REFACTORED BECAUSE OF NEW CONFIG API\nexport class DataSourceItemComponent extends BaseComponent implements AfterContentChecked, OnInit {\n  public provider: any;\n  public surveyList: any[];\n  public form: FormGroup;\n  private dataSourceList: any[];\n  public selectedSurvey: any;\n  public surveyAttributesList: any;\n  public currentProviderId: string | null;\n  private availableProviders: any[];\n  public onCreating: boolean;\n  public submitted = false;\n  providersData: any;\n  cloneProviders: any[];\n  tableData: any;\n  public isLoading = false;\n\n  constructor(\n    protected override sessionService: SessionService,\n    protected override breakpointService: BreakpointService,\n    private fb: FormBuilder,\n    private ref: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private router: Router,\n    private configService: ConfigService,\n    private dataSourcesService: DataSourcesService,\n    private confirmModalService: ConfirmModalService,\n    private surveysService: SurveysService,\n    private formsService: FormsService,\n    private translate: TranslateService,\n    private location: Location,\n  ) {\n    super(sessionService, breakpointService);\n    this.checkDesktop();\n\n    this.form = this.fb.group({});\n  }\n\n  ngOnInit(): void {\n    this.currentProviderId = this.route.snapshot.paramMap.get('id');\n    if (!this.currentProviderId) {\n      this.onCreating = true;\n    }\n    this.getProviders();\n  }\n\n  loadData(): void {}\n\n  private getAvailableProviders(providers: any) {\n    // TODO: REWORK\n    const tempProviders: any[] = [];\n    for (const key in providers) {\n      tempProviders.push({\n        id: providers[key]['provider-name'],\n        name: providers[key]['provider-name'],\n        type: providers[key]['enabled'],\n      });\n    }\n    return arrayHelpers.sortArray(tempProviders.filter((provider) => !provider.type));\n  }\n\n  objectToArray(obj: any) {\n    return Object.keys(obj).map((key) => ({ label: key, value: obj[key] }));\n  }\n\n  private getProviders(): void {\n    this.isLoading = true;\n    // this.dataSourcesService\n    //   .getDataSource()\n    //   .pipe(switchMap((dataSources) => this.configService.getProvidersData(dataSources)))\n    //   .subscribe({\n    //     next: (providers) => {\n    //       this.providersData = arrayHelpers.sortArray(providers, 'name');\n    //       this.cloneProviders = _.cloneDeep(this.providersData);\n    //       // this.availableProviders = this.getAvailableProviders(this.providersData);\n    //       console.log('providers: ', this.providersData);\n    //     },\n    //   });\n\n    const providers$ = this.dataSourcesService\n      .getDataSource()\n      .pipe(switchMap((dataSources) => this.configService.getProvidersData(dataSources)));\n    const surveys$ = this.surveysService.get();\n    // const dataSources$ = this.configService.getAllProvidersData();\n\n    combineLatest([providers$, surveys$]).subscribe({\n      next: ([providers, surveys]) => {\n        // const dataSourcesResult = dataSources.filter(\n        //   (dataSource: DataSourceResult) => dataSource.id !== 'gmail',\n        // );\n        // this.providersData = this.removeProvider(providersData, 'gmail');\n        this.surveyList = surveys.results;\n        this.providersData = arrayHelpers.sortArray(providers, 'name');\n        this.providersData.map((p: any) => {\n          p.visible_survey = !!p.params.form_id;\n          p.selected_survey = this.surveyList.find((s) => s.id === p.params.form_id);\n        });\n        this.cloneProviders = _.cloneDeep(this.providersData);\n        // this.availableProviders = this.getAvailableProviders(this.providersData);\n\n        // this.dataSourceList = this.dataSourcesService.combineDataSource(\n        //   this.providersData,\n        //   dataSourcesResult,\n        //   this.surveyList,\n        // );\n        this.setCurrentProvider();\n        this.isLoading = false;\n      },\n    });\n  }\n\n  public setCurrentProvider(providerId?: any): void {\n    if (this.currentProviderId || providerId) {\n      const id = this.currentProviderId || providerId;\n      this.provider = this.providersData.find((provider: any) => provider.id === id);\n      this.removeControls(this.form.controls);\n      this.createForm(this.provider);\n      this.addControlsToForm('id', this.fb.control(this.provider.id, Validators.required));\n      this.getSurveyAttributes(this.provider.selected_survey);\n    }\n  }\n\n  public getSurveyAttributes(survey: any): void {\n    if (!survey) return;\n    this.form.patchValue({ form_id: survey });\n    this.selectedSurvey = survey;\n    const queryParams = {\n      order: 'asc',\n      orderby: 'priority',\n    };\n    this.formsService.getAttributes(survey.id, queryParams).subscribe({\n      next: (response) => {\n        this.surveyAttributesList = response;\n        this.tableData = this.objectToArray(this.provider.inbound_fields);\n        for (const el of this.tableData) {\n          this.addControlsToForm(el.label, this.fb.control(''));\n          this.form.patchValue({\n            [el.label]: this.checkKeyFields(this.provider.params[el.label]),\n          });\n        }\n      },\n    });\n  }\n\n  ngAfterContentChecked() {\n    this.ref.detectChanges();\n  }\n\n  private createForm(provider: any) {\n    this.addControlsToForm('form_id', this.fb.control(this.provider?.selected_survey));\n    this.createControls(provider.options);\n  }\n\n  private removeControls(controls: any) {\n    for (const [key] of Object.entries(controls)) {\n      this.form.removeControl(key);\n    }\n  }\n\n  private createControls(controls: any[]) {\n    for (const control of controls) {\n      const validatorsToAdd = [];\n\n      if (control?.rules) {\n        for (const rule of control.rules) {\n          switch (rule) {\n            case 'required':\n              validatorsToAdd.push(Validators.required);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      this.addControlsToForm(control.id, this.fb.control(control.value, validatorsToAdd));\n    }\n  }\n\n  private addControlsToForm(name: string, control: AbstractControl) {\n    this.form.addControl(name, control);\n  }\n\n  public async turnOffDataSource(event: any): Promise<void> {\n    if (!event.checked) {\n      this.cloneProviders.find((p) => p.id === this.provider.id).enabled = event.checked;\n      const confirmed = await this.confirmModalService.open({\n        title: this.translate.instant(`settings.data_sources.provider_name`, {\n          providerName: this.provider.name,\n        }),\n        description: this.translate.instant(\n          'settings.data_sources.do_you_really_want_to_disconnect',\n        ),\n        confirmButtonText: this.translate.instant('app.yes_delete'),\n        cancelButtonText: this.translate.instant('app.no_go_back'),\n      });\n      // if (!confirmed) {\n      //   this.provider.enabled = true;\n      //   return;\n      // }\n      if (confirmed) {\n        this.configService\n          .updateProviderById(this.form.value.id, this.prepareAPI(false)[this.form.value.id])\n          .subscribe({\n            next: () => this.router.navigate(['/settings/data-sources']),\n            error: () => (this.submitted = false),\n          });\n      }\n    }\n\n    this.cloneProviders.find((p) => p.id === this.provider.id).enabled = event.checked;\n  }\n\n  public saveProviderData(): void {\n    this.submitted = true;\n    // if (this.form.value.form_id) {\n    //   for (const field of this.test) {\n    //     this.form.patchValue({\n    //       [field.label]: this.fillForApi(\n    //         this.filterAttributes('key', this.form.controls[field.label].value),\n    //       ),\n    //     });\n    //   }\n    // }\n    const preparedForAPI = this.prepareAPI()[this.form.value.id];\n    this.configService.updateProviderById(this.form.value.id, preparedForAPI).subscribe({\n      next: () => this.router.navigate(['/settings/data-sources']),\n      error: () => (this.submitted = false),\n    });\n  }\n\n  private prepareAPI(enabled = true) {\n    // REWORK THIS\n    const prov = this.cloneProviders.find((p) => p.id === this.form.value.id);\n    if (!prov) {\n      for (const providerKey in prov.params) {\n        prov.params[providerKey] = this.form.value[providerKey];\n      }\n      if (this.provider.visible_survey) {\n        prov.form_id = this.form.value.form_id.id;\n        if (prov.form_id) {\n          const obj: any = {};\n          for (const field of this.tableData) {\n            obj[field.label] = this.form.value[field.label];\n          }\n          prov.inbound_fields = obj;\n        }\n      } else {\n        delete prov.form_id;\n        delete prov.inbound_fields;\n      }\n      return { ...prov };\n    } else {\n      const provider: any = {};\n      provider[this.form.value.id] = {};\n      provider[this.form.value.id].params = this.form.value;\n      provider[this.form.value.id].enabled = enabled;\n      if (this.provider.visible_survey) {\n        provider[this.form.value.id]['provider-name'] = this.form.value.id;\n        provider[this.form.value.id].params.form_id = this.form.value.form_id.id;\n        // provider[this.form.value.id].form_id = this.form.value.form_id.id;\n        if (provider[this.form.value.id].params.form_id) {\n          const obj: any = {};\n          for (const field of this.tableData) {\n            obj[field.label] = this.form.value[field.label];\n          }\n          provider[this.form.value.id].params.inbound_fields = obj;\n        }\n      } else {\n        delete provider[this.form.value.id].params.form_id;\n        delete provider[this.form.value.id].params.inbound_fields;\n      }\n      return { ...provider };\n    }\n  }\n\n  private checkKeyFields(field: string): any {\n    if (field === 'title' || field === 'content') {\n      return this.filterAttributes('type', field === 'title' ? field : 'description')?.key;\n    } else if (field) {\n      return field.replace(/values./gi, '');\n    }\n  }\n\n  private filterAttributes(param: string, value: string) {\n    return this.surveyAttributesList.find((el: any) => el[param] === value);\n  }\n\n  private fillForApi(obj: any): string {\n    if (!obj) return '';\n    if (obj.type === 'title' || obj.type === 'description') {\n      return obj.type === 'title' ? obj.type : 'content';\n    } else {\n      return `values.${obj.key}`;\n    }\n  }\n\n  public back() {\n    if (this.isDesktop) {\n      this.router.navigate(['settings/data-sources']);\n    } else {\n      this.location.back();\n    }\n  }\n\n  public isProviderEnabled(provider: any): boolean {\n    return provider.enabled;\n  }\n}\n","<div class=\"form-head-panel\">\n  <h1 *ngIf=\"isDesktop$ | async\">{{ 'settings.data_sources.data_sources' | translate }}</h1>\n  <mzima-client-button\n    [routerLink]=\"['create']\"\n    *ngIf=\"!isAllProvidersAdded\"\n    [data-qa]=\"'btn-add-provider'\"\n  >\n    <span>{{ 'settings.data_sources.add_source' | translate }}</span>\n    <mat-icon icon svgIcon=\"plus\"></mat-icon>\n  </mzima-client-button>\n</div>\n<ng-container *ngIf=\"providersData?.length; else showLoader\">\n  <div *ngFor=\"let provider of providersData\" [data-qa]=\"'providers-list'\">\n    <a\n      matRipple\n      class=\"data-source-item\"\n      [routerLink]=\"['update', provider.id]\"\n      [data-qa]=\"provider.id\"\n    >\n      {{ provider.name }}\n    </a>\n  </div>\n</ng-container>\n\n<ng-template #showLoader>\n  <app-spinner class=\"spinner\"></app-spinner>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { arrayHelpers } from '@helpers';\nimport { Observable, switchMap } from 'rxjs';\nimport { ConfigService } from '../../core/services/config.service';\nimport { DataSourcesService } from '@mzima-client/sdk';\nimport { BreakpointService } from '@services';\n\n@Component({\n  selector: 'app-data-sources',\n  templateUrl: './data-sources.component.html',\n  styleUrls: ['./data-sources.component.scss'],\n})\nexport class DataSourcesComponent implements OnInit {\n  public isDesktop$: Observable<boolean>;\n  public isAllProvidersAdded: boolean;\n  public providersData: any;\n\n  constructor(\n    private configService: ConfigService,\n    private dataSourcesService: DataSourcesService,\n    private breakpointService: BreakpointService,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$;\n  }\n\n  ngOnInit() {\n    this.getProvidersList();\n  }\n\n  public getProvidersList() {\n    this.dataSourcesService\n      .getDataSource()\n      .pipe(switchMap((dataSources) => this.configService.getProvidersData(dataSources)))\n      .subscribe({\n        next: (providers) => {\n          this.providersData = arrayHelpers.sortArray(\n            providers.filter((provider: any) => provider.enabled),\n            'name',\n          );\n          this.isAllProvidersAdded = !!this.providersData.find(\n            (provider: any) => !provider.enabled,\n          );\n        },\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DataSourceItemComponent } from './data-source-item/data-source-item.component';\n\nimport { DataSourcesComponent } from './data-sources.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DataSourcesComponent,\n  },\n  {\n    path: 'update/:id',\n    component: DataSourceItemComponent,\n    data: { breadcrumb: 'Data Source' },\n  },\n  { path: 'create', component: DataSourceItemComponent, data: { breadcrumb: 'Data Source' } },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DataSourcesRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule, SpinnerModule } from '@shared';\nimport { DataSourceItemComponent } from './data-source-item/data-source-item.component';\nimport { DataSourcesRoutingModule } from './data-sources-routing.module';\nimport { DataSourcesComponent } from './data-sources.component';\n\n@NgModule({\n  declarations: [DataSourcesComponent, DataSourceItemComponent],\n  imports: [\n    CommonModule,\n    DataSourcesRoutingModule,\n    MatButtonModule,\n    DirectiveModule,\n    MatIconModule,\n    SpinnerModule,\n    TranslateModule,\n    MatSelectModule,\n    FormsModule,\n    MatSlideToggleModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatInputModule,\n    MatRadioModule,\n    MatRippleModule,\n    MzimaUiModule,\n  ],\n})\nexport class DataSourcesModule {}\n"],"x_google_ignoreList":[]}