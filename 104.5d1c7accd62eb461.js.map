{"version":3,"file":"104.5d1c7accd62eb461.js","mappings":"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B,KAAM,UACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,OACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,OACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAE1F,CACI96B,KAAM,QACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUxO,OACjBzG,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,MACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUxO,OACjBzG,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,OACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUxO,OACjBzG,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,QACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,QACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,SACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,UACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACjBnV,OAAQ,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGR,CACI96B,KAAM,QACNyrD,YAAY,EACZrtD,MAAO2xC,EAAUE,QACj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","names":["copyBuffer","cur","Buffer","from","constructor","buffer","slice","byteOffset","length","module","exports","rfdc","opts","circles","rfdcCircles","refs","refsNew","proto","cloneProto","o","Date","Array","isArray","cloneArray","Map","Set","o2","k","push","ArrayBuffer","isView","i","indexOf","pop","clone","Object","hasOwnProperty","call","a","fn","keys","a2","index","none","selector","this","querySelector","array","x","empty","querySelectorAll","matches","childMatcher","node","find","prototype","childFirst","firstElementChild","filter","children","update","EnterNode","parent","datum","ownerDocument","namespaceURI","_next","_parent","__data__","bindIndex","group","enter","exit","data","groupLength","dataLength","bindKey","key","keyValue","nodeByKeyValue","keyValues","has","set","get","delete","arraylike","ascending","b","NaN","appendChild","child","insertBefore","next","xhtml","svg","xlink","xml","xmlns","name","prefix","namespaces","space","local","attrRemove","removeAttribute","attrRemoveNS","fullname","removeAttributeNS","attrConstant","value","setAttribute","attrConstantNS","setAttributeNS","attrFunction","v","apply","arguments","attrFunctionNS","defaultView","document","styleRemove","style","removeProperty","styleConstant","priority","setProperty","styleFunction","styleValue","getPropertyValue","getComputedStyle","propertyRemove","propertyConstant","propertyFunction","classArray","string","trim","split","classList","ClassList","_node","_names","getAttribute","classedAdd","names","list","n","add","classedRemove","remove","classedTrue","classedFalse","classedFunction","textRemove","textContent","textConstant","textFunction","htmlRemove","innerHTML","htmlConstant","htmlFunction","raise","nextSibling","parentNode","lower","previousSibling","firstChild","creatorInherit","uri","documentElement","createElement","createElementNS","creatorFixed","namespace","constantNull","removeChild","selection_cloneShallow","cloneNode","selection_cloneDeep","parseTypenames","typenames","map","t","type","onRemove","typename","on","__on","j","m","removeEventListener","listener","options","onAdd","contextListener","event","addEventListener","dispatchEvent","params","window","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","dispatchConstant","dispatchFunction","join","splice","contains","root","Selection","groups","parents","_groups","_parents","selection","select","subgroups","subnode","subgroup","selectAll","arrayAll","selectorAll","selectChild","match","childFind","selectChildren","childrenFilter","matcher","bind","constant","enterGroup","updateGroup","exitGroup","previous","i0","i1","_enter","_exit","sparse","onenter","onupdate","onexit","append","merge","order","context","groups0","groups1","m0","Math","min","merges","group0","group1","selection_selection","compareDocumentPosition","sort","compare","compareNode","sortgroups","sortgroup","callback","nodes","size","each","attr","getAttributeNS","property","classed","text","html","create","creator","insert","before","deep","dispatch","Symbol","iterator","noop","_","test","Error","Dispatch","types","c","concat","T","copy","that","args","nonpassivecapture","capture","passive","preventDefault","stopImmediatePropagation","view","noevent","__noselect","MozUserSelect","yesdrag","noclick","setTimeout","factory","extend","definition","Color","brighter","reI","reN","reP","reHex","reRgbInteger","RegExp","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","color","format","l","toLowerCase","exec","parseInt","rgbn","Rgb","rgba","hsla","r","g","rgbConvert","opacity","rgb_formatHex","hex","rgb_formatRgb","clampa","clampi","isNaN","max","round","toString","h","s","Hsl","hslConvert","clamph","clampt","hsl2rgb","m1","m2","basis","t1","v0","v1","v2","v3","t2","t3","define","channels","assign","displayable","formatHex8","color_formatHex8","formatHsl","color_formatHsl","pow","darker","clamp","rgb_formatHex8","hsl","nogamma","d","linear","rgbGamma","y","gamma","exponential","start","end","colorRgb","rgbSpline","spline","colors","genericArray","nb","na","setTime","values","floor","reA","reB","source","am","bm","bs","bi","lastIndex","q","number","one","zero","date","isNumberArray","DataView","numberArray","valueOf","object","sourceEvent","undefined","currentTarget","ownerSVGElement","createSVGPoint","point","clientX","clientY","matrixTransform","getScreenCTM","inverse","getBoundingClientRect","rect","left","clientLeft","top","clientTop","pageX","pageY","taskHead","taskTail","frame","timeout","interval","clockLast","clockNow","clockSkew","clock","performance","now","setFrame","requestAnimationFrame","f","clearNow","Timer","_call","_time","timer","delay","time","restart","wake","timerFlush","e","nap","t0","Infinity","sleep","poke","clearTimeout","clearInterval","setInterval","elapsed","stop","TypeError","emptyOn","emptyTween","id","timing","schedules","__transition","self","tween","state","tick","duration","ease","schedule","init","active","svgNode","degrees","PI","identity","translateX","translateY","rotate","skewX","scaleX","scaleY","sqrt","atan2","atan","interpolateTransform","parse","pxComma","pxParen","degParen","translate","xa","ya","xb","yb","scale","interpolateTransformCss","parseCss","DOMMatrix","WebKitCSSMatrix","isIdentity","decompose","interpolateTransformSvg","parseSvg","transform","baseVal","consolidate","matrix","tweenRemove","tween0","tween1","tweenFunction","tweenValue","transition","_id","interpolateNumber","interpolateRgb","interpolateString","interpolate","value1","string00","interpolate0","string1","string0","string10","attrInterpolate","attrInterpolateNS","attrTweenNS","_value","attrTween","delayFunction","delayConstant","durationFunction","durationConstant","easeConstant","onFunction","on0","on1","sit","every","styleInterpolate","styleTween","textInterpolate","textTween","Transition","_name","newId","selection_prototype","inherit","id0","id1","styleNull","styleMaybeRemove","listener0","removeFunction","easeVarying","Promise","resolve","reject","cancel","interrupt","defaultTiming","cubicInOut","BrushEvent","target","mode","defineProperties","enumerable","configurable","nopropagation","MODE_DRAG","MODE_SPACE","MODE_HANDLE","MODE_CENTER","abs","brush_max","number1","number2","X","handles","input","output","xy","Y","cursors","overlay","w","nw","ne","se","sw","flipX","flipY","signsX","signsY","defaultFilter","ctrlKey","button","defaultExtent","hasAttribute","viewBox","width","height","defaultTouchable","navigator","maxTouchPoints","__brush","extent","descending","bisector","compare1","compare2","delta","lo","hi","mid","center","right","e10","e5","e2","tickSpec","count","step","power","log10","error","factor","i2","inc","tickIncrement","tickStep","reverse","durationSecond","durationMinute","durationHour","durationDay","durationWeek","durationMonth","durationYear","timeInterval","floori","offseti","field","ceil","d0","d1","offset","range","isFinite","millisecond","second","getMilliseconds","getUTCSeconds","timeMinute","getSeconds","getMinutes","utcMinute","setUTCSeconds","getUTCMinutes","timeHour","getHours","utcHour","setUTCMinutes","getUTCHours","timeDay","setHours","setDate","getDate","getTimezoneOffset","unixDay","setUTCHours","setUTCDate","getUTCDate","timeWeekday","getDay","timeSunday","utcWeekday","getUTCDay","utcSunday","timeMonth","setMonth","getMonth","getFullYear","utcMonth","setUTCMonth","getUTCMonth","getUTCFullYear","timeYear","setFullYear","utcYear","setUTCFullYear","ticker","year","month","week","day","hour","minute","tickIntervals","tickInterval","ticks","utcTicks","utcTickInterval","timeTicks","timeTickInterval","newInterval","utcMonday","utcThursday","weekday","sunday","monday","thursday","localDate","H","M","S","L","utcDate","UTC","newDate","locale","timeFormat","pads","numberRe","percentRe","requoteRe","pad","fill","sign","requote","replace","formatRe","formatLookup","parseWeekdayNumberSunday","parseWeekdayNumberMonday","u","parseWeekNumberSunday","U","parseWeekNumberISO","V","parseWeekNumberMonday","W","parseFullYear","parseYear","parseZone","Z","parseQuarter","parseMonthNumber","parseDayOfMonth","parseDayOfYear","parseHour24","parseMinutes","parseSeconds","parseMilliseconds","parseMicroseconds","parseLiteralPercent","parseUnixTimestamp","Q","parseUnixTimestampSeconds","formatDayOfMonth","p","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMicroseconds","formatMonthNumber","formatMinutes","formatSeconds","formatWeekdayNumberMonday","formatWeekNumberSunday","dISO","timeThursday","formatWeekNumberISO","formatWeekdayNumberSunday","formatWeekNumberMonday","timeMonday","formatYear","formatYearISO","formatFullYear","formatFullYearISO","formatZone","z","formatUTCDayOfMonth","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","utcDay","formatUTCMilliseconds","getUTCMilliseconds","formatUTCMicroseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekdayNumberMonday","dow","formatUTCWeekNumberSunday","UTCdISO","formatUTCWeekNumberISO","formatUTCWeekdayNumberSunday","formatUTCWeekNumberMonday","formatUTCYear","formatUTCYearISO","formatUTCFullYear","formatUTCFullYearISO","formatUTCZone","formatLiteralPercent","formatUnixTimestamp","formatUnixTimestampSeconds","defaultLocale","formatLocale","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_weekdays","days","locale_shortWeekdays","shortDays","locale_months","months","locale_shortMonths","shortMonths","periodRe","periodLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","formatShortWeekday","A","formatWeekday","formatShortMonth","B","formatMonth","G","I","formatPeriod","formatQuarter","utcFormats","formatUTCShortWeekday","formatUTCWeekday","formatUTCShortMonth","formatUTCMonth","formatUTCPeriod","formatUTCQuarter","parses","parseShortWeekday","parseWeekday","parseShortMonth","parseMonth","parseLocaleDateTime","parseSpecifier","parsePeriod","parseLocaleDate","parseLocaleTime","newFormat","specifier","charCodeAt","charAt","newParse","utcFormat","utcParse","bisectRight","bisect","unit","normalize","constants","bimap","domain","r0","r1","polymap","unknown","continuous","transformer","untransform","piecewise","interpolateValue","rescale","clamper","invert","rangeRound","interpolateRound","initRange","calendar","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","tickFormat","nice","x0","x1","timeWeek","timeSecond","prefixExponent","re","formatSpecifier","FormatSpecifier","align","symbol","comma","precision","formatDecimalParts","toExponential","coefficient","exponent","toFixed","toLocaleString","toPrecision","formatRounded","toUpperCase","formatPrefix","prefixes","linearish","precisionPrefix","precisionRound","precisionFixed","prestep","maxIter","grouping","thousands","substring","formatGroup","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","formatTypes","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","out","formatTrim","padding","InternMap","entries","keyof","super","_intern","_key","intern_get","intern_set","intern_delete","implicit","ordinal","band","bandwidth","ordinalRange","paddingInner","paddingOuter","sequence","pointish","quantileSorted","valueof","value0","quantile","thresholds","threshold","invertExtent","quantiles","Linear","_context","areaStart","_line","areaEnd","lineStart","_point","lineEnd","closePath","lineTo","moveTo","pi","tau","epsilon","tauEpsilon","strings","Path","digits","_x0","_y0","_x1","_y1","_append","appendRound","quadraticCurveTo","y1","bezierCurveTo","x2","y2","arcTo","y0","x21","y21","x01","y01","l01_2","x20","y20","l21_2","l20_2","l21","l01","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","withPath","shape","RangeError","defined","curve","curveLinear","path","line","defined0","pointX","pointY","area","x0z","y0z","arealine","lineX0","lineY0","lineY1","lineX1","ctx_r0","_r4","ctx_r3","ctx_r5","ctx_r6","_r3","ctx_r2","ctx_r4","tickFormatted_r5","tickFormatted_r7","ctx_r28","_r6","ctx_r7","ctx_r8","_r12","ctx_r11","ctx_r13","ctx_r14","_r19","ctx_r18","_r5","_r7","_r9","_r17","ctx_r16","ctx_r19","_r21","ctx_r20","ctx_r22","_r26","ctx_r25","throttle","func","wait","result","later","leading","remaining","trailing","throttleable","descriptor","defineProperty","PlacementTypes","Top","Bottom","Left","Right","Center","verticalPosition","elDimensions","popoverDimensions","alignment","horizontalPosition","PositionHelper","static","innerHeight","caretDimensions","popoverPosition","innerWidth","placement","spacing","flip","elmDim","hostDim","calculateVerticalCaret","calculateHorizontalCaret","calculateVerticalAlignment","calculateHorizontalAlignment","shouldFlip","TooltipContentComponent","element","renderer","platformId","cssClasses","clz","cssClass","ngAfterViewInit","position","isPlatformBrowser","nativeElm","nativeElement","host","checkFlip","positionContent","showCaret","positionCaret","addClass","setStyle","caretElm","determinePlacement","onWindowResize","ɵfac","PLATFORM_ID","ɵcmp","selectors","_c0","_t","ctx","styles","__decorate","InjectionService","applicationRef","componentFactoryResolver","injector","container","globalRootViewContainer","getRootViewContainer","_container","components","setRootViewContainer","getComponentRootNode","component","isViewContainerRef","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","inputs","bindingKeys","getOwnPropertyNames","bindingName","instance","outputs","eventKeys","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalOutlet","portal","ComponentPortal","componentRef","attach","ɵprov","TooltipService","InjectionRegisteryService","injectionService","defaults","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","destroyAll","destroyByType","comps","LegendPosition","Below","LegendType","ScaleLegend","Legend","ScaleType","Time","Ordinal","Quantile","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","gradient","splits","pairs","forEach","decls","formatLabel","label","toLocaleDateString","escapeLabel","LegendEntryComponent","isActive","EventEmitter","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","onMouseLeave","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","markForCheck","getLegendEntries","items","findIndex","getColor","entry","activeEntries","item","trackBy","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","chartWidth","legendWidth","scaleType","ngContentSelectors","encapsulation","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","ɵdir","isDate","BaseChartComponent","chartElement","scheme","schemeType","ngOnInit","isPlatformServer","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","formatDates","series","resizeSubscription","subscription","fromEvent","pipe","debounceTime","seriesItem","seriesItemCopy","extra","JSON","stringify","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","orient","attrs","trimLabel","reduceTicks","maxTicks","reduced","modulus","getTickLines","maxLength","maxLines","labelString","totalLines","reduce","lines","last","startIndex","TextAnchor","Start","Middle","End","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","wrapTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","approxHeight","maxPossibleLengthForTickIfWrapped","isWrapTicksSupported","updateDims","ticksElement","getTicks","tickFormatting","angle","getRotationAngle","adjustedScale","textTransform","tickLength","tickTrim","wordWidth","baseWidth","maxBaseWidth","labelHeight","longestTick","earlier","current","tickChunks","getMaxPossibleLengthForTick","requiredHeight","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","longestLabel","maxCharacters","averageCharacterWidth","truncatedText","maxAllowedLines","possibleStringLength","_c4","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","stroke","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","tickSpacing","positionMiddle","chunksLength","availableFreeSpace","referenceLines","setReferencelines","refMin","refMax","referenceAreaPath","gridLineWidth","tickHeight","preferredWidth","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","AxesModule","ɵmod","ɵinj","CommonModule","StyleTypes","popover","tooltip","ShowTypes","all","focus","mouseover","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","tooltipImmediateExit","show","hide","listensForFocus","listensForHover","hideTooltip","onFocus","showTooltip","onBlur","onMouseClick","immediate","userAgent","createBoundOptions","addHideListeners","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","destroyFn","title","tooltipTitle","template","tooltipTemplate","tooltipContext","TooltipModule","imports","cache","random","BarOrientation","Vertical","Horizontal","SvgLinearGradientComponent","CircleComponent","onClick","classNames","SeriesType","Standard","Stacked","CircleSeriesComponent","barVisible","barOrientation","placementTypes","styleTypes","isSSR","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","cx","xScale","cy","yScale","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","trigger","animate","changeDetection","AreaComponent","startOpacity","endOpacity","animationsLoaded","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","global","MouseEvent","createMouseEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","groupName","val","mouseMove","xPos","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","_c18","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","includes","scaleTime","scaleLinear","scalePoint","brushX","dim","touchending","touchable","listeners","handleSize","initialize","handle","redraw","started","touchmoved","touchended","emitter","clean","Emitter","touches","w0","w1","n0","n1","e0","e1","s0","s1","moving","lockX","lockY","metaKey","altKey","signX","signY","N","E","shifting","shiftKey","points","identifier","pointer","point0","beforestart","pts","move","moved","ended","keydowned","keyupped","dragDisable","changedTouches","dragEnable","keyCode","selection0","selection1","clear","starting","keyModifiers","newDomain","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","valueScale","formattedValue","found","mapping","getLinearGradientStops","colorValueScale","scaleBand","endColor","startVal","startColor","endVal","currentVal","originalOffset","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarChartType","Normalized","D0Types","positive","negative","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","valueFormatting","barX","barWidth","barY","barHeight","SeriesVerticalComponent","showDataLabel","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","yScaleMin","total","d0Type","sum","bars","getLabel","bar","offset0","offset1","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","BarVerticalComponent","legend","legendTitle","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","barPadding","roundDomains","dataLabelMaxHeight","xAxis","yAxis","showXAxisLabel","showYAxisLabel","getYScale","setColors","getLegendOptions","yDomain","getYDomain","yAxisTicks","some","yScaleMax","updateYAxisWidth","updateXAxisHeight","onDataLabelMaxHeightChanged","onActivate","fromLegend","onDeactivate","dirIndex","BarChartModule","BoxChartModule","BubbleChartModule","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","gradientUrl","sortLinear","direction","sortByTime","aDate","getTime","bDate","sortByDomain","bVal","aIdx","bIdx","areaGradientStops","isInactive","LineChartComponent","timelineHeight","timelinePadding","timeline","filteredDomain","seriesDomain","getSeriesDomain","updateTimeline","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","getUniqueXDomainValues","valueSet","getScaleType","checkDateType","xScaleMin","xScaleMax","autoScale","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","LineChartModule","PieChartModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","SankeyModule","NgxChartsModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","ChartHeadComponent","filters","selectedFilter","selectedRange","filterChanged","dateChanged","ranges","displayNane","rangeChange","change","ActivityTimelineComponent","postsService","below","colorScheme","cumulativeTotal","dateRange","getPostStatistics","timeline_attribute","group_by","response","console","log","dateChange","changeCumulativeTotal","BarChartComponent","group_by_total_posts","ActivityComponent","routes","ActivityRoutingModule","RouterModule","ActivityModule","FormsModule","MatInputModule","MatSelectModule","TranslateModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./node_modules/rfdc/index.js","./node_modules/d3-selection/src/selector.js","./node_modules/d3-selection/src/array.js","./node_modules/d3-selection/src/selectorAll.js","./node_modules/d3-selection/src/matcher.js","./node_modules/d3-selection/src/selection/selectChild.js","./node_modules/d3-selection/src/selection/selectChildren.js","./node_modules/d3-selection/src/selection/sparse.js","./node_modules/d3-selection/src/selection/enter.js","./node_modules/d3-selection/src/constant.js","./node_modules/d3-selection/src/selection/data.js","./node_modules/d3-selection/src/selection/sort.js","./node_modules/d3-selection/src/namespaces.js","./node_modules/d3-selection/src/namespace.js","./node_modules/d3-selection/src/selection/attr.js","./node_modules/d3-selection/src/window.js","./node_modules/d3-selection/src/selection/style.js","./node_modules/d3-selection/src/selection/property.js","./node_modules/d3-selection/src/selection/classed.js","./node_modules/d3-selection/src/selection/text.js","./node_modules/d3-selection/src/selection/html.js","./node_modules/d3-selection/src/selection/raise.js","./node_modules/d3-selection/src/selection/lower.js","./node_modules/d3-selection/src/creator.js","./node_modules/d3-selection/src/selection/insert.js","./node_modules/d3-selection/src/selection/remove.js","./node_modules/d3-selection/src/selection/clone.js","./node_modules/d3-selection/src/selection/on.js","./node_modules/d3-selection/src/selection/dispatch.js","./node_modules/d3-selection/src/selection/index.js","./node_modules/d3-selection/src/selection/select.js","./node_modules/d3-selection/src/selection/selectAll.js","./node_modules/d3-selection/src/selection/filter.js","./node_modules/d3-selection/src/selection/exit.js","./node_modules/d3-selection/src/selection/join.js","./node_modules/d3-selection/src/selection/merge.js","./node_modules/d3-selection/src/selection/order.js","./node_modules/d3-selection/src/selection/call.js","./node_modules/d3-selection/src/selection/nodes.js","./node_modules/d3-selection/src/selection/node.js","./node_modules/d3-selection/src/selection/size.js","./node_modules/d3-selection/src/selection/empty.js","./node_modules/d3-selection/src/selection/each.js","./node_modules/d3-selection/src/selection/append.js","./node_modules/d3-selection/src/selection/datum.js","./node_modules/d3-selection/src/selection/iterator.js","./node_modules/d3-selection/src/select.js","./node_modules/d3-dispatch/src/dispatch.js","./node_modules/d3-drag/src/noevent.js","./node_modules/d3-drag/src/nodrag.js","./node_modules/d3-color/src/define.js","./node_modules/d3-color/src/color.js","./node_modules/d3-interpolate/src/basis.js","./node_modules/d3-interpolate/src/constant.js","./node_modules/d3-interpolate/src/color.js","./node_modules/d3-interpolate/src/rgb.js","./node_modules/d3-interpolate/src/array.js","./node_modules/d3-interpolate/src/date.js","./node_modules/d3-interpolate/src/number.js","./node_modules/d3-interpolate/src/object.js","./node_modules/d3-interpolate/src/basisClosed.js","./node_modules/d3-interpolate/src/string.js","./node_modules/d3-interpolate/src/numberArray.js","./node_modules/d3-interpolate/src/value.js","./node_modules/d3-selection/src/pointer.js","./node_modules/d3-selection/src/sourceEvent.js","./node_modules/d3-timer/src/timer.js","./node_modules/d3-timer/src/timeout.js","./node_modules/d3-transition/src/transition/schedule.js","./node_modules/d3-transition/src/interrupt.js","./node_modules/d3-interpolate/src/transform/decompose.js","./node_modules/d3-interpolate/src/transform/parse.js","./node_modules/d3-interpolate/src/transform/index.js","./node_modules/d3-transition/src/transition/tween.js","./node_modules/d3-transition/src/transition/interpolate.js","./node_modules/d3-transition/src/transition/attr.js","./node_modules/d3-transition/src/transition/attrTween.js","./node_modules/d3-transition/src/transition/delay.js","./node_modules/d3-transition/src/transition/duration.js","./node_modules/d3-transition/src/transition/ease.js","./node_modules/d3-transition/src/transition/on.js","./node_modules/d3-transition/src/transition/selection.js","./node_modules/d3-transition/src/transition/style.js","./node_modules/d3-transition/src/transition/styleTween.js","./node_modules/d3-transition/src/transition/textTween.js","./node_modules/d3-transition/src/transition/index.js","./node_modules/d3-transition/src/transition/select.js","./node_modules/d3-transition/src/transition/selectAll.js","./node_modules/d3-transition/src/transition/filter.js","./node_modules/d3-transition/src/transition/merge.js","./node_modules/d3-transition/src/transition/transition.js","./node_modules/d3-transition/src/transition/text.js","./node_modules/d3-transition/src/transition/remove.js","./node_modules/d3-transition/src/transition/easeVarying.js","./node_modules/d3-transition/src/transition/end.js","./node_modules/d3-transition/src/selection/transition.js","./node_modules/d3-ease/src/cubic.js","./node_modules/d3-transition/src/selection/index.js","./node_modules/d3-transition/src/selection/interrupt.js","./node_modules/d3-brush/src/constant.js","./node_modules/d3-brush/src/event.js","./node_modules/d3-brush/src/noevent.js","./node_modules/d3-brush/src/brush.js","./node_modules/d3-array/src/ascending.js","./node_modules/d3-array/src/descending.js","./node_modules/d3-array/src/bisector.js","./node_modules/d3-array/src/ticks.js","./node_modules/d3-time/src/duration.js","./node_modules/d3-time/src/interval.js","./node_modules/d3-time/src/millisecond.js","./node_modules/d3-time/src/second.js","./node_modules/d3-time/src/minute.js","./node_modules/d3-time/src/hour.js","./node_modules/d3-time/src/day.js","./node_modules/d3-time/src/week.js","./node_modules/d3-time/src/month.js","./node_modules/d3-time/src/year.js","./node_modules/d3-time/src/ticks.js","./node_modules/d3-time-format/node_modules/d3-time/src/interval.js","./node_modules/d3-time-format/node_modules/d3-time/src/duration.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcWeek.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcDay.js","./node_modules/d3-time-format/node_modules/d3-time/src/week.js","./node_modules/d3-time-format/node_modules/d3-time/src/day.js","./node_modules/d3-time-format/node_modules/d3-time/src/year.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcYear.js","./node_modules/d3-time-format/src/locale.js","./node_modules/d3-time-format/src/defaultLocale.js","./node_modules/d3-array/src/number.js","./node_modules/d3-array/src/bisect.js","./node_modules/d3-interpolate/src/round.js","./node_modules/d3-scale/src/number.js","./node_modules/d3-scale/src/continuous.js","./node_modules/d3-scale/src/constant.js","./node_modules/d3-scale/src/init.js","./node_modules/d3-scale/src/time.js","./node_modules/d3-scale/src/nice.js","./node_modules/d3-format/src/formatSpecifier.js","./node_modules/d3-format/src/formatPrefixAuto.js","./node_modules/d3-format/src/formatDecimal.js","./node_modules/d3-format/src/exponent.js","./node_modules/d3-format/src/formatRounded.js","./node_modules/d3-format/src/formatTypes.js","./node_modules/d3-format/src/identity.js","./node_modules/d3-format/src/locale.js","./node_modules/d3-format/src/defaultLocale.js","./node_modules/d3-scale/src/linear.js","./node_modules/d3-scale/src/tickFormat.js","./node_modules/d3-format/src/precisionPrefix.js","./node_modules/d3-format/src/precisionRound.js","./node_modules/d3-format/src/precisionFixed.js","./node_modules/d3-array/src/range.js","./node_modules/d3-format/src/formatGroup.js","./node_modules/d3-format/src/formatNumerals.js","./node_modules/d3-format/src/formatTrim.js","./node_modules/internmap/src/index.js","./node_modules/d3-scale/src/ordinal.js","./node_modules/d3-scale/src/band.js","./node_modules/d3-array/src/quantile.js","./node_modules/d3-scale/src/quantile.js","./node_modules/d3-shape/src/array.js","./node_modules/d3-shape/src/constant.js","./node_modules/d3-shape/src/curve/linear.js","./node_modules/d3-path/src/path.js","./node_modules/d3-shape/src/path.js","./node_modules/d3-shape/src/point.js","./node_modules/d3-shape/src/line.js","./node_modules/d3-shape/src/area.js","./node_modules/@swimlane/ngx-charts/fesm2020/swimlane-ngx-charts.mjs","./apps/web-mzima-client/src/app/activity/chart-head/chart-head.component.html","./apps/web-mzima-client/src/app/activity/chart-head/chart-head.component.ts","./apps/web-mzima-client/src/app/activity/activity-timeline/activity-timeline.component.html","./apps/web-mzima-client/src/app/activity/activity-timeline/activity-timeline.component.ts","./apps/web-mzima-client/src/app/activity/bar-chart/bar-chart.component.html","./apps/web-mzima-client/src/app/activity/bar-chart/bar-chart.component.ts","./apps/web-mzima-client/src/app/activity/activity.component.ts","./apps/web-mzima-client/src/app/activity/activity.component.html","./apps/web-mzima-client/src/app/activity/activity-routing.module.ts","./apps/web-mzima-client/src/app/activity/activity.module.ts"],"sourcesContent":["'use strict'\nmodule.exports = rfdc\n\nfunction copyBuffer (cur) {\n  if (cur instanceof Buffer) {\n    return Buffer.from(cur)\n  }\n\n  return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length)\n}\n\nfunction rfdc (opts) {\n  opts = opts || {}\n\n  if (opts.circles) return rfdcCircles(opts)\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    var keys = Object.keys(a)\n    var a2 = new Array(keys.length)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      var cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur instanceof Date) {\n        a2[k] = new Date(cur)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        a2[k] = fn(cur)\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\n    var o2 = {}\n    for (var k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = clone(cur)\n      }\n    }\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\n    var o2 = {}\n    for (var k in o) {\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = cloneProto(cur)\n      }\n    }\n    return o2\n  }\n}\n\nfunction rfdcCircles (opts) {\n  var refs = []\n  var refsNew = []\n\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    var keys = Object.keys(a)\n    var a2 = new Array(keys.length)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      var cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur instanceof Date) {\n        a2[k] = new Date(cur)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        var index = refs.indexOf(cur)\n        if (index !== -1) {\n          a2[k] = refsNew[index]\n        } else {\n          a2[k] = fn(cur)\n        }\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\n    var o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (var k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        var i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = clone(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\n    var o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (var k in o) {\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        var i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = cloneProto(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nexport default function array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n","import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === \"object\" && \"length\" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n","import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n","import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n","import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === \"function\") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + \"\");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n","import {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","// These are typically used in conjunction with noevent to ensure that we can\n// preventDefault on the event.\nexport const nonpassive = {passive: false};\nexport const nonpassivecapture = {capture: true, passive: false};\n\nexport function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {select} from \"d3-selection\";\nimport noevent, {nonpassivecapture} from \"./noevent.js\";\n\nexport default function(view) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", noevent, nonpassivecapture);\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", noevent, nonpassivecapture);\n  } else {\n    root.__noselect = root.style.MozUserSelect;\n    root.style.MozUserSelect = \"none\";\n  }\n}\n\nexport function yesdrag(view, noclick) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", null);\n  if (noclick) {\n    selection.on(\"click.drag\", noevent, nonpassivecapture);\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n  }\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", null);\n  } else {\n    root.style.MozUserSelect = root.__noselect;\n    delete root.__noselect;\n  }\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","import sourceEvent from \"./sourceEvent.js\";\n\nexport default function(event, node) {\n  event = sourceEvent(event);\n  if (node === undefined) node = event.currentTarget;\n  if (node) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    if (node.getBoundingClientRect) {\n      var rect = node.getBoundingClientRect();\n      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n    }\n  }\n  return [event.pageX, event.pageY];\n}\n","export default function(event) {\n  let sourceEvent;\n  while (sourceEvent = event.sourceEvent) event = sourceEvent;\n  return event;\n}\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n","function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n","import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n","import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","export default x => () => x;\n","export default function BrushEvent(type, {\n  sourceEvent,\n  target,\n  selection,\n  mode,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    selection: {value: selection, enumerable: true, configurable: true},\n    mode: {value: mode, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n","export function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","const t0 = new Date, t1 = new Date;\n\nexport function timeInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = (date) => {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = (date) => {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = (date) => {\n    const d0 = interval(date), d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = (date, step) => {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = (start, stop, step) => {\n    const range = [];\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    let previous;\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = (test) => {\n    return timeInterval((date) => {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, (date, step) => {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = (start, end) => {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = (step) => {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? (d) => field(d) % step === 0\n              : (d) => interval.count(0, d) % step === 0);\n    };\n  }\n\n  return interval;\n}\n","import {timeInterval} from \"./interval.js\";\n\nexport const millisecond = timeInterval(() => {\n  // noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = (k) => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return timeInterval((date) => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nexport const milliseconds = millisecond.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationSecond} from \"./duration.js\";\n\nexport const second = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds());\n}, (date, step) => {\n  date.setTime(+date + step * durationSecond);\n}, (start, end) => {\n  return (end - start) / durationSecond;\n}, (date) => {\n  return date.getUTCSeconds();\n});\n\nexport const seconds = second.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeMinute = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getMinutes();\n});\n\nexport const timeMinutes = timeMinute.range;\n\nexport const utcMinute = timeInterval((date) => {\n  date.setUTCSeconds(0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getUTCMinutes();\n});\n\nexport const utcMinutes = utcMinute.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationHour, durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeHour = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getHours();\n});\n\nexport const timeHours = timeHour.range;\n\nexport const utcHour = timeInterval((date) => {\n  date.setUTCMinutes(0, 0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getUTCHours();\n});\n\nexport const utcHours = utcHour.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nexport const timeDay = timeInterval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport const timeDays = timeDay.range;\n\nexport const utcDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return date.getUTCDate() - 1;\n});\n\nexport const utcDays = utcDay.range;\n\nexport const unixDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return Math.floor(date / durationDay);\n});\n\nexport const unixDays = unixDay.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction timeWeekday(i) {\n  return timeInterval((date) => {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setDate(date.getDate() + step * 7);\n  }, (start, end) => {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport const timeSunday = timeWeekday(0);\nexport const timeMonday = timeWeekday(1);\nexport const timeTuesday = timeWeekday(2);\nexport const timeWednesday = timeWeekday(3);\nexport const timeThursday = timeWeekday(4);\nexport const timeFriday = timeWeekday(5);\nexport const timeSaturday = timeWeekday(6);\n\nexport const timeSundays = timeSunday.range;\nexport const timeMondays = timeMonday.range;\nexport const timeTuesdays = timeTuesday.range;\nexport const timeWednesdays = timeWednesday.range;\nexport const timeThursdays = timeThursday.range;\nexport const timeFridays = timeFriday.range;\nexport const timeSaturdays = timeSaturday.range;\n\nfunction utcWeekday(i) {\n  return timeInterval((date) => {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, (start, end) => {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport const utcSunday = utcWeekday(0);\nexport const utcMonday = utcWeekday(1);\nexport const utcTuesday = utcWeekday(2);\nexport const utcWednesday = utcWeekday(3);\nexport const utcThursday = utcWeekday(4);\nexport const utcFriday = utcWeekday(5);\nexport const utcSaturday = utcWeekday(6);\n\nexport const utcSundays = utcSunday.range;\nexport const utcMondays = utcMonday.range;\nexport const utcTuesdays = utcTuesday.range;\nexport const utcWednesdays = utcWednesday.range;\nexport const utcThursdays = utcThursday.range;\nexport const utcFridays = utcFriday.range;\nexport const utcSaturdays = utcSaturday.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeMonth = timeInterval((date) => {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setMonth(date.getMonth() + step);\n}, (start, end) => {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, (date) => {\n  return date.getMonth();\n});\n\nexport const timeMonths = timeMonth.range;\n\nexport const utcMonth = timeInterval((date) => {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, (start, end) => {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, (date) => {\n  return date.getUTCMonth();\n});\n\nexport const utcMonths = utcMonth.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeYear = timeInterval((date) => {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setFullYear(date.getFullYear() + step);\n}, (start, end) => {\n  return end.getFullYear() - start.getFullYear();\n}, (date) => {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\ntimeYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport const timeYears = timeYear.range;\n\nexport const utcYear = timeInterval((date) => {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, (start, end) => {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, (date) => {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport const utcYears = utcYear.range;\n","import {bisector, tickStep} from \"d3-array\";\nimport {durationDay, durationHour, durationMinute, durationMonth, durationSecond, durationWeek, durationYear} from \"./duration.js\";\nimport {millisecond} from \"./millisecond.js\";\nimport {second} from \"./second.js\";\nimport {timeMinute, utcMinute} from \"./minute.js\";\nimport {timeHour, utcHour} from \"./hour.js\";\nimport {timeDay, unixDay} from \"./day.js\";\nimport {timeSunday, utcSunday} from \"./week.js\";\nimport {timeMonth, utcMonth} from \"./month.js\";\nimport {timeYear, utcYear} from \"./year.js\";\n\nfunction ticker(year, month, week, day, hour, minute) {\n\n  const tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function ticks(start, stop, count) {\n    const reverse = stop < start;\n    if (reverse) [start, stop] = [stop, start];\n    const interval = count && typeof count.range === \"function\" ? count : tickInterval(start, stop, count);\n    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop\n    return reverse ? ticks.reverse() : ticks;\n  }\n\n  function tickInterval(start, stop, count) {\n    const target = Math.abs(stop - start) / count;\n    const i = bisector(([,, step]) => step).right(tickIntervals, target);\n    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));\n    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));\n    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n    return t.every(step);\n  }\n\n  return [ticks, tickInterval];\n}\n\nconst [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);\nconst [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);\n\nexport {utcTicks, utcTickInterval, timeTicks, timeTickInterval};\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = function(date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","import interval from \"./interval.js\";\nimport {durationWeek} from \"./duration.js\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval.js\";\nimport {durationDay} from \"./duration.js\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nvar day = interval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval.js\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval.js\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newDate(y, m, d) {\n  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"g\": formatYearISO,\n    \"G\": formatFullYearISO,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"q\": formatQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"g\": formatUTCYearISO,\n    \"G\": formatUTCFullYearISO,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"q\": formatUTCQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"g\": parseYear,\n    \"G\": parseFullYear,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"q\": parseQuarter,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, Z) {\n    return function(string) {\n      var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n      // If this is utcParse, never use the local timezone.\n      if (Z && !(\"Z\" in d)) d.Z = 0;\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // If the month was not specified, inherit from the quarter.\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return localDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatQuarter(d) {\n    return 1 + ~~(d.getMonth() / 3);\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  function formatUTCQuarter(d) {\n    return 1 + ~~(d.getUTCMonth() / 3);\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", false);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier += \"\", true);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  return new Map(names.map((name, i) => [name.toLowerCase(), i]));\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseQuarter(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction dISO(d) {\n  var day = d.getDay();\n  return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  d = dISO(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatYearISO(d, p) {\n  d = dISO(d);\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatFullYearISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction UTCdISO(d) {\n  var day = d.getUTCDay();\n  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  d = UTCdISO(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCYearISO(d, p) {\n  d = UTCdISO(d);\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCFullYearISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","import {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeTicks, timeTickInterval} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport nice from \"./nice.js\";\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    return interval ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n  };\n\n  return scale;\n}\n\nexport default function time() {\n  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","export default function nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n","import {InternMap} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init.js\";\nimport ordinal from \"./ordinal.js\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof = number) {\n  if (isNaN(p = +p)) return;\n  numbers = Float64Array.from(values, (_, i) => number(valueof(values[i], i, values)));\n  if (p <= 0) return minIndex(numbers);\n  if (p >= 1) return maxIndex(numbers);\n  var numbers,\n      index = Uint32Array.from(values, (_, i) => i),\n      j = numbers.length - 1,\n      i = Math.floor(j * p);\n  quickselect(index, i, 0, j, (i, j) => ascendingDefined(numbers[i], numbers[j]));\n  i = greatest(index.subarray(0, i + 1), (i) => numbers[i]);\n  return i >= 0 ? i : -1;\n}\n","import {ascending, bisect, quantileSorted as threshold} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","export var slice = Array.prototype.slice;\n\nexport default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","const pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction append(strings) {\n  this._ += strings[0];\n  for (let i = 1, n = strings.length; i < n; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  let d = Math.floor(digits);\n  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  const k = 10 ** d;\n  return function(strings) {\n    this._ += strings[0];\n    for (let i = 1, n = strings.length; i < n; ++i) {\n      this._ += Math.round(arguments[i] * k) / k + strings[i];\n    }\n  };\n}\n\nexport class Path {\n  constructor(digits) {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n    this._append = digits == null ? append : appendRound(digits);\n  }\n  moveTo(x, y) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._append`Z`;\n    }\n  }\n  lineTo(x, y) {\n    this._append`L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  quadraticCurveTo(x1, y1, x, y) {\n    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._append`M${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._append`L${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      let x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;\n      }\n\n      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;\n    }\n  }\n  arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._append`M${x0},${y0}`;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._append`L${x0},${y0}`;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;\n    }\n  }\n  rect(x, y, w, h) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;\n  }\n  toString() {\n    return this._;\n  }\n}\n\nexport function path() {\n  return new Path;\n}\n\n// Allow instanceof d3.path\npath.prototype = Path.prototype;\n\nexport function pathRound(digits = 3) {\n  return new Path(+digits);\n}\n","import {Path} from \"d3-path\";\n\nexport function withPath(shape) {\n  let digits = 3;\n\n  shape.digits = function(_) {\n    if (!arguments.length) return digits;\n    if (_ == null) {\n      digits = null;\n    } else {\n      const d = Math.floor(_);\n      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n      digits = d;\n    }\n    return shape;\n  };\n\n  return () => new Path(digits);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport {withPath} from \"./path.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x, y) {\n  var defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null,\n      path = withPath(line);\n\n  x = typeof x === \"function\" ? x : (x === undefined) ? pointX : constant(x);\n  y = typeof y === \"function\" ? y : (y === undefined) ? pointY : constant(y);\n\n  function line(data) {\n    var i,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport {withPath} from \"./path.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x0, y0, y1) {\n  var x1 = null,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null,\n      path = withPath(area);\n\n  x0 = typeof x0 === \"function\" ? x0 : (x0 === undefined) ? pointX : constant(+x0);\n  y0 = typeof y0 === \"function\" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);\n  y1 = typeof y1 === \"function\" ? y1 : (y1 === undefined) ? pointY : constant(+y1);\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { sankey, sankeyLeft, sankeyLinkHorizontal } from 'd3-sankey';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        // eslint-disable-next-line prefer-rest-params\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = { ...this.defaults.inputs };\n        const outputs = { ...this.defaults.outputs };\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = { ...inputs, ...bindings.inputs };\n        }\n        if (outputs) {\n            bindings.outputs = { ...outputs, ...bindings.outputs };\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {};\n            if (item['name'] !== undefined) {\n                copy['name'] = item['name'];\n            }\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            if (item['source'] !== undefined) {\n                copy['source'] = item['source'];\n            }\n            if (item['target'] !== undefined) {\n                copy['target'] = item['target'];\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n    const labelString = (label || '').toString();\n    let totalLines = [];\n    if (/\\s/.test(labelString)) {\n        totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n            const last = (lines.pop() || '') + ' ';\n            return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n        }, []);\n    }\n    else {\n        let startIndex = 0;\n        while (startIndex < labelString.length) {\n            totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n            startIndex += maxLength;\n        }\n    }\n    if (totalLines.length > maxLines) {\n        totalLines = totalLines.splice(0, maxLines);\n        totalLines[totalLines.length - 1] += '...';\n    }\n    return totalLines;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n        this.maxPossibleLengthForTickIfWrapped = 16;\n    }\n    get isWrapTicksSupported() {\n        return this.wrapTicks && this.scale.step;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        let labelHeight = 14;\n        if (this.isWrapTicksSupported) {\n            const longestTick = this.ticks.reduce((earlier, current) => (current.length > earlier.length ? current : earlier), '');\n            const tickLines = this.tickChunks(longestTick);\n            labelHeight = 14 * (tickLines.length || 1);\n            this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n        }\n        const requiredHeight = angle !== 0\n            ? Math.max(Math.abs(Math.sin((angle * Math.PI) / 180)) * this.maxTickLength * charWidth, 10)\n            : labelHeight;\n        this.approxHeight = Math.min(requiredHeight, 200);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getMaxPossibleLengthForTick(longestLabel) {\n        if (this.scale.bandwidth) {\n            const averageCharacterWidth = 7; // approximate char width\n            const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n            const truncatedText = longestLabel.slice(0, maxCharacters);\n            return Math.max(truncatedText.length, this.maxTickLength);\n        }\n        return this.maxTickLength;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            const maxAllowedLines = 5;\n            let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n            if (!isPlatformBrowser(this.platformId)) {\n                possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n            }\n            maxLines = Math.min(maxLines, maxAllowedLines);\n            const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n            return lines;\n        }\n        return [this.tickTrim(label)];\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? d => {\n                // position the tick to middle considering number of lines of the tick\n                const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n                if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n                    const chunksLength = this.tickChunks(d).length;\n                    if (chunksLength === 1) {\n                        return positionMiddle;\n                    }\n                    const bandWidth = scale.bandwidth();\n                    const heightOfLines = chunksLength * 8;\n                    const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n                    return scale(d) + availableFreeSpace;\n                }\n                return positionMiddle;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            // for y-axis the width of the tick is fixed\n            const preferredWidth = this.maxTickLength;\n            const maxLines = Math.floor(this.scale.bandwidth() / 15);\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n        }\n        return [this.tickFormat(label)];\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nconst colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nconst cloneDeep = rfdc();\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0?.getTotalLength();\n            const n1 = path1?.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", wrapTicks: \"wrapTicks\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = {\n            ...this.dims,\n            width: halfWidth\n        };\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear: {\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            }\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass SankeyComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showLabels = true;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n        this.scaleType = ScaleType.Ordinal;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            legendType: this.scaleType\n        });\n        const linkDefs = this.results;\n        const nodeDefs = Array.from(new Set(linkDefs.flatMap(l => [l.source, l.target])), (name) => ({\n            name,\n            value: linkDefs.filter(l => l.source === name).reduce((acc, l) => acc + l.value, 0)\n        }));\n        // Configure generator\n        const sankeyGenerator = sankey()\n            .nodeId(d => d.name)\n            .nodeAlign(sankeyLeft)\n            .nodeWidth(15)\n            .nodePadding(10)\n            .extent([\n            [1, 5],\n            [this.dims.width - 1, this.dims.height - 5]\n        ]);\n        // Generate links and nodes\n        const data = sankeyGenerator({\n            nodes: nodeDefs.map(d => Object.assign({}, d)),\n            links: linkDefs.map(d => Object.assign({}, d))\n        });\n        this.valueDomain = this.getValueDomain(data.nodes);\n        this.setColors();\n        this.nodeRects = data.nodes.map(node => {\n            const rect = {\n                x: node.x0,\n                y: node.y0,\n                height: node.y1 - node.y0,\n                width: node.x1 - node.x0,\n                fill: this.colors.getColor(node.name),\n                tooltip: this.getNodeTooltipText(node),\n                rx: 5,\n                data: {\n                    name: node.name,\n                    value: node.value\n                },\n                transform: '',\n                label: this.labelFormatting ? this.labelFormatting(node.name) : node.name,\n                labelAnchor: TextAnchor.Start\n            };\n            rect.labelAnchor = this.getTextAnchor(node);\n            rect.transform = `translate(${rect.x},${rect.y})`;\n            return rect;\n        });\n        this.linkPaths = data.links.map(link => {\n            const gradientId = 'mask' + id().toString();\n            const linkPath = {\n                path: sankeyLinkHorizontal()(link),\n                strokeWidth: Math.max(1, link.width),\n                tooltip: this.getLinkTooltipText(link.source, link.target, link.value),\n                id: gradientId,\n                gradientFill: `url(#${gradientId})`,\n                source: link.source,\n                target: link.target,\n                startColor: this.colors.getColor(link.source.name),\n                endColor: this.colors.getColor(link.target.name),\n                data: {\n                    source: link.source.name,\n                    target: link.target.name,\n                    value: link.value\n                }\n            };\n            return linkPath;\n        });\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getNodeTooltipText(node) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(node.name)}</span>\n      <span class=\"tooltip-val\">${node.value.toLocaleString()}</span>\n    `;\n    }\n    getLinkTooltipText(sourceNode, targetNode, value) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(sourceNode.name)} • ${escapeLabel(targetNode.name)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()} (${(value / sourceNode.value).toLocaleString(undefined, {\n            style: 'percent',\n            maximumFractionDigits: 2\n        })})</span>\n    `;\n    }\n    getTextAnchor(node) {\n        if (node.layer === 0) {\n            return TextAnchor.Start;\n        }\n        else {\n            return TextAnchor.End;\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getValueDomain(nodes) {\n        return nodes.map(n => n.name);\n    }\n}\nSankeyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nSankeyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SankeyComponent, selector: \"ngx-charts-sankey\", inputs: { showLabels: \"showLabels\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-sankey', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SankeyModule {\n}\nSankeyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSankeyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, declarations: [SankeyComponent], imports: [ChartCommonModule], exports: [SankeyComponent] });\nSankeyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [SankeyComponent],\n                    exports: [SankeyComponent]\n                }]\n        }] });\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        SankeyModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, SankeyComponent, SankeyModule, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n","<div class=\"panel\">\n  <h1>{{ title }}</h1>\n  <div class=\"panel__controls\">\n    <div class=\"form-row\">\n      <mat-form-field appearance=\"outline\">\n        <mat-select\n          name=\"filter\"\n          disableOptionCentering\n          placeholder=\"Select range\"\n          [(ngModel)]=\"selectedRange\"\n          (selectionChange)=\"rangeChange($event)\"\n        >\n          <mat-option [value]=\"filter.value\" *ngFor=\"let filter of ranges\">\n            {{ filter.displayNane }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-form-field appearance=\"outline\">\n        <mat-select\n          name=\"filter\"\n          disableOptionCentering\n          placeholder=\"Select filter\"\n          [(ngModel)]=\"selectedFilter\"\n          (selectionChange)=\"change($event)\"\n        >\n          <mat-option [value]=\"filter.value\" *ngFor=\"let filter of filters\">\n            {{ filter.displayNane }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatSelectChange } from '@angular/material/select';\nimport { ManipulateType } from 'dayjs';\n\n@Component({\n  selector: 'app-chart-head',\n  templateUrl: './chart-head.component.html',\n  styleUrls: ['./chart-head.component.scss'],\n})\nexport class ChartHeadComponent {\n  @Input() public title?: string;\n  @Input() public filters: any[];\n  @Input() public selectedFilter: string;\n  @Input() public selectedRange: ManipulateType;\n  @Output() public filterChanged = new EventEmitter();\n  @Output() public dateChanged = new EventEmitter();\n\n  public ranges = [\n    { displayNane: 'All time', value: null },\n    { displayNane: 'Last week', value: 'w' },\n    { displayNane: 'Last month', value: 'm' },\n    { displayNane: 'Last year', value: 'y' },\n  ];\n\n  public rangeChange(event: MatSelectChange): void {\n    this.dateChanged.emit(event.value);\n  }\n\n  public change(event: MatSelectChange): void {\n    this.filterChanged.emit(event.value);\n  }\n}\n","<app-chart-head\n  (filterChanged)=\"change($event)\"\n  (dateChanged)=\"dateChange($event)\"\n  [title]=\"'activity.activity_over_time' | translate\"\n  [selectedFilter]=\"selectedFilter\"\n  [filters]=\"filters\"\n>\n</app-chart-head>\n\n<div class=\"chart-cover\">\n  <div class=\"chart\">\n    <ngx-charts-line-chart\n      [scheme]=\"colorScheme\"\n      [legend]=\"legend\"\n      [legendTitle]=\"''\"\n      [legendPosition]=\"below\"\n      [xAxis]=\"xAxis\"\n      [yAxis]=\"yAxis\"\n      [results]=\"data\"\n      [timeline]=\"false\"\n      [rotateXAxisTicks]=\"false\"\n    >\n      <ng-template #tooltipTemplate let-model=\"model\">\n        This is the single point tooltip template\n        <pre>{{ model | json }}</pre>\n      </ng-template>\n    </ngx-charts-line-chart>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { PostsService } from '@mzima-client/sdk';\nimport { LegendPosition, ScaleType } from '@swimlane/ngx-charts';\nimport { Color } from '@swimlane/ngx-charts/lib/utils/color-sets';\nimport { ManipulateType } from 'dayjs';\n\n@Component({\n  selector: 'app-activity-timeline',\n  templateUrl: './activity-timeline.component.html',\n  styleUrls: ['./activity-timeline.component.scss'],\n})\nexport class ActivityTimelineComponent implements OnInit {\n  public selectedFilter = '';\n  public data: any[] = [];\n  public legend = true;\n  public xAxis = true;\n  public yAxis = true;\n  public timeline = true;\n  public below = LegendPosition.Below;\n  public colorScheme: Color = {\n    name: 'Name',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      'rgb(62, 84, 163)',\n      'rgb(103, 164, 209)',\n      'rgb(255, 194, 53)',\n      'rgb(158, 132, 211)',\n      'rgb(203, 85, 156)',\n      'rgb(50, 109, 29)',\n      'rgb(255, 154, 153)',\n    ],\n  };\n  public cumulativeTotal = true;\n  public dateRange: ManipulateType;\n  public filters = [\n    { displayNane: 'Show all posts', value: '' },\n    { displayNane: 'Categories', value: 'tags' },\n    { displayNane: 'Survey', value: 'form' },\n    { displayNane: 'Status', value: 'status' },\n  ];\n\n  constructor(private postsService: PostsService) {}\n\n  ngOnInit() {\n    this.getPostStatistics(this.selectedFilter);\n  }\n\n  public getPostStatistics(value: string) {\n    const params = {\n      timeline: 1,\n      timeline_attribute: 'created',\n    };\n    this.data = [];\n    // let series: any[] = [];\n    this.postsService.getPostStatistics({ ...params, group_by: value }).subscribe({\n      next: (response) => {\n        console.log('Response', response);\n\n        // this.data = response.result.group_by_total_posts.map(post => {\n        //   const time = new Date(parseInt(post.label) * 1000);\n        //   if (!this.dateRange ||\n        //       time.getTime() > dayjs().subtract(1, this.dateRange).toDate().getTime()) {\n        //         series.push({\n        //           name: time,\n        //           value: post.total,\n        //         })\n        //       }\n        //   return {name: post.source, series};\n        // })\n\n        // for (const el of response.totals) {\n        //   for (const elValue of el.values) {\n        //     const time = new Date(elValue.label * 1000);\n\n        //     if (\n        //       !this.dateRange ||\n        //       time.getTime() > dayjs().subtract(1, this.dateRange).toDate().getTime()\n        //     ) {\n        //       series = [\n        //         ...series,\n        //         {\n        //           name: time,\n        //           value: this.cumulativeTotal ? elValue.cumulative_total : elValue.total,\n        //         },\n        //       ];\n        //     }\n        //   }\n\n        //   this.data = [...this.data, { name: el.key, series }];\n        // }\n      },\n    });\n  }\n\n  public change(value: string) {\n    this.selectedFilter = value;\n    this.getPostStatistics(this.selectedFilter);\n  }\n\n  public dateChange(date: ManipulateType): void {\n    this.dateRange = date;\n    this.getPostStatistics(this.selectedFilter);\n  }\n\n  public changeCumulativeTotal() {\n    this.getPostStatistics(this.selectedFilter);\n  }\n}\n","<app-chart-head\n  (filterChanged)=\"change($event)\"\n  (dateChanged)=\"dateChange($event)\"\n  [title]=\"'activity.activity_by_volume' | translate\"\n  [selectedFilter]=\"selectedFilter\"\n  [filters]=\"filters\"\n>\n</app-chart-head>\n\n<div class=\"chart-cover\">\n  <div class=\"chart\">\n    <ngx-charts-bar-vertical [scheme]=\"colorScheme\" [results]=\"data\" [xAxis]=\"true\" [yAxis]=\"true\">\n      <ng-template #tooltipTemplate let-model=\"model\">\n        <span class=\"chart__tooltip\">{{ model.value }} posts</span>\n      </ng-template>\n    </ngx-charts-bar-vertical>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { PostsService } from '@mzima-client/sdk';\nimport { ScaleType } from '@swimlane/ngx-charts';\nimport { Color } from '@swimlane/ngx-charts/lib/utils/color-sets';\nimport { ManipulateType } from 'dayjs';\n\n@Component({\n  selector: 'app-bar-chart',\n  templateUrl: './bar-chart.component.html',\n  styleUrls: ['./bar-chart.component.scss', '../activity.component.scss'],\n})\nexport class BarChartComponent implements OnInit {\n  public data: any[] = [];\n  public selectedFilter = 'tags';\n  public colorScheme: Color = {\n    name: 'Custom color',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#FFEBBB'],\n  };\n  public dateRange: ManipulateType;\n  public filters = [\n    { displayNane: 'Categories', value: 'tags' },\n    { displayNane: 'Survey', value: 'form' },\n    { displayNane: 'Status', value: 'status' },\n  ];\n\n  constructor(private postsService: PostsService) {}\n\n  public ngOnInit() {\n    this.getPostStatistics(this.selectedFilter);\n  }\n\n  public getPostStatistics(value: any) {\n    this.data = [];\n    this.postsService.getPostStatistics({ group_by: value }).subscribe({\n      next: (response) => {\n        this.data = response.result.group_by_total_posts.map((p) => ({\n          name: p.label || 'No survey',\n          value: p.total,\n        }));\n      },\n    });\n  }\n\n  public change(value: string) {\n    this.selectedFilter = value;\n    this.getPostStatistics(this.selectedFilter);\n  }\n\n  public dateChange(date: ManipulateType): void {\n    this.dateRange = date;\n    this.getPostStatistics(this.selectedFilter);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.scss'],\n})\nexport class ActivityComponent {}\n","<div class=\"activity-page\">\n  <div class=\"container\">\n    <app-notification type=\"warning\" id=\"activity-issues-warning\">\n      {{ 'app.we_are_aware_there_are_some_issues_here' | translate }}\n    </app-notification>\n    <div class=\"page-content\">\n      <app-activity-timeline class=\"chart-item\"></app-activity-timeline>\n      <app-bar-chart class=\"chart-item\"></app-bar-chart>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ActivityComponent } from './activity.component';\n\nconst routes: Routes = [{ path: '', component: ActivityComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ActivityRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { ActivityRoutingModule } from './activity-routing.module';\nimport { ActivityTimelineComponent } from './activity-timeline/activity-timeline.component';\nimport { ActivityComponent } from './activity.component';\nimport { BarChartComponent } from './bar-chart/bar-chart.component';\nimport { ChartHeadComponent } from './chart-head/chart-head.component';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    ActivityComponent,\n    ActivityTimelineComponent,\n    BarChartComponent,\n    ChartHeadComponent,\n  ],\n  imports: [\n    CommonModule,\n    ActivityRoutingModule,\n    NgxChartsModule,\n    FormsModule,\n    MatInputModule,\n    MatSelectModule,\n    TranslateModule,\n    SharedModule,\n  ],\n})\nexport class ActivityModule {}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]}