{"version":3,"file":"63.7ece8a8182bc8126.js","mappings":"8WACEA,cAA+BA,8BAAwDA,eAAxDA,yFA6BzBA,eACEA,8BACFA,eADEA,8FAEFA,eACEA,8BACFA,eADEA,mHAPJA,qBAGEA,uBAGAA,uBAGFA,sCANQA,6FAGAA,qHAiBNA,eACEA,8BACFA,eADEA,6FAEFA,eACEA,8BACFA,eADEA,yGALJA,qBACEA,uBAGAA,uBAGFA,sCANQA,uFAGAA,8GAMZA,wCAEEA,kCAQEA,8BACFA,eAJEA,8BAGAA,qDCvDOC,EAAqB,MAArBA,EAODC,YACAC,aACAC,kBACAC,oBACAC,OAVFC,OACDC,WACAC,KACAC,WAAY,EAEnBC,YACUT,EACAC,EACAC,EACAC,EACAC,GAJAM,mBACAA,oBACAA,yBACAA,2BACAA,cAERA,KAAKJ,WAAaI,KAAKR,kBAAkBI,WAAWK,QAAKC,KAAeF,OACxEA,KAAKL,OAASQ,aAAaC,QAAQ,GAAGC,qCACtCL,KAAKH,KAAOG,KAAKV,YAAYgB,MAAM,CACjCC,kBAAmB,CAAC,GAAI,CAACC,cAAqBA,eAAqB,KACnEC,cAAe,CAAC,IAChBC,YAAa,CAAC,GAAI,CAACF,cAAqBA,eAAqB,KAC7DG,OAAQ,CAAC,KAEZ,CAEDC,WACEZ,KAAKa,gBACN,CAEOA,iBACNb,KAAKT,aAAauB,gBAAgBd,KAAKL,QAASoB,UAAU,CACxDC,KAAOC,IACLA,EAASC,SAASC,QAASC,IACzBpB,KAAKqB,eAAeD,EAApB,EADF,GAKL,CAEOC,eAAeD,GACM,gBAAvBA,EAAQE,aACVF,EAAQG,aACN,+BACAH,EAAQG,aAAaC,MAAMJ,EAAQG,aAAaE,OAAS,GAC3DzB,KAAKH,KAAK6B,WAAW,CACnBhB,YAAaU,EAAQG,aACrBZ,OAAQS,EAAQO,MAIO,sBAAvBP,EAAQE,YACVtB,KAAKH,KAAK6B,WAAW,CACnBnB,kBAAmBa,EAAQG,aAC3Bd,cAAeW,EAAQO,IAG5B,CAEMC,kBACL5B,KAAKF,WAAY,EACjB,MAAM+B,EAAS,CACbC,QAAS9B,KAAKL,QAEVoC,EAAU,GAChBA,EAAQC,KAAKhC,KAAKiC,eAAeJ,IAC5B7B,KAAKH,KAAKqC,SAASxB,YAAeyB,MAAMC,SAAS,MACpDL,EAAQC,KAAKhC,KAAKqC,WAAWR,KAA7B,EAEFS,KAASP,GAAShB,UAAU,CAC1BC,KAAM,KACJhB,KAAKF,WAAY,EACjBE,KAAKa,iBACLb,KAAKuC,iBAAiB,UAAtB,EAEFC,MAAQC,IACNC,QAAQC,IAAIF,GACZzC,KAAKF,WAAY,EACjBE,KAAKuC,iBAAiB,QAAtB,GAGL,CAEON,eAAeJ,GACrB,MAAMe,EAAS,IACVf,EACHF,GAAI3B,KAAKH,KAAKqC,SAASzB,cAAiB0B,OAAS,KACjDb,WAAY,oBACZC,aAAcvB,KAAKH,KAAKqC,SAAS3B,kBAAqB4B,OAExD,OAAInC,KAAKH,KAAKqC,SAASzB,cAAiB0B,MAC/BnC,KAAKT,aAAasD,mBACvB7C,KAAKL,OACLiD,EACA5C,KAAKH,KAAKqC,SAASzB,cAAiB0B,OAG/BnC,KAAKT,aAAauD,iBAAiB9C,KAAKL,OAASiD,EAE3D,CAEOP,WAAWR,GACjB,MAAMe,EAAS,IACVf,EACHF,GAAI3B,KAAKH,KAAKqC,SAASvB,OAAUwB,OAAS,KAC1Cb,WAAY,cACZC,aAAcvB,KAAKH,KAAKqC,SAASxB,YAAeyB,OAGlD,OAAInC,KAAKH,KAAKqC,SAASvB,OAAUwB,MACxBnC,KAAKT,aAAasD,mBACvB7C,KAAKL,OACLiD,EACA5C,KAAKH,KAAKqC,SAASvB,OAAUwB,OAGxBnC,KAAKT,aAAauD,iBAAiB9C,KAAKL,OAASiD,EAE3D,CAEOL,iBAAiBQ,GAEhB,YADCA,EAsBJ/C,KAAKgD,gBApBU,CACbC,KAAM,CACJC,MAAO,UACPC,KAAM,YAERC,MAAO,uCACPC,QAAS,CAQP,CACEH,MAAO,UACPI,KAAM,iCAOZtD,KAAKP,oBAAoB8D,UAAU,mBAGxC,CAEOP,gBAAgBJ,GACtB5C,KAAKP,oBAAoB+D,aAAaZ,EAAQ,CAC5Ca,SAAU,EACVC,MAAM,GAET,4CAzJUrE,GAAqBD,0FAArBC,EAAqBsE,45BDdlCvE,iBACEA,uCACAA,iBACEA,sCACFA,UAEFA,iBAAyB,OACpBA,8BAA+DA,QAClEA,cAAGA,gCAA+DA,QAClEA,cAAGA,gCAA+DA,QAClEA,gBACEA,uBACAA,mBAAQA,gCAAqDA,YAIjEA,mBAAoC,WAApCA,CAAoC,gBAErBA,gCAA4DA,QACvEA,6BACEA,2CAMAA,qBAAUA,gCAAuDA,QACjEA,8BAUFA,UAEFA,kBAAsB,gBACTA,gCAAkDA,QAC7DA,6BACEA,2CAMAA,qBAAUA,gCAAuDA,QACjEA,8BAQFA,UAEFA,2CACAA,mBACEA,2DAUAA,mCAEEA,sCAAewE,mBAAiB,GAGhCxE,gCACFA,0BA5EGA,gDAEmCA,+DAIrCA,0EACAA,2EACAA,2EAGOA,iEAINA,mCAESA,wEAIPA,+FAIQA,mEAEPA,8IAYMA,8DAIPA,yFAIQA,mEACEA,kIAUmBA,kDAM9BA,kDASDA,uDAEAA,y5BC9DOC,KAAqBwE,UANjCC,QAAY,EAMqBD,2BAOTE,KACCC,KACKC,IACEC,KACbC,QAXP9E,GCTb,MAAM+E,EAAiB,CAAC,CAAEC,KAAM,GAAIC,UAAWjF,IAMzC,MAAOkF,+CAAyB,+BAAzBA,qCAHDC,cAAsBJ,GACtBI,uBCkBN,MAAOC,+CAAkB,+BAAlBA,qCAXTC,KACAH,EACAI,KACAC,KACAC,IACAC,KACAC,KACAC,KACAC,OAG2B","names":["i0","UserSettingsComponent","formBuilder","usersService","breakpointService","notificationService","router","userId","isDesktop$","form","submitted","constructor","this","pipe","untilDestroyed","localStorage","getItem","generalHelpers","group","hdx_maintainer_id","Validators","maintainer_id","hdx_api_key","api_id","ngOnInit","getSettingsHDX","getUserSettings","subscribe","next","response","results","forEach","setting","updateSettings","config_key","config_value","slice","length","patchValue","id","saveInformation","params","user_id","queries","push","saveMaintainer","controls","value","includes","saveHdxApi","forkJoin","showNotification","error","err","console","log","config","updateUserSettings","postUserSettings","type","displaySnackBar","icon","color","name","title","buttons","text","showError","showSnackbar","duration","wide","selectors","ctx","tslib_es6","UntilDestroy","FormBuilder","UsersService","BreakpointService","NotificationService","Router","routes","path","component","UserSettingsRoutingModule","RouterModule","UserSettingsModule","CommonModule","TranslateModule","ReactiveFormsModule","MatInputModule","MatButtonModule","DirectiveModule","MatIconModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/user-settings/user-settings.component.html","./apps/web-mzima-client/src/app/settings/user-settings/user-settings.component.ts","./apps/web-mzima-client/src/app/settings/user-settings/user-settings-routing.module.ts","./apps/web-mzima-client/src/app/settings/user-settings/user-settings.module.ts"],"sourcesContent":["<div class=\"form-head-panel\">\n  <h1 *ngIf=\"isDesktop$ | async\">{{ 'settings.settings_list.user_settings' | translate }}</h1>\n  <div class=\"logo-wrapper\">\n    <img src=\"assets/images/logo-hdx.png\" alt=\"{{ 'settings.user_settings.HDX' | translate }}\" />\n  </div>\n</div>\n<div class=\"information\">\n  <p>{{ 'settings.user_settings.user_settings_desc_1' | translate }}</p>\n  <p>{{ 'settings.user_settings.user_settings_desc_2' | translate }}</p>\n  <p>{{ 'settings.user_settings.user_settings_desc_3' | translate }}</p>\n  <a class=\"guide-link\" href=\"https://data.humdata.org/faq\" target=\"_blank\">\n    <mat-icon class=\"link-blue-icon\" svgIcon=\"external-link\"></mat-icon>\n    <strong>{{ 'settings.user_settings.view_guide' | translate }}</strong>\n  </a>\n</div>\n\n<form [formGroup]=\"form\" novalidate>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.user_settings.hdx_maintainer_id' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.user_settings.please_enter_maintainer_id' | translate }}\"\n        formControlName=\"hdx_maintainer_id\"\n        required\n      />\n      <mat-hint>{{ 'settings.user_settings.profile_page' | translate }}</mat-hint>\n      <mat-error\n        *ngIf=\"form.get('hdx_maintainer_id')?.touched && form.get('hdx_maintainer_id')?.invalid\"\n      >\n        <div *ngIf=\"form.get('hdx_maintainer_id')?.hasError('required')\">\n          {{ 'settings.user_settings.valid_user' | translate }}\n        </div>\n        <div *ngIf=\"form.get('hdx_maintainer_id')?.hasError('minlength')\">\n          {{ 'settings.user_settings.hdx_maintainer_id_min_length' | translate }}\n        </div>\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.user_settings.api_key' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.user_settings.please_enter_api_key' | translate }}\"\n        formControlName=\"hdx_api_key\"\n        required\n      />\n      <mat-hint>{{ 'settings.user_settings.profile_page' | translate }}</mat-hint>\n      <mat-error *ngIf=\"form.get('hdx_api_key')?.touched && form.get('hdx_api_key')?.invalid\">\n        <div *ngIf=\"form.get('hdx_api_key')?.hasError('required')\">\n          {{ 'settings.user_settings.valid_key' | translate }}\n        </div>\n        <div *ngIf=\"form.get('hdx_api_key')?.hasError('minlength')\">\n          {{ 'settings.user_settings.api_key_min_length' | translate }}\n        </div>\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div class=\"form-controls-spacer\" *ngIf=\"!(isDesktop$ | async)!\"></div>\n  <div class=\"form-controls-panel form-controls-panel--sticky\">\n    <mzima-client-button\n      type=\"button\"\n      fill=\"outline\"\n      color=\"secondary\"\n      *ngIf=\"!(isDesktop$ | async)!\"\n      [data-qa]=\"'btn-cancel'\"\n      routerLink=\"/settings\"\n    >\n      {{ 'app.cancel' | translate }}\n    </mzima-client-button>\n    <mzima-client-button\n      type=\"submit\"\n      (buttonClick)=\"saveInformation()\"\n      [disabled]=\"form.invalid || submitted\"\n    >\n      {{ 'app.save' | translate }}\n    </mzima-client-button>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { forkJoin, Observable } from 'rxjs';\nimport { BreakpointService, NotificationService } from '@services';\nimport { generalHelpers, UsersService } from '@mzima-client/sdk';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-user-settings',\n  templateUrl: './user-settings.component.html',\n  styleUrls: ['./user-settings.component.scss'],\n})\nexport class UserSettingsComponent implements OnInit {\n  private userId: string;\n  public isDesktop$: Observable<boolean>;\n  public form: FormGroup;\n  public submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private usersService: UsersService,\n    private breakpointService: BreakpointService,\n    private notificationService: NotificationService,\n    private router: Router,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$.pipe(untilDestroyed(this));\n    this.userId = localStorage.getItem(`${generalHelpers.CONST.LOCAL_STORAGE_PREFIX}userId`)!;\n    this.form = this.formBuilder.group({\n      hdx_maintainer_id: ['', [Validators.required, Validators.minLength(3)]],\n      maintainer_id: [''],\n      hdx_api_key: ['', [Validators.required, Validators.minLength(3)]],\n      api_id: [''],\n    });\n  }\n\n  ngOnInit() {\n    this.getSettingsHDX();\n  }\n\n  private getSettingsHDX() {\n    this.usersService.getUserSettings(this.userId!).subscribe({\n      next: (response) => {\n        response.results?.forEach((setting: any) => {\n          this.updateSettings(setting);\n        });\n      },\n    });\n  }\n\n  private updateSettings(setting: any) {\n    if (setting.config_key === 'hdx_api_key') {\n      setting.config_value =\n        '*** *** *** *** *** *** *** ' +\n        setting.config_value.slice(setting.config_value.length - 4);\n      this.form.patchValue({\n        hdx_api_key: setting.config_value,\n        api_id: setting.id,\n      });\n    }\n\n    if (setting.config_key === 'hdx_maintainer_id') {\n      this.form.patchValue({\n        hdx_maintainer_id: setting.config_value,\n        maintainer_id: setting.id,\n      });\n    }\n  }\n\n  public saveInformation() {\n    this.submitted = true;\n    const params = {\n      user_id: this.userId!,\n    };\n    const queries = [];\n    queries.push(this.saveMaintainer(params));\n    if (!this.form.controls['hdx_api_key'].value.includes('*')) {\n      queries.push(this.saveHdxApi(params));\n    }\n    forkJoin(queries).subscribe({\n      next: () => {\n        this.submitted = false;\n        this.getSettingsHDX();\n        this.showNotification('success');\n      },\n      error: (err) => {\n        console.log(err);\n        this.submitted = false;\n        this.showNotification('error');\n      },\n    });\n  }\n\n  private saveMaintainer(params: any) {\n    const config = {\n      ...params,\n      id: this.form.controls['maintainer_id'].value || null,\n      config_key: 'hdx_maintainer_id',\n      config_value: this.form.controls['hdx_maintainer_id'].value,\n    };\n    if (this.form.controls['maintainer_id'].value) {\n      return this.usersService.updateUserSettings(\n        this.userId!,\n        config,\n        this.form.controls['maintainer_id'].value,\n      );\n    } else {\n      return this.usersService.postUserSettings(this.userId!, config);\n    }\n  }\n\n  private saveHdxApi(params: any) {\n    const config = {\n      ...params,\n      id: this.form.controls['api_id'].value || null,\n      config_key: 'hdx_api_key',\n      config_value: this.form.controls['hdx_api_key'].value,\n    };\n\n    if (this.form.controls['api_id'].value) {\n      return this.usersService.updateUserSettings(\n        this.userId!,\n        config,\n        this.form.controls['api_id'].value,\n      );\n    } else {\n      return this.usersService.postUserSettings(this.userId!, config);\n    }\n  }\n\n  private showNotification(type: 'success' | 'error') {\n    switch (type) {\n      case 'success':\n        const config = {\n          icon: {\n            color: 'success',\n            name: 'thumb-up',\n          },\n          title: 'settings.user_settings.api_key_saved',\n          buttons: [\n            // {\n            //   color: 'gray',\n            //   text: 'settings.user_settings.start_tagging',\n            //   handler: () => {\n            //     this.router.navigate(['/settings/hdx']);\n            //   },\n            // },\n            {\n              color: 'primary',\n              text: 'notify.export.confirmation',\n            },\n          ],\n        };\n        this.displaySnackBar(config);\n        break;\n      default:\n        this.notificationService.showError('Failed to export');\n        break;\n    }\n  }\n\n  private displaySnackBar(config: any) {\n    this.notificationService.showSnackbar(config, {\n      duration: 0,\n      wide: true,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { UserSettingsComponent } from './user-settings.component';\n\nconst routes: Routes = [{ path: '', component: UserSettingsComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UserSettingsRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule } from '@shared';\n\nimport { UserSettingsRoutingModule } from './user-settings-routing.module';\nimport { UserSettingsComponent } from './user-settings.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [UserSettingsComponent],\n  imports: [\n    CommonModule,\n    UserSettingsRoutingModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatButtonModule,\n    DirectiveModule,\n    MatIconModule,\n    MzimaUiModule,\n  ],\n})\nexport class UserSettingsModule {}\n"],"x_google_ignoreList":[]}