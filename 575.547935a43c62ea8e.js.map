{"version":3,"file":"575.547935a43c62ea8e.js","mappings":"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","names":["i0","$event","CategoryItemComponent","category","customClass","isCheckbox","displayChildren","selectedCategories","selected","EventEmitter","toggle","selectCategory","cat","this","emit","isChecked","id","findIndex","sC","isDisabled","parent_id","toggleChildren","hasChildren","children","length","selectors","CategoriesComponent","categoriesService","confirmModalService","translate","notificationService","categoryItems","categories","isShowActions","openedParents","constructor","getCategories","get","subscribe","next","data","results","includes","index","indexOf","splice","push","deleteCategories","messages","_this","confirmationMessages","open","title","description","confirmButtonText","instant","cancelButtonText","forkJoin","map","delete","complete","showError","toast","isBulk","count","getMessage","baseKey","undefined","showActions","event","i","filter","forEach","child","ctx","CreateCategoryFormComponent","BaseComponent","sessionService","breakpointService","fb","rolesService","languageService","dialog","router","location","loading","formSubmit","deleteCall","languages","defaultLanguage","activeLanguages","selectedTranslation","roleOptions","isUpdate","isParent","form","userRole","formErrors","super","checkDesktop","getLanguages","find","lang","code","group","name","Validators","noWhitespaceValidator","is_child_to","language","visible_to","value","options","disabled","translations","array","translate_name","translate_description","parent","categoryErrors$","pipe","untilDestroyed","ngOnInit","getUserData","formSubscribe","getRoles","localStorage","getItem","generalHelpers","patchValue","tag","enabled_languages","default","updateForm","formHelper","role","Object","keys","key","trans","setControl","loadData","ngOnDestroy","categoryErrors","valueChanges","translation","response","roles","onlyMe","everyone","specificRoles","isShowIcons","checkRoleOptions","parentId","option","checked","field","n","isRoleActive","roleName","submit","invalid","user_id","Number","user","userId","base_language","color","available","icon","parent_id_original","slug","reduce","acc","curr","type","addTranslation","SelectLanguagesModalComponent","width","maxWidth","panelClass","afterClosed","result","defaultIndex","chooseTranslation","controls","setValue","clearValidators","setValidators","updateValueAndValidity","deleteTranslation","languageCode","stopPropagation","parentChanged","parentCategory","deleteCategoryEmit","back","isDesktop","navigate","tslib_es6","UntilDestroy","SessionService","BreakpointService","FormBuilder","CategoriesService","RolesService","LanguageService","MatDialog","ConfirmModalService","TranslateService","Router","Location","CategoryComponent","route","isFormOnSubmit","categoryId","snapshot","paramMap","getById","updateCategory","update","error","errors","failed_validations","deleteCategory","CreateComponent","createCategory","post","routes","path","component","breadcrumb","CategoriesRoutingModule","RouterModule","CategoriesModule","CommonModule","SpinnerModule","TranslateModule","ReactiveFormsModule","MatFormFieldModule","TextFieldModule","MatInputModule","MatSelectModule","GroupCheckboxSelectModule","MatIconModule","MatButtonModule","MatCheckboxModule","DirectiveModule","SettingsHeaderModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/categories/category-item/category-item.component.html","./apps/web-mzima-client/src/app/settings/categories/category-item/category-item.component.ts","./apps/web-mzima-client/src/app/settings/categories/categories.component.html","./apps/web-mzima-client/src/app/settings/categories/categories.component.ts","./apps/web-mzima-client/src/app/settings/categories/create-category-form/create-category-form.component.html","./apps/web-mzima-client/src/app/settings/categories/create-category-form/create-category-form.component.ts","./apps/web-mzima-client/src/app/settings/categories/category/category.component.html","./apps/web-mzima-client/src/app/settings/categories/category/category.component.ts","./apps/web-mzima-client/src/app/settings/categories/create/create.component.ts","./apps/web-mzima-client/src/app/settings/categories/create/create.component.html","./apps/web-mzima-client/src/app/settings/categories/categories-routing.module.ts","./apps/web-mzima-client/src/app/settings/categories/categories.module.ts"],"sourcesContent":["<div class=\"category-item\" [routerLink]=\"['/settings/categories', category.id]\">\n  <div class=\"category-item__title\">\n    <mat-checkbox\n      *ngIf=\"isCheckbox\"\n      class=\"category-item__checkbox\"\n      [checked]=\"isChecked(category.id)\"\n      (click)=\"$event.stopPropagation()\"\n      (change)=\"selectCategory(category)\"\n      [disabled]=\"isDisabled(category)\"\n    ></mat-checkbox>\n    <h4 [routerLink]=\"category.id.toString()\" [ngClass]=\"customClass\">\n      {{ category.tag }}\n    </h4>\n  </div>\n  <mzima-client-button\n    *ngIf=\"category.children?.length\"\n    class=\"category-item--expand\"\n    fill=\"clear\"\n    color=\"secondary\"\n    [iconOnly]=\"true\"\n    [ariaLabel]=\"'Expand or collapse ' + category.tag | translate\"\n    [data-qa]=\"'toggle-children'\"\n    (buttonClick)=\"toggleChildren(category.id)\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <mat-icon\n      class=\"category-item__arrow\"\n      [ngClass]=\"{ 'category-item--expanded': displayChildren }\"\n      svgIcon=\"arrow-down\"\n    ></mat-icon>\n  </mzima-client-button>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CategoryInterface } from '@mzima-client/sdk';\n\n@Component({\n  selector: 'app-category-item',\n  templateUrl: './category-item.component.html',\n  styleUrls: ['./category-item.component.scss'],\n})\nexport class CategoryItemComponent {\n  @Input() public category: CategoryInterface;\n  @Input() public customClass: string;\n  @Input() public isCheckbox: boolean;\n  @Input() public displayChildren: boolean;\n  @Input() public selectedCategories: CategoryInterface[] = [];\n  @Output() public selected = new EventEmitter<CategoryInterface>();\n  @Output() public toggle = new EventEmitter();\n\n  selectCategory(cat: CategoryInterface) {\n    this.selected.emit(cat);\n  }\n\n  isChecked(id: number) {\n    return this.selectedCategories.findIndex((sC) => sC.id === id) >= 0;\n  }\n\n  isDisabled(category: CategoryInterface) {\n    if (category.parent_id && this.isChecked(category.parent_id)) return true;\n    return false;\n  }\n\n  public toggleChildren(id: number) {\n    this.toggle.emit(id);\n  }\n\n  public hasChildren(cat: CategoryInterface) {\n    return cat.children.length > 0;\n  }\n}\n","<section class=\"categories\">\n  <app-settings-header\n    [settingsTitle]=\"'app.categories'\"\n    [newButtonTitle]=\"'app.add_new_category'\"\n    [selectedItem]=\"selectedCategories\"\n    (isShowActionsChange)=\"showActions($event)\"\n    (deleteCall)=\"deleteCategories()\"\n  >\n  </app-settings-header>\n  <ul *ngIf=\"categories; else spinner\" class=\"categories-list\">\n    <ng-container *ngFor=\"let category of categories\">\n      <li *ngIf=\"!category.parent_id\" class=\"categories-list__item\">\n        <app-category-item\n          #categoryItem\n          [category]=\"category\"\n          [data-qa]=\"category.slug.split(' ').join('-') | lowercase\"\n          (selected)=\"selectCategory($event)\"\n          [isCheckbox]=\"isShowActions\"\n          (toggle)=\"toggleChildren($event)\"\n          [displayChildren]=\"displayChildren(category.id)\"\n          [selectedCategories]=\"selectedCategories\"\n        >\n        </app-category-item>\n\n        <ul\n          *ngIf=\"category.children?.length && displayChildren(category.id)\"\n          class=\"categories-list categories-list--lvl2\"\n        >\n          <li class=\"categories-list__item\" *ngFor=\"let category of category.children\">\n            <app-category-item\n              #categoryItem\n              [isCheckbox]=\"isShowActions\"\n              (selected)=\"selectCategory($event)\"\n              [category]=\"category\"\n              [data-qa]=\"\n                category.slug.split(' ').join('-') + '-' + '(' + category.parent.slug + ')'\n                  | lowercase\n              \"\n              [customClass]=\"'category-item__title--lvl2'\"\n              [selectedCategories]=\"selectedCategories\"\n            >\n            </app-category-item>\n          </li>\n        </ul>\n      </li>\n    </ng-container>\n  </ul>\n</section>\n\n<ng-template #spinner>\n  <app-spinner class=\"spinner\"></app-spinner>\n</ng-template>\n","import { Component, QueryList, ViewChildren } from '@angular/core';\nimport { CategoryItemComponent } from './category-item/category-item.component';\nimport { CategoriesService, CategoryInterface } from '@mzima-client/sdk';\nimport { forkJoin } from 'rxjs';\nimport { ConfirmModalService, NotificationService } from '@services';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-categories',\n  templateUrl: './categories.component.html',\n  styleUrls: ['./categories.component.scss'],\n})\nexport class CategoriesComponent {\n  @ViewChildren('categoryItem') categoryItems: QueryList<CategoryItemComponent>;\n  public categories: CategoryInterface[];\n  selectedCategories: CategoryInterface[] = [];\n  isShowActions = false;\n  openedParents: [number?] = [];\n\n  constructor(\n    private categoriesService: CategoriesService,\n    private confirmModalService: ConfirmModalService,\n    private translate: TranslateService,\n    private notificationService: NotificationService,\n  ) {\n    this.getCategories();\n  }\n\n  public getCategories(): void {\n    this.categoriesService.get().subscribe({\n      next: (data) => {\n        this.categories = data.results;\n      },\n    });\n  }\n\n  public displayChildren(id: number) {\n    if (this.isShowActions) {\n      return true;\n    } else {\n      return this.openedParents.includes(id);\n    }\n  }\n\n  public toggleChildren(id: number) {\n    const index = this.openedParents.indexOf(id);\n    if (index > -1) {\n      this.openedParents.splice(index, 1);\n    } else {\n      this.openedParents.push(id);\n    }\n  }\n\n  public async deleteCategories() {\n    const messages = this.confirmationMessages();\n    const confirmed = await this.confirmModalService.open({\n      title: messages.title,\n      description: messages.description,\n      confirmButtonText: this.translate.instant('app.yes_delete'),\n      cancelButtonText: this.translate.instant('app.no_go_back'),\n    });\n    if (!confirmed) return;\n    forkJoin(this.selectedCategories.map((cat) => this.categoriesService.delete(cat.id))).subscribe(\n      {\n        complete: () => {\n          this.getCategories();\n          this.selectedCategories = [];\n          this.notificationService.showError(messages.toast);\n        },\n      },\n    );\n  }\n\n  public confirmationMessages(): { title: string; description: string; toast: string } {\n    const isBulk = this.selectedCategories.length > 1;\n    const count = this.selectedCategories.length;\n    return {\n      title: this.getMessage('destroy_confirm', isBulk, count),\n      description: this.getMessage('destroy_confirm_desc', isBulk, count),\n      toast: this.getMessage('destroy_success', isBulk, count),\n    };\n  }\n\n  private getMessage(baseKey: string, isBulk: boolean = false, count?: number): string {\n    const prefix = isBulk ? 'bulk_' : '';\n    const countProperty = count !== undefined ? { count: count } : {};\n    return this.translate.instant(`notify.category.${prefix}${baseKey}`, countProperty);\n  }\n\n  public showActions(event: boolean) {\n    this.isShowActions = event;\n    if (!event) this.selectedCategories = [];\n  }\n\n  selectCategory(cat: CategoryInterface) {\n    const i = this.selectedCategories.findIndex((sC) => sC.id === cat.id);\n    if (i < 0) {\n      this.selectedCategories.push(cat);\n    } else {\n      this.selectedCategories = this.selectedCategories.filter((sC) => sC.id !== cat.id);\n    }\n    if (cat.children.length) {\n      cat.children.forEach((child) => {\n        if (i < 0) {\n          const c = this.selectedCategories.findIndex((sC) => sC.id === child.id);\n          if (c < 0) {\n            this.selectedCategories.push(child);\n          }\n        } else {\n          this.selectedCategories = this.selectedCategories.filter((sC) => sC.id !== child.id);\n        }\n      });\n    }\n  }\n}\n","<form class=\"create-form\" [formGroup]=\"form\" (submit)=\"submit()\" novalidate>\n  <div class=\"create-form__topbar\">\n    <app-settings-header\n      [settingsTitle]=\"isUpdate ? 'app.edit_category' : 'app.add_new_category'\"\n      [newButtonTitle]=\"isDesktop ? 'translations.add_translation_lang' : 'Translation'\"\n      [isShowActionsButton]=\"false\"\n      [isShowCreation]=\"false\"\n      [isShowTranslation]=\"true\"\n      [selectedLanguage]=\"defaultLanguage\"\n      [languages]=\"activeLanguages\"\n      (showLanguagesCall)=\"addTranslation()\"\n      (selectLanguageCall)=\"chooseTranslation($event)\"\n    >\n    </app-settings-header>\n  </div>\n\n  <ng-container\n    *ngIf=\"!selectedTranslation || selectedTranslation === defaultLanguage?.code; else translation\"\n  >\n    <div class=\"form-row\">\n      <mat-label>{{ 'category.editor.name' | translate }} *</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input\n          matInput\n          formControlName=\"name\"\n          placeholder=\"{{ 'category.placeholder.name' | translate }}\"\n        />\n        <mat-error *ngIf=\"form.get('name')?.hasError('required')\">\n          {{ 'category.validation.required.name' | translate }}\n        </mat-error>\n        <ng-container *ngFor=\"let err of formErrors\">\n          <ng-container *ngIf=\"err?.field === 'tag'\">\n            <mat-error *ngFor=\"let msg of err?.error_messages\">\n              {{ msg | translate }}\n            </mat-error>\n          </ng-container>\n        </ng-container>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'category.editor.description' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <textarea\n          placeholder=\"{{ 'category.placeholder.descriptions' | translate }}\"\n          [data-qa]=\"'description'\"\n          matInput\n          cdkTextareaAutosize\n          cdkAutosizeMinRows=\"2\"\n          cdkAutosizeMaxRows=\"5\"\n          formControlName=\"description\"\n          [data-qa]=\"'description'\"\n        >\n        </textarea>\n      </mat-form-field>\n    </div>\n  </ng-container>\n\n  <ng-template #translation>\n    <div class=\"form-row\">\n      <mat-label>{{ 'category.editor.name' | translate }} *</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input matInput readonly disabled [value]=\"form.value.name\" />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'category.editor.name' | translate }}({{ selectedTranslation }})</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input matInput formControlName=\"translate_name\" />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'category.editor.description' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input matInput readonly disabled [value]=\"form.value.description\" />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label\n        >{{ 'category.editor.description' | translate }} ({{ selectedTranslation }})\n      </mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input matInput formControlName=\"translate_description\" />\n      </mat-form-field>\n    </div>\n  </ng-template>\n\n  <div class=\"form-row\" *ngIf=\"!isParent\">\n    <mat-label>{{ 'category.parent_category' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <mat-select\n        formControlName=\"is_child_to\"\n        [data-qa]=\"'select-parent-category'\"\n        (selectionChange)=\"parentChanged($event)\"\n        disableOptionCentering\n      >\n        <mat-option value=\"\">{{\n          'category.placeholder.choose_parent_category' | translate\n        }}</mat-option>\n        <mat-option\n          [value]=\"category.id\"\n          *ngFor=\"let category of categories\"\n          [data-qa]=\"category.slug.split(' ').join('-') | lowercase\"\n        >\n          {{ category.tag }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>{{ 'app.who_can_see_this_category' | translate }}</mat-label>\n    <app-group-checkbox-select\n      *ngIf=\"!category?.parent?.id\"\n      [data]=\"roleOptions\"\n      formControlName=\"visible_to\"\n    ></app-group-checkbox-select>\n    <div class=\"radio-buttons\" *ngIf=\"category?.parent?.id\" [data-qa]=\"'category-option'\">\n      <p class=\"radio-buttons__info\">\n        <mat-icon>group</mat-icon>\n        {{ 'category.child_permissions' | translate }}\n      </p>\n    </div>\n  </div>\n\n  <div class=\"form-controls-spacer\" *ngIf=\"!isDesktop\"></div>\n  <div class=\"form-controls-panel form-controls-panel--sticky\">\n    <div>\n      <mzima-client-button\n        color=\"danger\"\n        *ngIf=\"isUpdate\"\n        class=\"delete-btn\"\n        [iconOnly]=\"!isDesktop\"\n        [data-qa]=\"'btn-category-delete'\"\n        (buttonClick)=\"deleteCategoryEmit()\"\n      >\n        <ng-container *ngIf=\"isDesktop\">{{ 'category.delete_category' | translate }}</ng-container>\n        <mat-icon *ngIf=\"!isDesktop\" icon svgIcon=\"delete\"></mat-icon>\n      </mzima-client-button>\n    </div>\n    <div>\n      <mzima-client-button\n        fill=\"outline\"\n        color=\"secondary\"\n        (buttonClick)=\"back()\"\n        [data-qa]=\"'btn-category-cancel'\"\n      >\n        {{ 'app.cancel' | translate }}\n      </mzima-client-button>\n      <mzima-client-button\n        type=\"submit\"\n        [data-qa]=\"'btn-category-save'\"\n        [disabled]=\"form.disabled || form.invalid || loading\"\n      >\n        {{ 'app.save' | translate }}\n      </mzima-client-button>\n    </div>\n  </div>\n</form>\n\n<ng-template #rolesRadio> </ng-template>\n","import { Location } from '@angular/common';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { TranslationInterface, LanguageInterface } from '@mzima-client/sdk';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport { formHelper } from '@helpers';\nimport { BaseComponent } from '../../../base.component';\nimport {\n  GroupCheckboxItemInterface,\n  SelectLanguagesModalComponent,\n} from '../../../shared/components';\nimport {\n  CategoriesService,\n  RolesService,\n  CategoryInterface,\n  generalHelpers,\n} from '@mzima-client/sdk';\nimport { BreakpointService, SessionService, LanguageService, ConfirmModalService } from '@services';\nimport { noWhitespaceValidator } from '../../../core/validators';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-create-category-form',\n  templateUrl: './create-category-form.component.html',\n  styleUrls: ['./create-category-form.component.scss'],\n})\nexport class CreateCategoryFormComponent extends BaseComponent implements OnInit, OnDestroy {\n  @Input() public loading: boolean;\n  @Input() public category: CategoryInterface;\n  @Output() formSubmit = new EventEmitter<any>();\n  @Output() deleteCall = new EventEmitter<any>();\n  public categories: CategoryInterface[];\n  public languages: LanguageInterface[];\n  public defaultLanguage?: LanguageInterface;\n  public activeLanguages: LanguageInterface[] = [];\n  public selectedTranslation?: string;\n  public roleOptions: GroupCheckboxItemInterface[] = [];\n  public isUpdate = false;\n  isParent = false;\n  public form: FormGroup;\n  private userRole: string;\n  public formErrors: any[] = [];\n\n  constructor(\n    protected override sessionService: SessionService,\n    protected override breakpointService: BreakpointService,\n    private fb: FormBuilder,\n    private categoriesService: CategoriesService,\n    private rolesService: RolesService,\n    private languageService: LanguageService,\n    private dialog: MatDialog,\n    private confirmModalService: ConfirmModalService,\n    private translate: TranslateService,\n    private router: Router,\n    private location: Location,\n  ) {\n    super(sessionService, breakpointService);\n    this.checkDesktop();\n\n    this.languages = this.languageService.getLanguages();\n    this.defaultLanguage = this.languages.find((lang) => lang.code === 'en'); // FIXME\n\n    this.form = this.fb.group({\n      id: [''],\n      name: ['', [Validators.required, noWhitespaceValidator]],\n      description: [''],\n      is_child_to: [''],\n      language: ['en'],\n      visible_to: [\n        {\n          value: 'everyone',\n          options: [],\n          disabled: false,\n        },\n      ],\n      translations: this.fb.array<TranslationInterface>([]),\n      translate_name: [''],\n      translate_description: [''],\n      parent: [],\n    });\n\n    this.categoriesService.categoryErrors$.pipe(untilDestroyed(this)).subscribe((value) => {\n      this.formErrors = value;\n    });\n  }\n\n  ngOnInit(): void {\n    this.getUserData();\n    this.formSubscribe();\n    this.getCategories();\n    this.getRoles();\n    this.userRole = localStorage.getItem(`${generalHelpers.CONST.LOCAL_STORAGE_PREFIX}role`)!;\n    if (this.category) {\n      this.isParent = !!this.category.children?.length;\n      this.isUpdate = !!this.category;\n      this.form.patchValue({\n        id: this.category.id,\n        name: this.category.tag,\n        description: this.category.description,\n        language: this.category.enabled_languages.default,\n        is_child_to: this.category.parent?.id || null,\n      });\n\n      this.updateForm(\n        'visible_to',\n        formHelper.mapRoleToVisible(this.category?.role, !!this.category.parent_id),\n      );\n\n      if (this.category?.translations) {\n        const translations: TranslationInterface[] = Object.keys(this.category?.translations).map(\n          (key) => {\n            return { id: key, ...this.category.translations[key] };\n          },\n        );\n        this.activeLanguages = this.languages.filter((language) =>\n          translations.find((trans) => trans.id === language.code),\n        );\n        this.form.setControl('translations', this.fb.array(translations));\n      }\n    }\n    this.activeLanguages.push(this.defaultLanguage!);\n  }\n\n  loadData(): void {}\n\n  ngOnDestroy() {\n    this.categoriesService.categoryErrors.next(null);\n  }\n\n  private formSubscribe() {\n    this.form.valueChanges.pipe(untilDestroyed(this)).subscribe({\n      next: (data) => {\n        this.categoriesService.categoryErrors.next(null);\n        // if (!!this.activeLanguages.find((language) => language.code === data.language)) {\n        //   this.activeLanguages = [];\n        // }\n        if (this.defaultLanguage?.code !== data.language) {\n          this.defaultLanguage = this.languages.find((lang) => lang.code === data.language);\n          this.selectedTranslation = this.defaultLanguage?.code;\n          this.form.value.translations = this.form.value.translations.filter(\n            (trans: TranslationInterface) => trans.id !== this.defaultLanguage?.code,\n          );\n        }\n\n        if (this.selectedTranslation && this.selectedTranslation !== this.defaultLanguage?.code) {\n          const translation = this.form.value.translations.find(\n            (trans: TranslationInterface) => trans.id === this.selectedTranslation,\n          );\n          if (!translation) {\n            this.form.value.translations.push({\n              id: this.selectedTranslation,\n              name: data.translate_name,\n              description: data.translate_description,\n            });\n          } else {\n            translation.name = data.translate_name;\n            translation.description = data.translate_description;\n          }\n        }\n      },\n    });\n  }\n\n  private getCategories() {\n    this.categoriesService.get().subscribe({\n      next: (data) => {\n        this.categories = data.results\n          .filter((cat: CategoryInterface) => !cat.parent_id)\n          .filter((cat: CategoryInterface) => cat.id !== this.category?.id);\n      },\n    });\n  }\n\n  private getRoles() {\n    this.rolesService.getRoles().subscribe({\n      next: (response) => {\n        this.roleOptions = formHelper.roleTransform({\n          roles: response.results,\n          userRole: this.userRole,\n          onlyMe: this.translate.instant('role.only_me'),\n          everyone: this.translate.instant('role.everyone'),\n          specificRoles: this.translate.instant('app.specific_roles'),\n          isShowIcons: false,\n        });\n\n        if (this.category) {\n          this.checkRoleOptions(this.category.parent?.id);\n        }\n      },\n    });\n  }\n\n  checkRoleOptions(parentId: number) {\n    this.roleOptions.forEach((option) => {\n      if (option?.options) {\n        option.options.forEach((role) => {\n          if (this.category.role) {\n            role.checked = this.category.role.includes(role.value as string);\n            role.disabled = !!parentId;\n          } else role.checked = role.value === 'admin';\n        });\n      }\n    });\n  }\n\n  private updateForm(field: string, value: any) {\n    this.form.patchValue({ [field]: value });\n  }\n\n  public isRoleActive(roleName: string): boolean {\n    return !!this.category.role && this.category.role.indexOf(roleName) > -1;\n  }\n\n  public submit(): void {\n    if (this.form.invalid) return;\n\n    let role;\n    switch (this.form.value.visible_to.value) {\n      case 'only_me':\n        role = ['me'];\n        break;\n      case 'everyone':\n        // role = ['everyone'];\n        role = null;\n        break;\n      default:\n        role = this.form.value.visible_to.options;\n    }\n\n    const category = {\n      user_id: Number(this.user.userId),\n      base_language: this.form.value.language,\n      color: '',\n      description: this.form.value.description,\n      enabled_languages: {\n        default: this.form.value.language,\n        available: [],\n      },\n      icon: 'tag',\n      parent: this.form.value.parent,\n      parent_id: this.form.value.is_child_to || null,\n      parent_id_original: this.category?.parent?.id || null,\n      role,\n      slug: this.form.value.name,\n      tag: this.form.value.name,\n      translations: this.form.value.translations.reduce(\n        (acc: { name: string; description: string }, curr: TranslationInterface) => ({\n          ...acc,\n          [curr.id]: { name: curr.name, description: curr.description },\n        }),\n        {},\n      ),\n      type: 'category',\n    };\n\n    this.formSubmit.emit(category);\n  }\n\n  public addTranslation(): void {\n    const dialogRef = this.dialog.open(SelectLanguagesModalComponent, {\n      width: '100%',\n      maxWidth: 576,\n      panelClass: 'modal',\n      data: {\n        languages: this.languages,\n        activeLanguages: this.activeLanguages,\n        defaultLanguage: this.defaultLanguage,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe({\n      next: (result: LanguageInterface[]) => {\n        if (!result) return;\n        const defaultIndex = result.indexOf(this.defaultLanguage!);\n        result.splice(defaultIndex, 1);\n        this.activeLanguages = [this.defaultLanguage!, ...result];\n      },\n    });\n  }\n\n  public chooseTranslation(lang: LanguageInterface): void {\n    this.selectedTranslation = lang.code;\n\n    const translation: TranslationInterface = this.form.controls['translations'].value.find(\n      (trans: TranslationInterface) => trans.id === lang.code,\n    );\n    if (translation) {\n      this.form.patchValue({\n        translate_name: translation.name,\n        translate_description: translation.description,\n      });\n    } else {\n      this.form.controls['translate_name'].setValue('');\n      this.form.controls['translate_description'].setValue('');\n    }\n\n    if (lang.code === 'en') {\n      this.form.controls['translate_name'].clearValidators();\n    } else {\n      this.form.controls['translate_name'].setValidators([Validators.required]);\n    }\n    this.form.controls['translate_name'].updateValueAndValidity();\n  }\n\n  public async deleteTranslation(event: Event, languageCode?: string): Promise<void> {\n    event.stopPropagation();\n    const language = this.languages.find((lang) => lang.code === languageCode);\n    const confirmed = await this.confirmModalService.open({\n      title: this.translate.instant('notify.do_you_really_want_to_delete_language', {\n        lang: language!.name,\n      }),\n      description: `<p>${this.translate.instant('notify.default.proceed_warning')}</p>`,\n    });\n    if (!confirmed) return;\n\n    if (this.selectedTranslation === languageCode) {\n      this.selectedTranslation = this.defaultLanguage?.code;\n    }\n\n    this.activeLanguages.splice(\n      this.activeLanguages.findIndex((lang) => lang.code === languageCode),\n      1,\n    );\n\n    this.form.value.translations = this.form.value.translations.filter(\n      (trans: TranslationInterface) => trans.id !== languageCode,\n    );\n  }\n\n  public parentChanged(event: any): void {\n    const parentCategory = this.categories.find((category) => category.id === event.value);\n    const parentRole = parentCategory ? parentCategory?.role! : null;\n    this.updateForm(\n      'visible_to',\n      formHelper.mapRoleToVisible(parentRole, parentCategory ? !!parentCategory.id : false),\n    );\n    this.checkRoleOptions(event.value);\n    this.form.controls['parent'].setValue(parentCategory);\n  }\n\n  public deleteCategoryEmit() {\n    this.deleteCall.emit(true);\n  }\n\n  public back() {\n    if (this.isDesktop) {\n      this.router.navigate(['settings/categories']);\n    } else {\n      this.location.back();\n    }\n  }\n}\n","<ng-container *ngIf=\"category; else spinner\">\n  <app-create-category-form\n    [category]=\"category\"\n    [loading]=\"isFormOnSubmit\"\n    (formSubmit)=\"updateCategory($event)\"\n    (deleteCall)=\"deleteCategory()\"\n  >\n  </app-create-category-form>\n</ng-container>\n\n<ng-template #spinner>\n  <app-spinner class=\"spinner\"></app-spinner>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CategoriesService, CategoryInterface } from '@mzima-client/sdk';\nimport { ConfirmModalService } from '@services';\n\n@Component({\n  selector: 'app-category',\n  templateUrl: './category.component.html',\n  styleUrls: ['./category.component.scss'],\n})\nexport class CategoryComponent {\n  public category: CategoryInterface;\n  public isFormOnSubmit: boolean;\n  public categoryId: string;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private categoriesService: CategoriesService,\n    private confirmModalService: ConfirmModalService,\n    private translate: TranslateService,\n  ) {\n    this.categoryId = this.route.snapshot.paramMap.get('id') || '';\n    this.categoriesService.getById(this.categoryId).subscribe({\n      next: (data) => {\n        this.category = data.result;\n      },\n    });\n  }\n\n  public updateCategory(data: any): void {\n    this.isFormOnSubmit = true;\n\n    this.categoriesService.update(this.categoryId, data).subscribe({\n      next: () => {\n        this.isFormOnSubmit = false;\n        this.router.navigate(['settings/categories']);\n      },\n      error: ({ error }) => {\n        this.categoriesService.categoryErrors.next(error.errors.failed_validations);\n        this.isFormOnSubmit = false;\n      },\n    });\n  }\n\n  public async deleteCategory(): Promise<void> {\n    const confirmed = await this.confirmModalService.open({\n      title: this.translate.instant('notify.category.destroy_confirm'),\n      description: `<p>${this.translate.instant('notify.category.destroy_confirm_desc')}</p>`,\n      confirmButtonText: this.translate.instant('app.yes_delete'),\n      cancelButtonText: this.translate.instant('app.no_go_back'),\n    });\n    if (!confirmed) return;\n\n    this.categoriesService.delete(this.categoryId).subscribe({\n      next: () => {\n        this.router.navigate(['settings/categories']);\n      },\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CategoriesService } from '@mzima-client/sdk';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.scss'],\n})\nexport class CreateComponent {\n  public isFormOnSubmit: boolean;\n\n  constructor(private categoriesService: CategoriesService, private router: Router) {}\n\n  public createCategory(category: any): void {\n    this.isFormOnSubmit = true;\n\n    this.categoriesService.post(category).subscribe({\n      next: () => {\n        this.isFormOnSubmit = false;\n        this.router.navigate(['settings/categories']);\n      },\n      error: ({ error }) => {\n        this.categoriesService.categoryErrors.next(error.errors.failed_validations);\n        this.isFormOnSubmit = false;\n      },\n    });\n  }\n}\n","<section class=\"create-category\">\n  <app-create-category-form [loading]=\"isFormOnSubmit\" (formSubmit)=\"createCategory($event)\">\n  </app-create-category-form>\n</section>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CategoriesComponent } from './categories.component';\nimport { CategoryComponent } from './category/category.component';\nimport { CreateComponent } from './create/create.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CategoriesComponent,\n  },\n  {\n    path: 'create',\n    component: CreateComponent,\n    data: { breadcrumb: 'Create category' },\n  },\n  {\n    path: ':id',\n    component: CategoryComponent,\n    data: { breadcrumb: 'Update category' },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CategoriesRoutingModule {}\n","import { TextFieldModule } from '@angular/cdk/text-field';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { GroupCheckboxSelectModule } from '../../shared/components/group-checkbox-select/group-checkbox-select.module';\nimport { SettingsHeaderModule } from '../../shared/components/settings-header/settings-header.module';\nimport { DirectiveModule, SpinnerModule } from '@shared';\nimport { CategoriesRoutingModule } from './categories-routing.module';\nimport { CategoriesComponent } from './categories.component';\nimport { CreateComponent } from './create/create.component';\nimport { CreateCategoryFormComponent } from './create-category-form/create-category-form.component';\nimport { CategoryItemComponent } from './category-item/category-item.component';\nimport { CategoryComponent } from './category/category.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [\n    CategoriesComponent,\n    CreateComponent,\n    CategoryItemComponent,\n    CreateCategoryFormComponent,\n    CategoryComponent,\n  ],\n  imports: [\n    CommonModule,\n    CategoriesRoutingModule,\n    SpinnerModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    TextFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    GroupCheckboxSelectModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    DirectiveModule,\n    SettingsHeaderModule,\n    MzimaUiModule,\n  ],\n})\nexport class CategoriesModule {}\n"],"x_google_ignoreList":[]}