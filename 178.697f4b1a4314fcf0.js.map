{"version":3,"file":"178.697f4b1a4314fcf0.js","mappings":"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","names":["FilterVisibleLayersPipe","transform","layers","filter","layer","visible","pure","i0","SettingsMapComponent","sessionService","changeDetector","minObfuscation","maxObfuscation","leafletOptions","map","mapMarker","mapLayers","mapConfig","mapReady","maxZoom","minZoom","baseLayers","Object","values","mapHelper","baselayers","geocoderControl","queryLocation","searchSubject","Subject","geocodingResults","isShowGeocodingResults","locationPrecisionEnabled","currentPrecision","constructor","this","ngOnInit","pipe","debounceTime","untilDestroyed","subscribe","query","performSearch","getMapConfigurations","getPrecision","getFeatureConfigurations","enabled","scrollWheelZoom","zoomControl","center","default_view","lat","lon","zoom","addTileLayerToMap","baselayer","addMarker","removeLayer","marker","getCenter","draggable","icon","pointIcon","color","addTo","on","e","handleDragEnd","code","currentLayer","TileLayer","push","tileLayer","url","layerOptions","layerChange","newLayer","onMapReady","Geocoder","defaultMarkGeocode","position","collapsed","control","mapClick","getZoom","detectChanges","results","updateMapPreview","setView","setLatLng","coordinates","latlng","wrap","setCoordinates","lng","target","getLatLng","searchLocation","next","options","placeholder","_input","value","_geocode","selectLocation","item","name","fitBounds","bbox","onZoomChange","setZoom","updatePrecision","location_precision","selectors","tslib_es6","UntilDestroy","SessionService","ChangeDetectorRef","GeneralComponent","formBuilder","mediaService","configService","loader","langService","translate","apiKeyService","confirmModalService","clipboard","breakpointService","notificationService","snackBar","cancel","EventEmitter","mapSettings","isDesktop$","generalForm","copySuccess","submitted","initialFormValue","changesMade","siteConfig","apiKey","uploadedFile","group","Validators","description","email","language","private","disable_registration","getSiteConfigurations","patchValue","get","res","shift","onLangChange","newLang","controls","setValue","lang","valueChanges","fileUploaded","event","image_header","dataURI","file","headerImageDeleted","undefined","generateApiKey","_this","open","title","instant","confirmButtonText","update","id","newKey","result","post","save","show","uploadFile","mergeMap","newImage","original_file_url","updateSettings","complete","hide","error","showError","message","assign","changeLanguage","updatedSite","setConfigurations","copyToClipboard","str","copy","setTimeout","isIntegerAndZeroToNine","parseFloat","Number","isInteger","openConfirmModal","_this2","JSON","stringify","emit","showSnackbar","duration","horizontalPosition","verticalPosition","ctx","FormBuilder","MediaService","ConfigService","LoaderService","LanguageService","TranslateService","ApiKeyService","ConfirmModalService","Clipboard","BreakpointService","NotificationService","MatSnackBar","routes","path","component","GeneralRoutingModule","RouterModule","GeneralModule","CommonModule","LeafletModule","SettingsModule","TranslateModule","ReactiveFormsModule","MatInputModule","MatSelectModule","MatCheckboxModule","MatButtonModule","MatIconModule","DirectiveModule","FormsModule","MzimaUiModule","FilterVisibleLayersModule","MatDialogModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/core/pipes/filter-visible-layer/filter-visible-layer.pipe.ts","./apps/web-mzima-client/src/app/settings/general/settings-map/settings-map.component.html","./apps/web-mzima-client/src/app/settings/general/settings-map/settings-map.component.ts","./apps/web-mzima-client/src/app/settings/general/general.component.html","./apps/web-mzima-client/src/app/settings/general/general.component.ts","./apps/web-mzima-client/src/app/settings/general/general-routing.module.ts","./apps/web-mzima-client/src/app/settings/general/general.module.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'filterVisibleLayers' })\nexport class FilterVisibleLayersPipe implements PipeTransform {\n  transform(layers: any[]) {\n    return layers.filter((layer) => layer.visible);\n  }\n}\n","<ng-container *ngIf=\"mapConfig\">\n  <div class=\"form-row\">\n    <mat-label>{{ 'survey.location' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        [(ngModel)]=\"queryLocation\"\n        (ngModelChange)=\"searchLocation()\"\n        (focusout)=\"searchLocation()\"\n        placeholder=\"{{ 'settings.general_settings.placeholder.pick_location' | translate }}\"\n        [data-qa]=\"'query-location'\"\n      />\n\n      <mzima-client-button [iconOnly]=\"true\" fill=\"clear\" matSuffix color=\"secondary\">\n        <mat-icon icon svgIcon=\"search-small\"></mat-icon>\n      </mzima-client-button>\n    </mat-form-field>\n    <ul\n      class=\"geocoder-list\"\n      *ngIf=\"isShowGeocodingResults && geocodingResults.length\"\n      [data-qa]=\"'geocoder-list'\"\n    >\n      <li\n        class=\"geocoder-list__item\"\n        *ngFor=\"let result of geocodingResults\"\n        (click)=\"selectLocation(result)\"\n        [data-qa]=\"'geocoder-list-item'\"\n      >\n        {{ result.name }}\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"form-row map-holder\">\n    <div\n      id=\"settings-map\"\n      class=\"map\"\n      *ngIf=\"mapReady\"\n      leaflet\n      [leafletOptions]=\"leafletOptions\"\n      [leafletLayers]=\"mapLayers\"\n      (leafletMapReady)=\"onMapReady($event)\"\n    ></div>\n  </div>\n\n  <div class=\"inputs\">\n    <div class=\"form-row\">\n      <mat-label>{{ 'settings.map_default_latitude' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input\n          type=\"number\"\n          matInput\n          [(ngModel)]=\"mapConfig.default_view!.lat\"\n          [max]=\"90\"\n          [min]=\"-90\"\n          readonly\n          [data-qa]=\"'default-latitude'\"\n        />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'settings.map_default_longitude' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input\n          type=\"number\"\n          matInput\n          [(ngModel)]=\"mapConfig.default_view!.lon\"\n          [max]=\"180\"\n          [min]=\"-180\"\n          readonly\n          [data-qa]=\"'default-longitude'\"\n        />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'settings.map_default_baselayer' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <mat-select\n          disableOptionCentering\n          [(value)]=\"mapConfig.default_view!.baselayer\"\n          (valueChange)=\"layerChange($event)\"\n        >\n          <mat-option *ngFor=\"let layer of baseLayers | filterVisibleLayers\" [value]=\"layer.code\">\n            {{ layer.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\">\n      <mat-label>{{ 'settings.map_default_zoom_level' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input\n          type=\"number\"\n          matInput\n          [(ngModel)]=\"mapConfig.default_view!.zoom\"\n          (ngModelChange)=\"onZoomChange()\"\n          [max]=\"maxZoom\"\n          [min]=\"minZoom\"\n        />\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\" *ngIf=\"locationPrecisionEnabled\">\n      <mat-label>{{ 'settings.map_location_precision' | translate }}</mat-label>\n      <mat-form-field appearance=\"outline\">\n        <input\n          type=\"number\"\n          matInput\n          [(ngModel)]=\"mapConfig.location_precision\"\n          (ngModelChange)=\"updatePrecision()\"\n          [max]=\"maxObfuscation\"\n          [min]=\"minObfuscation\"\n        />\n      </mat-form-field>\n      <p>\n        <span>{{ 'settings.map_precise_to' | translate }}</span\n        >{{ currentPrecision }}km\n      </p>\n    </div>\n  </div>\n\n  <div class=\"form-row\">\n    <div class=\"checkbox\">\n      <mat-checkbox\n        [checked]=\"mapConfig.clustering\"\n        (change)=\"mapConfig.clustering = $event.checked\"\n      >\n        {{ 'settings.map_clustering' | translate }}\n      </mat-checkbox>\n    </div>\n  </div>\n</ng-container>\n","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport { mapHelper } from '@helpers';\nimport { MapConfigInterface, MapViewInterface } from '@models';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { SessionService } from '@services';\nimport {\n  control,\n  DragEndEvent,\n  Layer,\n  LeafletMouseEvent,\n  Map,\n  Marker,\n  marker,\n  TileLayer,\n  tileLayer,\n} from 'leaflet';\nimport Geocoder from 'leaflet-control-geocoder';\nimport { debounceTime, Subject } from 'rxjs';\nimport { pointIcon } from '../../../core/helpers/map';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-settings-map',\n  templateUrl: './settings-map.component.html',\n  styleUrls: ['./settings-map.component.scss'],\n})\nexport class SettingsMapComponent implements OnInit {\n  @Input() minObfuscation = 0;\n  @Input() maxObfuscation = 9;\n  leafletOptions: any;\n  map: Map;\n  mapMarker: Marker;\n  mapLayers: Layer[] = [];\n  mapConfig: MapConfigInterface;\n  mapReady = false;\n  maxZoom = 22; // affects the arrow on number input field for \"Default zoom level\"\n  minZoom = 1; // affects the arrow on number input field for \"Default zoom level\"\n  baseLayers = Object.values(mapHelper.getMapLayers().baselayers);\n\n  public geocoderControl: any;\n  public queryLocation: string = '';\n  private searchSubject = new Subject<string>();\n  public geocodingResults: any[] = [];\n  public isShowGeocodingResults = false;\n  locationPrecisionEnabled: any;\n  currentPrecision = 9;\n\n  constructor(private sessionService: SessionService, private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.searchSubject.pipe(debounceTime(600), untilDestroyed(this)).subscribe((query) => {\n      this.performSearch(query);\n    });\n\n    this.mapConfig = this.sessionService.getMapConfigurations();\n    this.currentPrecision = this.getPrecision();\n\n    this.locationPrecisionEnabled =\n      !!this.sessionService.getFeatureConfigurations()['anonymise-reporters']?.enabled;\n\n    this.leafletOptions = {\n      scrollWheelZoom: true,\n      zoomControl: false,\n      layers: [],\n      center: [this.mapConfig.default_view!.lat, this.mapConfig.default_view!.lon],\n      zoom: this.mapConfig.default_view!.zoom,\n    };\n    this.mapReady = true;\n    this.addTileLayerToMap(this.mapConfig.default_view!.baselayer);\n  }\n\n  addMarker() {\n    if (this.mapMarker) this.map.removeLayer(this.mapMarker);\n\n    this.mapMarker = marker(this.map.getCenter(), {\n      draggable: true,\n      icon: pointIcon(this.mapConfig.default_view!.color),\n    }).addTo(this.map);\n\n    this.mapMarker.on('dragend', (e) => {\n      this.handleDragEnd(e);\n    });\n  }\n\n  addTileLayerToMap(code: MapViewInterface['baselayer']) {\n    const currentLayer = mapHelper.getMapLayers().baselayers[code];\n    this.mapLayers = this.mapLayers.filter((layer) => !(layer instanceof TileLayer));\n    this.mapLayers.push(tileLayer(currentLayer.url, currentLayer.layerOptions));\n  }\n\n  layerChange(newLayer: MapViewInterface['baselayer']) {\n    this.addTileLayerToMap(newLayer);\n  }\n\n  onMapReady(map: Map) {\n    // Initialize geocoder\n    this.geocoderControl = new Geocoder({\n      defaultMarkGeocode: false,\n      position: 'topleft',\n      collapsed: false,\n    });\n\n    this.map = map;\n    control.zoom({ position: 'bottomleft' }).addTo(this.map);\n    this.addMarker();\n\n    this.geocoderControl.addTo(this.map);\n\n    this.map.on('click', (e) => {\n      this.mapClick(e);\n    });\n\n    this.map.on('zoomend', () => {\n      this.mapConfig.default_view!.zoom = map.getZoom();\n      this.changeDetector.detectChanges();\n    });\n\n    this.geocoderControl.on('finishgeocode', (e: any) => {\n      this.geocodingResults = e.results;\n    });\n  }\n\n  private updateMapPreview() {\n    // Center the map at our current default.\n    // Set the zoom level to our default zoom.\n    this.map.setView(\n      [this.mapConfig.default_view!.lat, this.mapConfig.default_view!.lon],\n      this.mapConfig.default_view!.zoom,\n    );\n\n    // Update our draggable marker to the default.\n    this.mapMarker.setLatLng([this.mapConfig.default_view!.lat, this.mapConfig.default_view!.lon]);\n    this.changeDetector.detectChanges();\n  }\n\n  private mapClick(e: LeafletMouseEvent) {\n    const coordinates = e.latlng.wrap();\n    this.setCoordinates(coordinates.lat, coordinates.lng);\n  }\n\n  private handleDragEnd(e: DragEndEvent) {\n    const coordinates = e.target.getLatLng().wrap();\n    this.setCoordinates(coordinates.lat, coordinates.lng);\n  }\n\n  public searchLocation() {\n    this.isShowGeocodingResults = true;\n    this.searchSubject.next(this.queryLocation);\n  }\n\n  private performSearch(query: string) {\n    this.geocoderControl.options.placeholder = query;\n    this.geocoderControl._input.value = query;\n    this.geocoderControl._geocode();\n  }\n\n  public selectLocation(item: any) {\n    this.queryLocation = item.name;\n    const coordinates = item.center;\n    this.map.fitBounds(item.bbox);\n    this.setCoordinates(coordinates.lat, coordinates.lng);\n    this.geocodingResults = [];\n    this.searchSubject.next('');\n  }\n\n  private setCoordinates(lat: number, lon: number) {\n    this.mapConfig.default_view!.lat = lat;\n    this.mapConfig.default_view!.lon = lon;\n    this.addMarker();\n    this.updateMapPreview();\n  }\n\n  public onZoomChange(): void {\n    if (this.map) {\n      this.map.setZoom(this.mapConfig.default_view!.zoom);\n    }\n  }\n\n  public updatePrecision() {\n    this.currentPrecision = this.getPrecision();\n    this.updateMapPreview();\n  }\n\n  private getPrecision() {\n    return this.sessionService.getPrecision(this.mapConfig.location_precision!);\n  }\n}\n","<h1 *ngIf=\"isDesktop$ | async\">{{ 'settings.settings_list.general' | translate }}</h1>\n<form [formGroup]=\"generalForm\" (ngSubmit)=\"save()\" novalidate>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.deployment_name' | translate }} *</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.deployment_name' | translate }}\"\n        formControlName=\"name\"\n        [data-qa]=\"'name'\"\n        required\n      />\n    </mat-form-field>\n    <mat-error *ngIf=\"generalForm.get('name')?.hasError('required')\" class=\"form-row__error\">\n      {{ 'settings.valid.name.required' | translate }}\n    </mat-error>\n    <mat-error\n      *ngIf=\"generalForm.get('name')?.hasError('specialCharacters')\"\n      class=\"form-row__error\"\n    >\n      {{ 'settings.valid.name.pattern' | translate }}\n    </mat-error>\n    <mat-error *ngIf=\"generalForm.get('name')?.hasError('minlength')\" class=\"form-row__error\">\n      {{ 'settings.valid.name.minlength' | translate }}\n    </mat-error>\n  </div>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.site_description' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <textarea\n        matInput\n        cdkTextareaAutosize\n        cdkAutosizeMaxRows=\"10\"\n        [cdkAutosizeMinRows]=\"(isDesktop$ | async) ? 6 : 3\"\n        placeholder=\"{{ 'settings.site_description' | translate }}\"\n        formControlName=\"description\"\n        [data-qa]=\"'description'\"\n      ></textarea>\n    </mat-form-field>\n  </div>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.deployment_logo' | translate }}</mat-label>\n    <app-file-uploader\n      [imageSrc]=\"siteConfig.image_header\"\n      (fileUpload)=\"fileUploaded($event)\"\n      (delete)=\"headerImageDeleted()\"\n    >\n    </app-file-uploader>\n  </div>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.site_email' | translate }} *</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"name@domain.com\"\n        formControlName=\"email\"\n        required\n        [data-qa]=\"'email'\"\n      />\n    </mat-form-field>\n    <ng-container *ngIf=\"generalForm.get('email')?.invalid\">\n      <mat-error\n        *ngFor=\"let error of generalForm.get('email')?.errors | keyvalue\"\n        class=\"form-row__error\"\n      >\n        {{ 'contact.valid.email.' + error.key | translate }}\n      </mat-error>\n    </ng-container>\n  </div>\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.site_language' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <mat-select formControlName=\"language\" disableOptionCentering [data-qa]=\"'language'\">\n        <mat-option *ngFor=\"let lang of langService.getLanguages()\" [value]=\"lang.code\">\n          {{ lang.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>{{ 'settings.general_settings.private_settings' | translate }}</mat-label>\n    <div class=\"checkbox-group\">\n      <div class=\"checkbox\">\n        <!-- FIXME: isPrivateEnabled -->\n        <mat-checkbox [data-qa]=\"'site-private'\" formControlName=\"private\">\n          {{ 'settings.site_private' | translate }}\n        </mat-checkbox>\n        <p class=\"small\">{{ 'settings.site_private_desc' | translate }}</p>\n      </div>\n      <div class=\"checkbox\">\n        <!-- FIXME: isDisableRegistrationEnabled -->\n        <mat-checkbox\n          [data-qa]=\"'site-disable-registration'\"\n          formControlName=\"disable_registration\"\n        >\n          {{ 'settings.site_disable_registration' | translate }}\n        </mat-checkbox>\n        <p translate=\"settings.site_disable_registration_desc\"></p>\n      </div>\n    </div>\n  </div>\n</form>\n\n<div class=\"api-key\">\n  <div class=\"form-row\" *ngIf=\"apiKey\">\n    <mat-label>{{ 'settings.general_settings.api_key' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\" class=\"copy\">\n      <input matInput [value]=\"apiKey.api_key\" readonly [data-qa]=\"'api_key'\" />\n      <div class=\"copy-success\" *ngIf=\"copySuccess\">{{ 'share.copied' | translate }}</div>\n\n      <mzima-client-button\n        matSuffix\n        fill=\"clear\"\n        color=\"secondary\"\n        [iconOnly]=\"true\"\n        [disabled]=\"copySuccess\"\n        (buttonClick)=\"copyToClipboard(apiKey.api_key)\"\n      >\n        <mat-icon icon svgIcon=\"copy\"></mat-icon>\n      </mzima-client-button>\n\n      <mat-hint>{{ 'settings.api_key_desc' | translate }}</mat-hint>\n    </mat-form-field>\n  </div>\n\n  <mzima-client-button\n    fill=\"outline\"\n    [expand]=\"false\"\n    color=\"secondary\"\n    (click)=\"generateApiKey()\"\n    [data-qa]=\"'generate-api-key'\"\n  >\n    <span>{{ 'settings.general_settings.generate_api_key' | translate }}</span>\n    <mat-icon icon svgIcon=\"key\"></mat-icon>\n  </mzima-client-button>\n</div>\n\n<app-settings-map\n  #mapSettings\n  [minObfuscation]=\"minObfuscation\"\n  [maxObfuscation]=\"maxObfuscation\"\n></app-settings-map>\n\n<div class=\"form-controls-spacer\" *ngIf=\"!(isDesktop$ | async)!\"></div>\n<div class=\"form-controls-panel form-controls-panel--sticky\">\n  <mzima-client-button\n    type=\"button\"\n    fill=\"outline\"\n    class=\"cancel-button\"\n    color=\"secondary\"\n    (click)=\"openConfirmModal()\"\n    data-qa=\"'btn-cancel'\"\n  >\n    {{ 'app.cancel' | translate }}\n  </mzima-client-button>\n  <mzima-client-button\n    type=\"submit\"\n    data-qa=\"btn-save\"\n    (buttonClick)=\"save()\"\n    [disabled]=\"\n      generalForm.invalid ||\n      generalForm.disabled ||\n      submitted ||\n      !isIntegerAndZeroToNine(mapSettings.mapConfig.location_precision)\n    \"\n  >\n    {{ 'app.save' | translate }}\n  </mzima-client-button>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SessionService, BreakpointService, NotificationService } from '@services';\nimport { mergeMap, Observable } from 'rxjs';\nimport { SettingsMapComponent } from './settings-map/settings-map.component';\nimport { MediaService, ApiKeyService, ApiKeysResultInterface } from '@mzima-client/sdk';\nimport { ConfigService } from '../../core/services/config.service';\nimport { LoaderService } from '../../core/services/loader.service';\nimport { LanguageService } from '../../core/services/language.service';\nimport { ConfirmModalService } from '../../core/services/confirm-modal.service';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { EventEmitter, Output } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-general',\n  templateUrl: './general.component.html',\n  styleUrls: ['./general.component.scss'],\n})\nexport class GeneralComponent implements OnInit {\n  @Output() cancel = new EventEmitter();\n  @ViewChild('mapSettings') mapSettings: SettingsMapComponent;\n  public isDesktop$: Observable<boolean>;\n  public generalForm: FormGroup;\n  public copySuccess = false;\n  public submitted = false;\n  initialFormValue: any;\n  changesMade = false;\n  siteConfig: any;\n  apiKey: ApiKeysResultInterface;\n  uploadedFile?: File;\n  minObfuscation = 0;\n  maxObfuscation = 9;\n\n  constructor(\n    private sessionService: SessionService,\n    private formBuilder: FormBuilder,\n    private mediaService: MediaService,\n    private configService: ConfigService,\n    private loader: LoaderService,\n    public langService: LanguageService,\n    private translate: TranslateService,\n    private apiKeyService: ApiKeyService,\n    private confirmModalService: ConfirmModalService,\n    private clipboard: Clipboard,\n    private breakpointService: BreakpointService,\n    private notificationService: NotificationService,\n    private snackBar: MatSnackBar,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$.pipe(untilDestroyed(this));\n    this.generalForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(255)]],\n      description: ['', []],\n      email: ['', [Validators.email, Validators.required]],\n      language: ['en', []],\n      private: [false, []],\n      disable_registration: [false, []],\n    });\n  }\n\n  ngOnInit(): void {\n    this.siteConfig = this.sessionService.getSiteConfigurations();\n\n    this.generalForm.patchValue({\n      name: this.siteConfig.name,\n      description: this.siteConfig.description,\n      email: this.siteConfig.email,\n      language: this.siteConfig.language,\n      private: this.siteConfig.private,\n      disable_registration: this.siteConfig.disable_registration,\n    });\n    this.apiKeyService.get().subscribe((res) => {\n      this.apiKey = res.results.shift()!;\n    });\n    this.translate.onLangChange.subscribe((newLang) => {\n      this.generalForm.controls['language'].setValue(newLang.lang);\n    });\n    this.generalForm.valueChanges.pipe(untilDestroyed(this)).subscribe(() => {\n      this.changesMade = true;\n    });\n    this.initialFormValue = this.generalForm.value;\n  }\n\n  fileUploaded(event: any) {\n    this.siteConfig.image_header = event.dataURI;\n    this.uploadedFile = event.file;\n  }\n\n  headerImageDeleted() {\n    this.siteConfig.image_header = '';\n    this.uploadedFile = undefined;\n  }\n\n  public async generateApiKey(): Promise<void> {\n    const confirmed = await this.confirmModalService.open({\n      title: this.translate.instant('notify.api_key.change_question'),\n      description: `<p>${this.translate.instant('notify.default.proceed_warning')}</p>`,\n      confirmButtonText: this.translate.instant('settings.general_settings.generate_api_key'),\n    });\n\n    if (!confirmed) return;\n\n    if (this.apiKey) {\n      this.apiKeyService.update(this.apiKey.id, this.apiKey).subscribe((newKey: any) => {\n        this.apiKey = newKey.result;\n      });\n    } else {\n      this.apiKeyService.post({}).subscribe((newKey: any) => {\n        this.apiKey = newKey.result;\n      });\n    }\n  }\n\n  save() {\n    this.submitted = true;\n    this.loader.show();\n    if (this.uploadedFile) {\n      this.mediaService\n        .uploadFile(this.uploadedFile)\n        .pipe(\n          mergeMap((newImage: any) => {\n            this.siteConfig.image_header = newImage.result.original_file_url;\n            return this.updateSettings();\n          }),\n        )\n        .subscribe({\n          complete: () => {\n            this.loader.hide();\n            this.submitted = false;\n          },\n          error: (error) => {\n            this.loader.hide();\n            this.submitted = false;\n            this.notificationService.showError(error.message);\n          },\n        });\n    } else {\n      this.updateSettings().subscribe({\n        complete: () => {\n          this.submitted = false;\n          this.loader.hide();\n          this.changesMade = false;\n        },\n        error: (error) => {\n          this.submitted = false;\n          this.loader.hide();\n          this.notificationService.showError(error.message);\n        },\n      });\n    }\n  }\n\n  private updateSettings() {\n    const siteConfig = Object.assign({}, this.generalForm.value, {\n      image_header: this.siteConfig.image_header,\n    });\n\n    this.langService.changeLanguage(siteConfig.language);\n\n    return this.configService.update('site', siteConfig).pipe(\n      mergeMap((updatedSite: any) => {\n        this.sessionService.setConfigurations('site', updatedSite.result);\n        return this.configService.update('map', this.mapSettings.mapConfig);\n      }),\n    );\n  }\n\n  public copyToClipboard(str: string): void {\n    this.copySuccess = this.clipboard.copy(str);\n    setTimeout(() => (this.copySuccess = !this.copySuccess), 2000);\n  }\n\n  isIntegerAndZeroToNine(value: any): boolean {\n    value === '0' ? (value = parseFloat(value)) : value;\n    return Number.isInteger(value) && value >= this.minObfuscation && value <= this.maxObfuscation;\n  }\n  public async openConfirmModal() {\n    if (this.changesMade) {\n      const confirmed = await this.confirmModalService.open({\n        title: this.translate.instant('notify.default.data_has_not_been_saved'),\n        description: this.translate.instant('notify.default.proceed_warning'),\n        confirmButtonText: 'OK',\n      });\n      if (confirmed) {\n        const currentFormValue = this.generalForm.value;\n        if (JSON.stringify(currentFormValue) !== JSON.stringify(this.initialFormValue)) {\n          this.generalForm.patchValue(this.initialFormValue);\n          this.cancel.emit();\n          this.showSnackbar('Changes discarded successfully');\n          this.changesMade = false;\n        }\n      } else {\n        // nothing will happen, will remain in the current state\n      }\n    } else {\n      this.showSnackbar('No changes made yet');\n    }\n  }\n  public showSnackbar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 3000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { GeneralComponent } from './general.component';\n\nconst routes: Routes = [{ path: '', component: GeneralComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class GeneralRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { LeafletModule } from '@asymmetrik/ngx-leaflet';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule } from '@shared';\nimport { FilterVisibleLayersModule } from '@pipes';\nimport { SettingsModule } from '../settings.module';\nimport { GeneralRoutingModule } from './general-routing.module';\nimport { GeneralComponent } from './general.component';\nimport { SettingsMapComponent } from './settings-map/settings-map.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [GeneralComponent, SettingsMapComponent],\n  imports: [\n    CommonModule,\n    GeneralRoutingModule,\n    LeafletModule,\n    SettingsModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatIconModule,\n    DirectiveModule,\n    FormsModule,\n    MzimaUiModule,\n    FilterVisibleLayersModule,\n    MatDialogModule,\n  ],\n})\nexport class GeneralModule {}\n"],"x_google_ignoreList":[]}