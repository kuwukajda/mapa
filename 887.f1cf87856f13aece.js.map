{"version":3,"file":"887.f1cf87856f13aece.js","mappings":"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","names":["i0","MapComponent","MainViewComponent","router","route","postsService","savedSearchesService","eventBusService","sessionService","breakpointService","view","dialog","zone","mediaService","map","postsCollection","mapLayers","mapReady","mapConfig","markerClusterData","MarkerClusterGroup","markerClusterOptions","animate","maxClusterRadius","mapFitToBounds","fitBoundsOptions","cachedFilter","filtersSubscription$","leafletOptions","progress","isFiltersVisible","isMainFiltersOpen","constructor","super","this","postsFilters$","pipe","takeUntilDestroy$","ngOnInit","reInitParams","params","subscribe","initCollection","initFilterListener","getMapConfigurations","currentLayer","mapHelper","baselayers","default_view","baselayer","minZoom","maxZoom","scrollWheelZoom","zoomControl","layers","tileLayer","url","layerOptions","center","lat","lon","zoom","cluster_radius","on","next","option","setZoom","panTo","lng","isFiltersVisible$","untilDestroyed","setTimeout","isMainFiltersHidden$","isMainFiltersHidden","initCollectionRemoveListener","getUserData","loadData","getPostsGeoJson","debounceTime","filter","snapshot","data","searchId","collectionId","page","limit","currentView","resetMapLayers","layer","removeLayer","onMapReady","bounds","localStorage","getItem","fit","JSON","parse","setMaxBounds","setView","control","position","addTo","pageNumber","getGeojson","posts","oldGeoJson","results","r","type","geojson","features","f","properties","data_source_message_id","description","id","source","title","geoPosts","geoJSON","pointToLayer","onEachFeature","feature","unbindPopup","run","FeatureGroup","getLayers","getPopup","openPopup","comp","createComponent","PostPreviewComponent","getById","post","setInput","user","postV5","instance","details$","showPostDetailsModal","color","edit","deleted$","destroy","closePopup","forEach","outerLayer","eachLayer","innerLayer","payload","mediaField","post_content","fields","find","field","value","media","result","bindPopup","location","nativeElement","maxWidth","minWidth","maxHeight","window","innerHeight","closeButton","className","isFirstLayerEmpty","length","isThisInProgress","meta","total","hasTheFilterChanged","undefined","currentFilter","stringify","clustering","addLayer","push","count","getBounds","getBoundsZoom","getCenter","setItem","error","err","message","match","twitterId","editable","open","PostDetailsModalComponent","width","height","panelClass","selectors","tslib_es6","UntilDestroy","Router","ActivatedRoute","PostsService","SavedsearchesService","EventBusService","SessionService","BreakpointService","ViewContainerRef","MatDialog","NgZone","MediaService","routes","path","component","redirectTo","children","MapRoutingModule","RouterModule","MapModule","CommonModule","PostModule","MatProgressBarModule","MatButtonModule","MatIconModule","MatDialogModule","LeafletModule","TranslateModule","DirectiveModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/map/map.component.html","./apps/web-mzima-client/src/app/map/map.component.ts","./apps/web-mzima-client/src/app/map/map-routing.module.ts","./apps/web-mzima-client/src/app/map/map.module.ts"],"sourcesContent":["<div\n  class=\"map-holder\"\n  [ngClass]=\"{\n    'map-holder--filters-visible': isFiltersVisible,\n    'map-holder--no-offset': !isMainFiltersOpen\n  }\"\n>\n  <mat-progress-bar\n    class=\"progress-bar\"\n    mode=\"determinate\"\n    [value]=\"progress\"\n    *ngIf=\"progress < 100\"\n  ></mat-progress-bar>\n  <div\n    class=\"map\"\n    *ngIf=\"mapReady\"\n    leaflet\n    [leafletOptions]=\"leafletOptions\"\n    [leafletLayers]=\"mapLayers\"\n    [leafletFitBounds]=\"mapFitToBounds\"\n    [leafletFitBoundsOptions]=\"fitBoundsOptions\"\n    (leafletMapReady)=\"onMapReady($event)\"\n  ></div>\n</div>\n","import { Component, NgZone, OnInit, ViewContainerRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { mapHelper, takeUntilDestroy$ } from '@helpers';\nimport { MapConfigInterface } from '@models';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MainViewComponent } from '@shared';\nimport {\n  Content,\n  control,\n  FeatureGroup,\n  FitBoundsOptions,\n  geoJSON,\n  LatLngBounds,\n  Map,\n  MapOptions,\n  MarkerClusterGroup,\n  MarkerClusterGroupOptions,\n  tileLayer,\n} from 'leaflet';\nimport 'leaflet.markercluster';\nimport { debounceTime, Observable } from 'rxjs';\nimport { PostPreviewComponent } from '../post/post-preview/post-preview.component';\nimport { PostDetailsModalComponent } from './post-details-modal/post-details-modal.component';\nimport {\n  MediaService,\n  SavedsearchesService,\n  PostsService,\n  GeoJsonPostsResponse,\n} from '@mzima-client/sdk';\nimport { SessionService, EventBusService, EventType, BreakpointService } from '@services';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent extends MainViewComponent implements OnInit {\n  public map: Map;\n  postsCollection: GeoJsonPostsResponse;\n  mapLayers: any[] = [];\n  mapReady = false;\n  mapConfig: MapConfigInterface;\n  markerClusterData = new MarkerClusterGroup();\n  markerClusterOptions: MarkerClusterGroupOptions = { animate: true, maxClusterRadius: 50 };\n  mapFitToBounds: LatLngBounds;\n  fitBoundsOptions: FitBoundsOptions = {\n    animate: true,\n  };\n  cachedFilter: string;\n  filtersSubscription$: Observable<any>;\n  public leafletOptions: MapOptions;\n  public progress = 0;\n  public isFiltersVisible: boolean;\n  public isMainFiltersOpen: boolean;\n\n  constructor(\n    protected override router: Router,\n    protected override route: ActivatedRoute,\n    protected override postsService: PostsService,\n    protected override savedSearchesService: SavedsearchesService,\n    protected override eventBusService: EventBusService,\n    protected override sessionService: SessionService,\n    protected override breakpointService: BreakpointService,\n    private view: ViewContainerRef,\n    private dialog: MatDialog,\n    private zone: NgZone,\n    private mediaService: MediaService,\n  ) {\n    super(\n      router,\n      route,\n      postsService,\n      savedSearchesService,\n      eventBusService,\n      sessionService,\n      breakpointService,\n    );\n    this.filtersSubscription$ = this.postsService.postsFilters$.pipe(takeUntilDestroy$());\n  }\n\n  ngOnInit() {\n    this.reInitParams();\n    this.route.params.subscribe(() => {\n      this.initCollection();\n    });\n    this.initFilterListener();\n    this.mapConfig = this.sessionService.getMapConfigurations();\n\n    const currentLayer =\n      mapHelper.getMapLayers().baselayers[this.mapConfig.default_view!.baselayer];\n\n    this.leafletOptions = {\n      minZoom: 1,\n      maxZoom: 22,\n      scrollWheelZoom: true,\n      zoomControl: false,\n      layers: [tileLayer(currentLayer.url, currentLayer.layerOptions)],\n      center: [this.mapConfig.default_view!.lat, this.mapConfig.default_view!.lon],\n      zoom: this.mapConfig.default_view!.zoom,\n    };\n    this.markerClusterOptions.maxClusterRadius = this.mapConfig.cluster_radius;\n\n    this.mapReady = true;\n\n    this.eventBusService.on(EventType.SearchOptionSelected).subscribe({\n      next: (option) => {\n        this.map.setZoom(12);\n        this.map.panTo({ lat: option.lat, lng: option.lon });\n      },\n    });\n\n    this.sessionService.isFiltersVisible$.pipe(untilDestroyed(this)).subscribe({\n      next: (isFiltersVisible) => {\n        setTimeout(() => {\n          this.isFiltersVisible = isFiltersVisible;\n        }, 1);\n      },\n    });\n\n    this.sessionService.isMainFiltersHidden$.pipe(untilDestroyed(this)).subscribe({\n      next: (isMainFiltersHidden: boolean) => {\n        setTimeout(() => {\n          this.isMainFiltersOpen = !isMainFiltersHidden;\n        }, 1);\n      },\n    });\n\n    this.initCollectionRemoveListener();\n    this.getUserData();\n  }\n\n  loadData(): void {\n    this.getPostsGeoJson();\n  }\n\n  private initFilterListener() {\n    this.filtersSubscription$.pipe(debounceTime(1000)).subscribe({\n      next: (filter) => {\n        if (this.route.snapshot.data['view'] === 'search' && !this.searchId) return;\n        if (this.route.snapshot.data['view'] === 'collection' && !this.collectionId) return;\n\n        this.getPostsGeoJson(1, filter);\n      },\n    });\n  }\n\n  private reInitParams() {\n    this.params.page = 1;\n    this.params.limit = 500;\n    this.params.currentView = 'map';\n    this.resetMapLayers();\n    this.mapLayers = [];\n  }\n\n  private resetMapLayers() {\n    this.mapLayers.map((layer) => {\n      this.map.removeLayer(layer);\n      this.markerClusterData.removeLayer(layer);\n    });\n  }\n\n  onMapReady(map: Map) {\n    this.map = map;\n\n    // Fix initial zoom flicker of map view's map when bounds exist in local storage\n    const bounds = localStorage.getItem('bounds');\n    if (bounds === null) {\n      this.map.setZoom(this.leafletOptions.zoom ?? this.leafletOptions.minZoom ?? 1);\n    } else {\n      const { fit, zoom, center } = JSON.parse(bounds as string);\n      this.map.setMaxBounds(fit);\n      this.map.setView([center.lat, center.lng], zoom, {\n        animate: false,\n      });\n    }\n    // Later TODO: Check -> Does this check take care of when there are no posts with location info in deployment (at the time when bounds is null)?\n    //---------------------\n\n    control.zoom({ position: 'bottomleft' }).addTo(map);\n  }\n\n  getPostsGeoJson(pageNumber: number = 1, filter?: any) {\n    this.postsService\n      .getGeojson({ ...this.params, page: pageNumber })\n      .pipe(untilDestroyed(this))\n      .subscribe({\n        next: (posts) => {\n          const oldGeoJson: any = posts.results.map((r) => {\n            return {\n              type: r.geojson?.type,\n              features:\n                r.geojson?.features.map((f) => {\n                  f.properties = {\n                    data_source_message_id: r.data_source_message_id,\n                    description: r.description,\n                    id: r.id,\n                    'marker-color': r['marker-color'],\n                    source: r.source,\n                    title: r.title,\n                  };\n                  return f;\n                }) ?? [],\n            };\n          });\n          const geoPosts = geoJSON(oldGeoJson, {\n            pointToLayer: mapHelper.pointToLayer,\n            onEachFeature: (feature, layer) => {\n              layer.on('mouseout', () => {\n                layer.unbindPopup();\n              });\n              layer.on('click', () => {\n                this.zone.run(() => {\n                  if (layer instanceof FeatureGroup) {\n                    layer = layer.getLayers()[0];\n                  }\n\n                  if (layer.getPopup()) {\n                    layer.openPopup();\n                  } else {\n                    const comp = this.view.createComponent(PostPreviewComponent);\n                    this.postsService.getById(feature.properties.id).subscribe({\n                      next: (post) => {\n                        comp.setInput('post', post);\n                        comp.setInput('user', this.user);\n\n                        this.postsService.getById(feature.properties.id).subscribe({\n                          next: (postV5) => {\n                            comp.instance.details$.subscribe({\n                              next: () => {\n                                this.showPostDetailsModal(\n                                  postV5,\n                                  post.color,\n                                  post.data_source_message_id,\n                                );\n                              },\n                            });\n\n                            comp.instance.edit.subscribe({\n                              next: () => {\n                                this.showPostDetailsModal(\n                                  postV5,\n                                  post.color,\n                                  post.data_source_message_id,\n                                  true,\n                                );\n                              },\n                            });\n\n                            comp.instance.deleted$.subscribe({\n                              next: () => {\n                                comp.destroy();\n                                this.map.closePopup();\n                                this.mapLayers.forEach((outerLayer: any) => {\n                                  outerLayer.eachLayer((innerLayer: any) => {\n                                    if (innerLayer.feature.properties.id === postV5.id)\n                                      outerLayer.removeLayer(innerLayer);\n                                  });\n                                });\n                                this.loadData();\n                                this.eventBusService.next({\n                                  type: EventType.RefreshSurveysCounters,\n                                  payload: true,\n                                });\n                              },\n                            });\n\n                            const mediaField = postV5.post_content?.[0].fields.find(\n                              (field: any) => field.type === 'media',\n                            );\n                            if (mediaField && mediaField.value?.value) {\n                              this.mediaService.getById(mediaField.value.value).subscribe({\n                                next: (media) => {\n                                  comp.setInput('media', media.result);\n                                },\n                              });\n                            }\n                            const popup: Content = comp.location.nativeElement;\n\n                            layer.bindPopup(popup, {\n                              maxWidth: 360,\n                              minWidth: 360,\n                              maxHeight: window.innerHeight - 176,\n                              closeButton: false,\n                              className: 'pl-popup',\n                            });\n\n                            layer.openPopup(); // This one is for fit popup in view\n                          },\n                        });\n                      },\n                    });\n                  }\n                });\n              });\n            },\n          });\n\n          // Do we have any markers (layers) at all?\n          const isFirstLayerEmpty = this.mapLayers.length === 0;\n\n          // Do the number of markers equal what we expect?\n          // const isLayerCountMismatch =\n          //   pageNumber > 1 &&\n          //   !isFirstLayerEmpty &&\n          //   this.mapLayers[0].getLayers().length !== geoPosts.getLayers().length;\n\n          // Is the client in the middle of retrieving multiple pages of markers?\n          const isThisInProgress =\n            pageNumber > 1 && posts.meta.total !== this.mapLayers[0].getLayers().length;\n\n          // Has the filter changed from when we last saw it?\n          let hasTheFilterChanged = false;\n          if (filter !== undefined) {\n            const currentFilter = JSON.stringify(filter);\n            if (this.cachedFilter && currentFilter !== this.cachedFilter) {\n              hasTheFilterChanged = true;\n            }\n            this.cachedFilter = currentFilter;\n          } else {\n            hasTheFilterChanged = this.cachedFilter === undefined;\n          }\n\n          if (\n            isFirstLayerEmpty ||\n            hasTheFilterChanged ||\n            isThisInProgress // ||\n            // isLayerCountMismatch\n          ) {\n            if (!isFirstLayerEmpty && !isThisInProgress) {\n              this.resetMapLayers();\n            }\n\n            if (this.mapConfig.clustering) {\n              this.markerClusterData.addLayer(geoPosts);\n              this.mapLayers.push(this.markerClusterData);\n            } else {\n              this.mapLayers.push(geoPosts);\n            }\n\n            if (\n              this.params.limit &&\n              pageNumber &&\n              posts.meta.total > this.params.limit * pageNumber\n            ) {\n              this.progress = ((this.params.limit * pageNumber) / posts.count) * 100;\n              pageNumber++;\n              this.params.page = pageNumber;\n              this.getPostsGeoJson(pageNumber, filter);\n            } else {\n              this.progress = 100;\n              if (posts.results.length) {\n                this.mapFitToBounds = geoPosts.getBounds();\n\n                // Save bounds to localstorage to fix flicker when map is ready\n                const bounds = {\n                  fit: this.mapFitToBounds,\n                  zoom: this.map.getBoundsZoom(this.mapFitToBounds),\n                  center: this.map.getCenter(),\n                };\n                localStorage.setItem('bounds', JSON.stringify(bounds));\n              }\n            }\n          }\n\n          // if (posts.results.length && this.params.page <= this.params.limit) {\n          //   this.mapFitToBounds = geoPosts.getBounds();\n          // }\n        },\n        error: (err) => {\n          if (err.message.match(/Http failure response for/)) {\n            setTimeout(() => this.getPostsGeoJson(), 5000);\n          }\n        },\n      });\n  }\n\n  private showPostDetailsModal(\n    post: any,\n    color: string,\n    twitterId?: string,\n    editable?: boolean,\n  ): void {\n    this.dialog.open(PostDetailsModalComponent, {\n      width: '100%',\n      maxWidth: 576,\n      data: { post, color, twitterId, editable },\n      height: 'auto',\n      maxHeight: '90vh',\n      panelClass: ['modal', 'post-modal'],\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MapComponent } from './map.component';\n\nconst routes: Routes = [\n  { path: '', component: MapComponent },\n  {\n    path: 'collection',\n    redirectTo: '',\n    children: [\n      {\n        path: ':id',\n        component: MapComponent,\n        data: {\n          view: 'collection',\n        },\n      },\n    ],\n  },\n  {\n    path: 'search',\n    redirectTo: '',\n    children: [\n      {\n        path: ':id',\n        component: MapComponent,\n        data: {\n          view: 'search',\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MapRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { LeafletModule } from '@asymmetrik/ngx-leaflet';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule } from '@shared';\nimport { MapRoutingModule } from './map-routing.module';\nimport { MapComponent } from './map.component';\nimport { PostDetailsModalComponent } from './post-details-modal/post-details-modal.component';\nimport { PostModule } from '../post/post.module';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [MapComponent, PostDetailsModalComponent],\n  imports: [\n    CommonModule,\n    MapRoutingModule,\n    PostModule,\n    MatProgressBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    LeafletModule,\n    TranslateModule,\n    DirectiveModule,\n    MzimaUiModule,\n  ],\n})\nexport class MapModule {}\n"],"x_google_ignoreList":[]}