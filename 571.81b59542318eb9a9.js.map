{"version":3,"file":"571.81b59542318eb9a9.js","mappings":"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","names":["i0","WebhookItemComponent","route","webhooksService","formBuilder","surveysService","formsService","router","confirmModalService","translate","breakpointService","location","isDesktop$","webhook","form","eventList","name","value","entityList","surveyList","surveyAttributesList","controlFormIdData$","isCreateWebhook","fields","isDesktop","submitted","constructor","this","pipe","untilDestroyed","subscribe","next","group","allowed_privileges","created","destination_field_key","entity_type","Validators","event_type","form_id","id","shared_secret","source_field_key","updated","url","regexHelper","user","webhook_uuid","is_source_destination","controls","valueChanges","takeUntilDestroy$","ngOnInit","getSurveys","webhookId","snapshot","paramMap","get","getWebhook","getSurveyAttributes","surveyId","error","err","console","log","getById","result","fillInForm","data","Object","keys","forEach","patchValue","response","results","control","instant","getAttributes","toString","checkKeyFields","field","filterAttributes","key","replace","param","find","el","fillForApi","obj","type","save","deleteFormFields","postWebhook","updateWebhook","post","navigateToWebhooks","update","cancel","setState","navigate","back","openDialog","_this","open","title","description","deleteWebhook","delete","getSurveyName","survey","selectors","tslib_es6","UntilDestroy","ActivatedRoute","WebhooksService","FormBuilder","SurveysService","FormsService","Router","ConfirmModalService","TranslateService","BreakpointService","Location","WebhooksComponent","webhookList","webhookState$","changeWebhookState$","getWebhookList","routes","path","component","breadcrumb","WebhooksRoutingModule","RouterModule","WebhooksModule","CommonModule","ReactiveFormsModule","TranslateModule","MatButtonModule","DirectiveModule","MatIconModule","MatRippleModule","MatInputModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/webhooks/webhook-item/webhook-item.component.html","./apps/web-mzima-client/src/app/settings/webhooks/webhook-item/webhook-item.component.ts","./apps/web-mzima-client/src/app/settings/webhooks/webhooks.component.html","./apps/web-mzima-client/src/app/settings/webhooks/webhooks.component.ts","./apps/web-mzima-client/src/app/settings/webhooks/webhooks-routing.module.ts","./apps/web-mzima-client/src/app/settings/webhooks/webhooks.module.ts"],"sourcesContent":["<h1 *ngIf=\"isDesktop\">\n  {{ (isCreateWebhook ? 'app.add_webhook' : 'app.edit_webhook') | translate }}\n</h1>\n\n<form class=\"form\" *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"save()\" novalidate>\n  <div class=\"form-row\">\n    <mat-label>{{ 'webhook.name' | translate }} <span class=\"color-accent\">*</span></mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.webhooks.placeholder.name' | translate }}\"\n        formControlName=\"name\"\n        required\n      />\n      <mat-error *ngIf=\"form.get('name')?.hasError('required')\">{{\n        'settings.webhooks.validation.required.name' | translate\n      }}</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>\n      {{ 'webhook.shared_secret' | translate }} <span class=\"color-accent\">*</span>\n    </mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.webhooks.placeholder.shared_secret' | translate }}\"\n        formControlName=\"shared_secret\"\n        required\n      />\n      <mat-error *ngIf=\"form.get('shared_secret')?.hasError('required')\">\n        {{ 'settings.webhooks.validation.required.shared_secret' | translate }}\n      </mat-error>\n      <mat-error *ngIf=\"form.get('shared_secret')?.hasError('minlength')\">\n        {{ 'settings.webhooks.validation.secret_key_cannot_be_less_start' | translate }}\n        {{ form.get('shared_secret')?.errors?.['minlength']['requiredLength'] }}\n        {{ 'settings.webhooks.validation.secret_key_cannot_be_less_end' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>{{ 'webhook.url' | translate }} <span class=\"color-accent\">*</span></mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        placeholder=\"{{ 'settings.webhooks.placeholder.api_url' | translate }}\"\n        formControlName=\"url\"\n        required\n      />\n      <mat-error *ngIf=\"form.get('url')?.hasError('required')\">{{\n        'settings.webhooks.validation.required.api_url' | translate\n      }}</mat-error>\n      <mat-error *ngIf=\"form.get('url')?.hasError('pattern')\">\n        {{ 'settings.webhooks.validation.please_provide_valid_api_url' | translate }}\n      </mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>\n      {{ 'webhook.event_type' | translate }} <span class=\"color-accent\">*</span>\n    </mat-label>\n    <mat-form-field appearance=\"outline\">\n      <mat-select\n        formControlName=\"event_type\"\n        disableOptionCentering\n        [data-qa]=\"'webhook-event-select'\"\n      >\n        <mat-option *ngFor=\"let event of eventList\" [value]=\"event.value\" [data-qa]=\"event.value\">\n          {{ event.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"form.get('event_type')?.invalid\">{{\n        'settings.webhooks.validation.required.event_type' | translate\n      }}</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <mat-label>\n      {{ 'webhook.entity_type' | translate }} <span class=\"color-accent\">*</span>\n    </mat-label>\n    <mat-form-field appearance=\"outline\">\n      <mat-select\n        formControlName=\"entity_type\"\n        disableOptionCentering\n        [data-qa]=\"'webhook-entity-select'\"\n      >\n        <mat-option\n          *ngFor=\"let entity of entityList\"\n          [value]=\"entity.value\"\n          [data-qa]=\"entity.value\"\n        >\n          {{ entity.name }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"form.get('entity_type')?.invalid\">{{\n        'settings.webhooks.validation.required.event_entity' | translate\n      }}</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-row\">\n    <div class=\"toggle\">\n      <mat-slide-toggle\n        formControlName=\"is_source_destination\"\n        name=\"first-name\"\n        [data-qa]=\"'source-destination-toogle'\"\n      >\n        {{ 'settings.webhooks.enable_source_destination' | translate }}\n      </mat-slide-toggle>\n    </div>\n  </div>\n\n  <div class=\"source-destination-wrapper\" *ngIf=\"form.get('is_source_destination')?.value\">\n    <p>{{ 'settings.webhooks.enable_source_destination_desc' | translate }}</p>\n    <div class=\"form-row\">\n      <mat-label>\n        {{ 'settings.webhooks.use_webhook_for' | translate }}\n        <span *ngIf=\"!form.get('form_id')?.value\">\n          <strong>{{ 'data_import.which_survey' | translate }}</strong>\n        </span>\n      </mat-label>\n      <mat-form-field appearance=\"outline\">\n        <mat-select formControlName=\"form_id\" disableOptionCentering [data-qa]=\"'survey-select'\">\n          <mat-option *ngFor=\"let survey of surveyList\" [value]=\"survey.id\" [data-qa]=\"survey.name\">\n            {{ survey.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-row\" *ngIf=\"form.get('form_id')?.value\">\n      <h2>{{ 'survey.choose_survey_field' | translate }}</h2>\n      <p>\n        {{\n          'survey.choose_survey_field_desc'\n            | translate : { datasource_type: getSurveyName(form.get('form_id')?.value) }\n        }}\n      </p>\n\n      <table mat-table [dataSource]=\"fields\" class=\"webhook__table\" *ngIf=\"fields\">\n        <ng-container matColumnDef=\"type\">\n          <th mat-header-cell *matHeaderCellDef>Type</th>\n          <td mat-cell *matCellDef=\"let element\">\n            {{ element.name }}\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"field\">\n          <th mat-header-cell *matHeaderCellDef>{{ 'survey.survey_field' | translate }}</th>\n          <td mat-cell *matCellDef=\"let element\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\">\n                <mat-select\n                  [formControlName]=\"element.control\"\n                  disableOptionCentering\n                  [data-qa]=\"'source-select'\"\n                >\n                  <mat-option\n                    *ngFor=\"let attribute of surveyAttributesList\"\n                    [value]=\"attribute.key\"\n                    [data-qa]=\"attribute.key\"\n                  >\n                    {{ attribute.label }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"['type', 'field']\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['type', 'field']\"></tr>\n      </table>\n    </div>\n  </div>\n\n  <div class=\"form-controls-spacer\" *ngIf=\"!isDesktop\"></div>\n  <div class=\"form-controls-panel form-controls-panel--sticky\">\n    <div>\n      <mzima-client-button\n        color=\"danger\"\n        [data-qa]=\"'btn-webhook-delete'\"\n        (buttonClick)=\"openDialog()\"\n        *ngIf=\"!isCreateWebhook\"\n        [disabled]=\"!form.get('id')?.value\"\n        [iconOnly]=\"!isDesktop\"\n        class=\"delete-btn\"\n      >\n        <ng-container *ngIf=\"isDesktop\">{{ 'app.delete' | translate }}</ng-container>\n        <mat-icon *ngIf=\"!isDesktop\" icon svgIcon=\"delete\"></mat-icon>\n      </mzima-client-button>\n    </div>\n    <div>\n      <mzima-client-button\n        type=\"button\"\n        fill=\"outline\"\n        color=\"secondary\"\n        (buttonClick)=\"cancel()\"\n        [data-qa]=\"'btn-webhook-cancel'\"\n      >\n        {{ 'app.cancel' | translate }}\n      </mzima-client-button>\n      <mzima-client-button\n        type=\"submit\"\n        [disabled]=\"form.invalid || submitted\"\n        [data-qa]=\"'btn-webhook-save'\"\n      >\n        {{ (isCreateWebhook ? 'app.save' : 'app.edit') | translate }}\n      </mzima-client-button>\n    </div>\n  </div>\n</form>\n","import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { regexHelper, takeUntilDestroy$ } from '@helpers';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BreakpointService, ConfirmModalService } from '@services';\nimport {\n  FormsService,\n  SurveysService,\n  WebhooksService,\n  FormAttributeInterface,\n  SurveyItem,\n  WebhookResultInterface,\n} from '@mzima-client/sdk';\nimport { Observable } from 'rxjs';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-webhook-item',\n  templateUrl: './webhook-item.component.html',\n  styleUrls: ['./webhook-item.component.scss'],\n})\nexport class WebhookItemComponent implements OnInit {\n  private isDesktop$: Observable<boolean>;\n  private webhook: WebhookResultInterface;\n  public form: FormGroup;\n  public eventList = [\n    { name: 'Create', value: 'create' },\n    { name: 'Update', value: 'update' },\n  ];\n  public entityList = [{ name: 'Post', value: 'post' }];\n  public surveyList: SurveyItem[] = [];\n  public surveyAttributesList: FormAttributeInterface[] = [];\n  private controlFormIdData$: Observable<any>;\n  public isCreateWebhook = false;\n  public fields: any[];\n  public isDesktop = false;\n  public submitted = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private webhooksService: WebhooksService,\n    private formBuilder: FormBuilder,\n    private surveysService: SurveysService,\n    private formsService: FormsService,\n    private router: Router,\n    private confirmModalService: ConfirmModalService,\n    private translate: TranslateService,\n    private breakpointService: BreakpointService,\n    private location: Location,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$.pipe(untilDestroyed(this));\n    this.isDesktop$.subscribe({\n      next: (isDesktop) => {\n        this.isDesktop = isDesktop;\n      },\n    });\n    this.form = this.formBuilder.group({\n      allowed_privileges: [''],\n      created: [''],\n      destination_field_key: [null],\n      entity_type: ['', [Validators.required]],\n      event_type: ['', [Validators.required]],\n      form_id: [null],\n      id: [0],\n      name: ['', [Validators.required]],\n      shared_secret: ['', [Validators.required, Validators.minLength(20)]],\n      source_field_key: [null],\n      updated: [''],\n      url: ['', [Validators.required, Validators.pattern(regexHelper.urlValidate())]],\n      user: [''],\n      webhook_uuid: [''],\n      is_source_destination: [false],\n    });\n    this.controlFormIdData$ = this.form.controls['form_id'].valueChanges.pipe(takeUntilDestroy$());\n  }\n\n  ngOnInit(): void {\n    this.getSurveys();\n    const webhookId = this.route.snapshot.paramMap.get('id');\n    if (webhookId === 'create') {\n      this.isCreateWebhook = true;\n    } else {\n      this.getWebhook(webhookId!);\n    }\n\n    if (this.form.controls['form_id'].value)\n      this.getSurveyAttributes(this.form.controls['form_id'].value);\n\n    this.controlFormIdData$.subscribe({\n      next: (surveyId) => {\n        if (surveyId) this.getSurveyAttributes(surveyId);\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  private getWebhook(id: string) {\n    this.webhooksService.getById(id).subscribe({\n      next: (webhook) => {\n        this.webhook = webhook.result;\n        this.fillInForm(webhook.result);\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  private fillInForm(data: any): void {\n    Object.keys(data).forEach((name) => {\n      if (this.form.controls[name]) {\n        this.form.controls[name].patchValue(data[name]);\n      }\n    });\n    this.form.controls['is_source_destination'].patchValue(!!this.form.controls['form_id'].value);\n  }\n\n  private getSurveys(): void {\n    this.surveysService.get().subscribe({\n      next: (response) => {\n        this.surveyList = response.results;\n        this.fields = [\n          {\n            name: 'Source',\n            control: 'source_field_key',\n          },\n          {\n            name: this.translate.instant('settings.webhooks.destination'),\n            control: 'destination_field_key',\n          },\n        ];\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  private getSurveyAttributes(id: number): void {\n    this.formsService.getAttributes(id.toString()).subscribe({\n      next: (response) => {\n        this.surveyAttributesList = response;\n        this.fillInForm({\n          destination_field_key: this.checkKeyFields(this.webhook?.destination_field_key!),\n          source_field_key: this.checkKeyFields(this.webhook?.source_field_key!),\n        });\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  private checkKeyFields(field: string): any {\n    if (field === 'title' || field === 'content') {\n      return this.filterAttributes('type', field === 'title' ? field : 'description')?.key;\n    } else if (field) {\n      return field.replace(/values./gi, '');\n    }\n  }\n\n  private filterAttributes(param: string, value: string) {\n    return this.surveyAttributesList.find((el: any) => el[param] === value);\n  }\n\n  private fillForApi(obj: any): string {\n    if (obj.type === 'title' || obj.type === 'description') {\n      return obj.type === 'title' ? obj.type : 'content';\n    } else {\n      return `values.${obj.key}`;\n    }\n  }\n\n  public save() {\n    this.submitted = true;\n    if (this.form.value.is_source_destination) {\n      this.fillInForm({\n        destination_field_key: this.fillForApi(\n          this.filterAttributes('key', this.form.controls['destination_field_key'].value),\n        ),\n        source_field_key: this.fillForApi(\n          this.filterAttributes('key', this.form.controls['source_field_key'].value),\n        ),\n      });\n    }\n    this.deleteFormFields(['is_source_destination']);\n    this.isCreateWebhook ? this.postWebhook() : this.updateWebhook();\n  }\n\n  private postWebhook() {\n    this.deleteFormFields(['id', 'created', 'updated', 'allowed_privileges', 'user']);\n    this.webhooksService.post(this.form.value).subscribe({\n      next: () => this.navigateToWebhooks(),\n      error: (err) => {\n        console.log(err);\n        this.submitted = false;\n      },\n    });\n  }\n\n  private updateWebhook() {\n    this.webhooksService.update(this.form.controls['id'].value, this.form.value).subscribe({\n      next: () => this.navigateToWebhooks(),\n      error: (err) => {\n        console.log(err);\n        this.submitted = false;\n      },\n    });\n  }\n\n  public cancel() {\n    this.navigateToWebhooks();\n  }\n\n  private navigateToWebhooks() {\n    this.webhooksService.setState(true);\n    if (this.isDesktop) {\n      this.router.navigate(['/settings/webhooks']);\n    } else {\n      this.location.back();\n    }\n  }\n\n  private deleteFormFields(fields: Array<string>) {\n    for (const field of fields) {\n      delete this.form.value[field];\n    }\n  }\n\n  public async openDialog(): Promise<void> {\n    const confirmed = await this.confirmModalService.open({\n      title: this.form.controls['name'].value + ' webhook will be deleted!',\n      description: '<p>This action cannot be undone.</p><p>Are you sure?</p>',\n    });\n\n    if (!confirmed) return;\n    this.deleteWebhook();\n  }\n\n  public deleteWebhook() {\n    this.webhooksService.delete(this.form.controls['id'].value).subscribe({\n      next: () => this.navigateToWebhooks(),\n      error: (err) => console.log(err),\n    });\n  }\n\n  public getSurveyName(id: number): string {\n    return this.surveyList.find((survey) => survey.id === id)?.name || '';\n  }\n}\n","<ng-container *ngIf=\"webhookList\">\n  <div class=\"form-head-panel\">\n    <h1 *ngIf=\"isDesktop$ | async\">{{ 'app.webhooks' | translate }}</h1>\n    <mzima-client-button [routerLink]=\"['create']\" [data-qa]=\"'btn-webhook-create'\">\n      <span>{{ 'webhook.add_webhook' | translate }}</span>\n      <mat-icon icon svgIcon=\"plus\"></mat-icon>\n    </mzima-client-button>\n  </div>\n\n  <div class=\"webhook-item-list\" [data-qa]=\"'webhook-list'\">\n    <a\n      mat-ripple\n      class=\"webhook-item\"\n      *ngFor=\"let webhook of webhookList\"\n      [routerLink]=\"[webhook.id]\"\n      [routerLinkActive]=\"'active'\"\n      [data-qa]=\"webhook.name\"\n    >\n      {{ webhook.name }}\n    </a>\n  </div>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { takeUntilDestroy$ } from '@helpers';\nimport { WebhooksService, WebhookResultInterface } from '@mzima-client/sdk';\nimport { Observable } from 'rxjs';\nimport { BreakpointService } from '@services';\n\n@Component({\n  selector: 'app-webhooks',\n  templateUrl: './webhooks.component.html',\n  styleUrls: ['./webhooks.component.scss'],\n})\nexport class WebhooksComponent implements OnInit {\n  public webhookList: WebhookResultInterface[] = [];\n  public webhookState$: Observable<any>;\n  public isDesktop$: Observable<boolean>;\n\n  constructor(\n    private webhooksService: WebhooksService,\n    private breakpointService: BreakpointService,\n  ) {\n    this.isDesktop$ = this.breakpointService.isDesktop$.pipe(takeUntilDestroy$());\n    this.webhookState$ = this.webhooksService.changeWebhookState$.pipe(takeUntilDestroy$());\n  }\n\n  ngOnInit() {\n    this.getWebhookList();\n    this.webhookState$.subscribe({\n      next: (value) => {\n        if (value) this.getWebhookList();\n      },\n      error: (err) => console.log(err),\n    });\n  }\n\n  getWebhookList() {\n    this.webhooksService.get().subscribe({\n      next: (response) => {\n        this.webhookList = response.results;\n        this.webhooksService.setState(false);\n      },\n      error: (err: any) => console.log(err),\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WebhookItemComponent } from './webhook-item/webhook-item.component';\nimport { WebhooksComponent } from './webhooks.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WebhooksComponent,\n  },\n  {\n    path: ':id',\n    component: WebhookItemComponent,\n    data: { breadcrumb: 'Update webhook' },\n  },\n  { path: 'create', component: WebhookItemComponent, data: { breadcrumb: 'Create webhook' } },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class WebhooksRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule } from '@shared';\nimport { WebhooksRoutingModule } from './webhooks-routing.module';\nimport { WebhooksComponent } from './webhooks.component';\nimport { WebhookItemComponent } from './webhook-item/webhook-item.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [WebhooksComponent, WebhookItemComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    WebhooksRoutingModule,\n    MatButtonModule,\n    DirectiveModule,\n    MatIconModule,\n    MatRippleModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatTableModule,\n    MzimaUiModule,\n  ],\n})\nexport class WebhooksModule {}\n"],"x_google_ignoreList":[]}