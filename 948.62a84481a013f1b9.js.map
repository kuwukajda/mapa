{"version":3,"file":"948.62a84481a013f1b9.js","mappings":"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","names":["SortByFieldPipe","transform","array","field","order","sort","a","b","pure","i0","$event","PostHeadComponent","BaseComponent","sessionService","breakpointService","postsService","dialog","confirmModalService","translate","eventBusService","snackBar","PostStatus","post","editable","feedView","deleteable","edit","EventEmitter","refresh","deleted","statusChanged","constructor","super","this","checkDesktop","getUserData","loadData","addToCollection","open","CollectionsComponent","width","maxWidth","data","panelClass","afterClosed","subscribe","next","response","emit","console","log","underReview","updateStatus","id","res","result","publish","postHelpers","showMessage","instant","archive","deletePost","_this","title","delete","description","count","buttonSuccess","editPost","event","stopPropagation","type","payload","allowed_privileges","includes","sharePost","ShareModalComponent","postId","content","label","message","duration","selectors","ctx","PostMetadataComponent","author","ngOnInit","getUsername","user","realname","contact","author_realname","_r9","ctx_r8","day_r1","_r5","ctx_r4","ctx_r6","ctx_r7","ctx_r10","ctx_r11","_r13","ctx_r12","ctx_r14","ctx_r15","_r10","ctx_r9","_r12","ctx_r13","_r15","change","ctx_r18","_r20","ctx_r19","_r26","ctx_r25","_r28","ctx_r27","ctx_r29","_r7","NGX_MAT_DATE_FORMATS","InjectionToken","NgxMatCalendarCell","value","displayValue","ariaLabel","enabled","cssClasses","compareValue","rawValue","NgxMatCalendarBody","_elementRef","_ngZone","numCols","activeCell","isRange","cellAspectRatio","previewStart","previewEnd","selectedValueChange","previewChange","_enterHandler","_skipNextFocus","target","cell","_getCellFromElement","run","_leaveHandler","isTableCell","runOutsideAngular","element","nativeElement","addEventListener","_cellClicked","_isSelected","startValue","endValue","ngOnChanges","changes","columnChanges","rows","_firstRowOffset","length","_cellPadding","_cellWidth","ngOnDestroy","removeEventListener","_isActiveCell","rowIndex","colIndex","cellNumber","_focusActiveCell","movePreview","onStable","asObservable","pipe","take","querySelector","focus","_isRangeStart","isStart","_isRangeEnd","isEnd","_isInRange","isInRange","_isComparisonStart","comparisonStart","comparisonEnd","_isComparisonBridgeStart","previousCell","previousRow","_isComparisonBridgeEnd","_isComparisonEnd","nextCell","nextRow","_isInComparisonRange","_isPreviewStart","_isPreviewEnd","_isInPreview","parentNode","row","getAttribute","col","parseInt","ɵfac","ɵcmp","attrs","i1","styles","node","nodeName","start","end","rangeEnabled","NgxMatDateAdapter","DateAdapter","isSameTime","getHour","getMinute","getSecond","copyTime","toDate","fromDate","setHour","setMinute","setSecond","compareDateWithTime","first","second","showSeconds","compareDate","setTimeByDefaultValues","date","defaultTime","Array","isArray","Error","NGX_MAT_DATE_RANGE_SELECTION_STRATEGY","DefaultNgxMatCalendarRangeStrategy","_dateAdapter","selectionFinished","currentRange","DateRange","createPreview","activeDate","ɵprov","factory","LIMIT_TIMES","minHour","maxHour","minMinute","maxMinute","minSecond","maxSecond","meridian","NUMERIC_REGEX","PATTERN_INPUT_HOUR","PATTERN_INPUT_MINUTE","PATTERN_INPUT_SECOND","formatTwoDigitTimeValue","val","txt","toString","createMissingDateImplError","provider","NgxMatMonthView","_changeDetectorRef","_dateFormats","_dir","_rangeStrategy","_rerenderSubscription","Subscription","selectedChange","_userSelection","activeDateChange","_activeDate","today","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","selected","_selected","_setRanges","_minDate","_maxDate","ngAfterContentInit","localeChanges","startWith","unsubscribe","_dateSelected","selectedYear","getYear","selectedMonth","getMonth","selectedDate","createDate","rangeStartDate","rangeEndDate","_getDateInCurrentMonth","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","altKey","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","ESCAPE","_previewEnd","_previewStart","_todayDate","_getCellCompareValue","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","markForCheck","_matCalendarBody","_previewChanged","previewRange","detectChanges","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","_weekdays","slice","concat","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","format","display","dateA11yLabel","cellClasses","dateClass","undefined","d1","d2","year","month","day","Date","getTime","obj","isDateInstance","isValid","selectedValue","_rangeStart","_rangeEnd","_isRange","_comparisonRangeStart","_comparisonRangeEnd","i2","_t","encapsulation","yearsPerPage","NgxMatMultiYearView","yearSelected","isSameMultiYearView","_setSelectedYear","_todayYear","minYearOfPage","getActiveOffset","_years","_createCellForYear","_yearSelected","Math","min","_getActiveCell","yearName","getYearName","_shouldEnableYear","_selectedYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","euclideanModulo","NgxMatYearView","monthSelected","_setSelectedMonth","_monthSelected","normalizedDate","_todayMonth","_getMonthInCurrentYear","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_selectedMonth","NgxMatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","periodButtonText","currentView","monthYearLabel","maxYearOfPage","formatYearRange","periodButtonLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevButtonLabel","prevMonthLabel","prevYearLabel","prevMultiYearLabel","nextButtonLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","i1$1","forwardRef","NgxMatCalendar","i3","_moveFocusOnNextTick","startView","Subject","_intlChanges","startAt","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","ComponentPortal","headerComponent","ngAfterViewChecked","focusActiveCell","complete","firstChange","view","_getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","decls","i5","NgxMatTimepickerComponent","cd","formBuilder","disabled","showSpinners","stepHour","stepMinute","stepSecond","disableMinute","enableMeridian","color","_onChange","_onTouched","_destroyed","pattern","form","group","hour","Validators","minute","Number","controls","isNaN","valid","valueChanges","takeUntil","debounceTime","_updateModel","_setDisableStates","writeValue","_model","_updateHourMinuteSecond","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_disabled","formatInput","input","replace","toggleMeridian","prop","up","_getNextValueByProp","setValue","onlySelf","emitEvent","_hour","_minute","_second","keyProp","toUpperCase","max","disable","enable","get","i2$1","provide","NG_VALUE_ACCESSOR","useExisting","multi","i2$2","i5$1","i6","datepickerUid","_MatDatetimepickerContentBase","mixinColor","NgxMatDatetimeContent","elementRef","_viewContainerRef","datepicker","hideTime","_timePicker","isViewMonth","_calendar","ngAfterViewInit","_customIcon","_templateCustomIconPortal","TemplatePortal","matDatepickerAnimations","changeDetection","NgxMatDatetimePicker","_dialog","_overlay","scrollStrategy","_document","_defaultColor","_touchUi","_hideTime","openedStream","closedStream","_opened","_showSpinners","_showSeconds","_stepHour","_stepMinute","_stepSecond","_enableMeridian","_hasBackdrop","_validSelected","_focusedElementBeforeOpen","_inputSubscription","_selectedChanged","_minValidator","matDatetimePickerMin","actual","_maxValidator","matDatetimePickerMax","_scrollStrategy","datepickerInput","defaultColor","_color","_getThemePalette","touchUi","coerceBooleanProperty","newValue","opened","close","_disableMinute","_defaultTime","minValidators","maxValidators","_dateFilter","_popupRef","dispose","_popupComponentRef","select","_selectYear","_selectMonth","ok","cloned","clone","cancel","_rawValue","_registerInput","_valueChange","activeElement","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","hasBackdrop","componentInstance","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","backdropClass","create","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","i8","i9","MAT_DATEPICKER_SCROLL_STRATEGY","DOCUMENT","dirIndex","TemplateRef","MAT_DATEPICKER_VALUE_ACCESSOR","NgxMatDatetimeInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatetimePickerInputEvent","targetElement","SUPPORTS_INTL_API","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatetimePickerParse","text","control","controlValue","_datepicker","_filterValidator","matDatetimePickerFilter","_validator","ngxMatDatetimePicker","ngxMatDatetimePickerFilter","_value","oldDate","_formatValue","_min","_max","blur","registerOnValidatorChange","validate","c","getPopupConnectionElementRef","_onKeydown","readOnly","_onInput","lastValueWasValid","parse","_onBlur","_onFocus","ɵdir","MAT_INPUT_VALUE_ACCESSOR","NgxMatTimepickerModule","ɵmod","ɵinj","CommonModule","MatInputModule","ReactiveFormsModule","FormsModule","MatIconModule","MatButtonModule","NgxMatDatetimePickerModule","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","useClass","imports","MatDatepickerModule","MatDialogModule","PortalModule","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NgxMatNativeDateAdapter","matDateLocale","platform","useUtcForDisplay","setLocale","TRIDENT","_clampDate","EDGE","getFullYear","getDay","style","dtf","DateTimeFormat","locale","timeZone","_stripDirectionalityCharacters","_format","weekday","_createDateWithOverflow","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","invalid","NaN","getHours","getMinutes","getSeconds","setHours","setMinutes","setSeconds","n","str","d","setUTCFullYear","setUTCHours","getMilliseconds","MAT_DATE_LOCALE","i1$2","DEFAULT_DATE_INPUT","hour12","NGX_MAT_NATIVE_DATE_FORMATS","NgxNativeDateModule","PlatformModule","NgxMatNativeDateModule","useValue","MatGridListModule","MatLineModule","MatCommonModule","routes","path","pathMatch","redirectTo","component","PostEditComponent","breadcrumb","canActivate","RedirectGuard","PostRoutingModule","RouterModule","ImageUploaderComponent","sanitizer","confirm","hasCaption","maxSizeError","requiredError","captionControl","FormControl","photo","preview","upload","onChange","onTouched","patchValue","caption","onFileSelected","inputElement","files","formHelper","bypassSecurityTrustUrl","URL","createObjectURL","deletePhoto","captionChanged","PostModule","LeafletModule","TranslateModule","SpinnerModule","MatRippleModule","DirectiveModule","MatFormFieldModule","MatTooltipModule","MapWithMarkerModule","MatSlideToggleModule","MatCheckboxModule","MatNativeDateModule","MatRadioModule","MatListModule","MatSelectModule","MatMenuModule","PipeModule","MzimaUiModule","SortByFieldModule","NgxPaginationModule","LocationSelectComponent","PostDetailsComponent","TwitterWidgetComponent","PostConversationComponent","twitterService","tweet","loadingFailed","isTwitterScriptLoading","isTwitterFailed","_loadTwitterScript","loadScript","twitterData","_updateTwitterScriptLoadingState","widgets","createTweet","then"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/core/pipes/sort-by/sort-by.pipe.ts","./apps/web-mzima-client/src/app/post/post-head/post-head.component.html","./apps/web-mzima-client/src/app/post/post-head/post-head.component.ts","./apps/web-mzima-client/src/app/post/post-metadata/post-metadata.component.html","./apps/web-mzima-client/src/app/post/post-metadata/post-metadata.component.ts","./node_modules/@angular-material-components/datetime-picker/fesm2020/angular-material-components-datetime-picker.mjs","./node_modules/@angular/material/fesm2020/grid-list.mjs","./apps/web-mzima-client/src/app/post/post-routing.module.ts","./apps/web-mzima-client/src/app/post/image-uploader/image-uploader.component.html","./apps/web-mzima-client/src/app/post/image-uploader/image-uploader.component.ts","./apps/web-mzima-client/src/app/post/post.module.ts","./apps/web-mzima-client/src/app/post/twitter-widget/twitter-widget.component.html","./apps/web-mzima-client/src/app/post/twitter-widget/twitter-widget.component.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'sortByField',\n})\nexport class SortByFieldPipe implements PipeTransform {\n  transform(array: any[], field: string, order: string = 'asc'): any[] {\n    array.sort((a: any, b: any) => {\n      if (a[field] < b[field]) {\n        return order === 'asc' ? -1 : 1;\n      } else if (a[field] > b[field]) {\n        return order === 'asc' ? 1 : -1;\n      } else {\n        return 0;\n      }\n    });\n    return array;\n  }\n}\n","<div class=\"post-head\">\n  <mzima-client-button\n    fill=\"clear\"\n    color=\"gray\"\n    tabindex=\"-1\"\n    *ngIf=\"editable\"\n    [iconOnly]=\"true\"\n    (buttonClick)=\"editPost($event)\"\n    class=\"post-head__control\"\n  >\n    <mat-icon icon svgIcon=\"edit-post\" [data-qa]=\"'edit-post'\"></mat-icon>\n  </mzima-client-button>\n\n  <mzima-client-button\n    fill=\"clear\"\n    color=\"gray\"\n    tabindex=\"-1\"\n    [iconOnly]=\"true\"\n    (buttonClick)=\"sharePost()\"\n    class=\"post-head__control post-head__control--share\"\n  >\n    <mat-icon icon svgIcon=\"share\" [data-qa]=\"'share-post'\" [attr.post]=\"post.id\"></mat-icon>\n  </mzima-client-button>\n  <mzima-client-button\n    *ngIf=\"!!user?.userId\"\n    fill=\"clear\"\n    color=\"gray\"\n    tabindex=\"-1\"\n    [iconOnly]=\"true\"\n    (click)=\"$event.stopPropagation()\"\n    class=\"post-head__control post-head__control--dots\"\n    [matMenuTriggerFor]=\"actions\"\n  >\n    <mat-icon icon svgIcon=\"dots\" [data-qa]=\"'post-menu'\"></mat-icon>\n  </mzima-client-button>\n\n  <mat-menu #actions=\"matMenu\" xPosition=\"before\">\n    <button\n      *ngIf=\"\n        user?.permissions?.includes('Manage Posts') ||\n        user?.permissions?.includes('Manage Collections and Saved Searches')\n      \"\n      mat-menu-item\n      (click)=\"addToCollection()\"\n      [data-qa]=\"'add-to-collection'\"\n    >\n      <mat-icon svgIcon=\"collections\"></mat-icon>\n      {{ 'set.add_to_collection' | translate }}\n    </button>\n    <ng-container *ngIf=\"post.allowed_privileges?.includes('change_status')\">\n      <hr />\n      <button\n        mat-menu-item\n        (click)=\"publish()\"\n        *ngIf=\"post.status !== PostStatus.Published\"\n        [data-qa]=\"'btn-publish-post'\"\n      >\n        <mat-icon svgIcon=\"sort-up\"></mat-icon>\n        {{ 'post.post_actions.publish' | translate }}\n      </button>\n      <button\n        mat-menu-item\n        (click)=\"underReview()\"\n        *ngIf=\"post.status !== PostStatus.Draft\"\n        [data-qa]=\"'btn-underReview-post'\"\n      >\n        {{ 'post.post_actions.put_under_review' | translate }}\n      </button>\n      <button\n        mat-menu-item\n        (click)=\"archive()\"\n        *ngIf=\"post.status !== PostStatus.Archived\"\n        [data-qa]=\"'btn-archive-post'\"\n      >\n        {{ 'post.post_actions.archive' | translate }}\n      </button>\n    </ng-container>\n    <button mat-menu-item *ngIf=\"deleteable\" (click)=\"deletePost()\" [data-qa]=\"'btn-delete-post'\">\n      {{ 'post.post_actions.delete' | translate }}\n    </button>\n  </mat-menu>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { CollectionsComponent } from '../../shared/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BreakpointService, EventBusService, EventType, SessionService } from '@services';\nimport { BaseComponent } from '../../base.component';\nimport { ShareModalComponent } from '../../shared/components';\nimport {\n  PostPropertiesInterface,\n  PostResult,\n  PostsService,\n  PostStatus,\n  postHelpers,\n} from '@mzima-client/sdk';\nimport { ConfirmModalService } from '../../core/services/confirm-modal.service';\n\n@Component({\n  selector: 'app-post-head',\n  templateUrl: './post-head.component.html',\n  styleUrls: ['./post-head.component.scss'],\n})\nexport class PostHeadComponent extends BaseComponent {\n  PostStatus = PostStatus;\n  @Input() public post: PostResult | PostPropertiesInterface;\n  @Input() public editable: boolean;\n  @Input() public feedView: boolean;\n  @Input() public deleteable: boolean;\n  @Output() edit = new EventEmitter();\n  @Output() refresh = new EventEmitter();\n  @Output() deleted = new EventEmitter();\n  @Output() statusChanged = new EventEmitter();\n\n  constructor(\n    protected override sessionService: SessionService,\n    protected override breakpointService: BreakpointService,\n    private postsService: PostsService,\n    private dialog: MatDialog,\n    private confirmModalService: ConfirmModalService,\n    private translate: TranslateService,\n    private eventBusService: EventBusService,\n    private snackBar: MatSnackBar,\n  ) {\n    super(sessionService, breakpointService);\n    this.checkDesktop();\n    this.getUserData();\n  }\n\n  loadData(): void {}\n\n  addToCollection() {\n    const dialogRef = this.dialog.open(CollectionsComponent, {\n      width: '100%',\n      maxWidth: '768px',\n      data: this.post,\n      panelClass: 'modal',\n    });\n\n    dialogRef.afterClosed().subscribe({\n      next: (response) => {\n        this.refresh.emit();\n        response ? console.log(response) : null;\n      },\n    });\n  }\n\n  underReview() {\n    this.postsService.updateStatus(this.post.id, PostStatus.Draft).subscribe((res) => {\n      this.post = res.result;\n      this.statusChanged.emit();\n    });\n  }\n\n  publish() {\n    if (postHelpers.isAllRequiredCompleted(this.post)) {\n      this.postsService.updateStatus(this.post.id, PostStatus.Published).subscribe((res) => {\n        this.post = res.result;\n        this.statusChanged.emit();\n      });\n    } else {\n      this.showMessage(this.translate.instant('notify.post.unfinished_post_task'), 'error', 5000);\n    }\n  }\n\n  archive() {\n    this.postsService.updateStatus(this.post.id, PostStatus.Archived).subscribe((res) => {\n      this.post = res.result;\n      this.statusChanged.emit();\n    });\n  }\n\n  async deletePost() {\n    const confirmed = await this.confirmModalService.open({\n      title: this.translate.instant('notify.post.destroy_confirm'),\n    });\n    if (!confirmed) return;\n\n    this.postsService.delete(this.post.id).subscribe((res) => {\n      this.post = res;\n      this.deleted.emit();\n      this.confirmModalService.open({\n        title: this.translate.instant('notify.confirm_modal.deleted.success'),\n        description: `<p>${this.translate.instant(\n          'notify.confirm_modal.deleted.success_description',\n          { count: '1 post' },\n        )}</p>`,\n        buttonSuccess: this.translate.instant('notify.confirm_modal.deleted.success_button'),\n      });\n    });\n  }\n\n  public editPost(event: Event) {\n    event.stopPropagation();\n    if (this.feedView) {\n      this.eventBusService.next({\n        type: EventType.EditPost,\n        payload: this.post,\n      });\n    } else {\n      if (this.post.allowed_privileges.includes('update')) this.edit.emit();\n    }\n  }\n  public sharePost() {\n    event?.stopPropagation();\n    this.dialog.open(ShareModalComponent, {\n      width: '100%',\n      maxWidth: 564,\n      panelClass: 'modal',\n      data: {\n        postId: this.post.id,\n        title: this.post.title,\n        description: this.post.content,\n        label: this.translate.instant('share.share_post'),\n      },\n    });\n  }\n\n  private showMessage(message: string, type: string, duration = 3000) {\n    this.snackBar.open(message, 'Close', {\n      panelClass: [type],\n      duration,\n    });\n  }\n}\n","<span class=\"post__border\"></span>\n\n<div class=\"post-info\">\n  <div class=\"post-info__visual\">\n    <img\n      [alt]=\"post.user?.realname\"\n      src=\"//www.gravatar.com/avatar/{{\n        post.user?.gravatar || '00000000000000000000000000000000'\n      }}?d=retro&s=40\"\n    />\n  </div>\n  <div class=\"post-info__content\">\n    <span *ngIf=\"author\" class=\"post-info__username\" [data-qa]=\"'author'\">\n      {{ author }}\n    </span>\n\n    <div class=\"post-info__list\">\n      <span class=\"post-info__item\" [data-qa]=\"'post-date'\">\n        {{ post.post_date | dateAgo }}\n      </span>\n\n      <div class=\"post-info__item\">\n        <span\n          class=\"post-info__status\"\n          [ngClass]=\"{\n            'post-info__status--published': post.status === 'published',\n            'post-info__status--draft': post.status === 'draft',\n            'post-info__status--archived': post.status === 'archived'\n          }\"\n          [data-qa]=\"'status'\"\n        >\n          <ng-container [ngSwitch]=\"post.status\">\n            <ng-container *ngSwitchCase=\"'published'\">{{\n              'post.published' | translate\n            }}</ng-container>\n            <ng-container *ngSwitchCase=\"'draft'\">{{ 'post.draft' | translate }}</ng-container>\n            <ng-container *ngSwitchCase=\"'archived'\">{{\n              'post.archived' | translate\n            }}</ng-container>\n          </ng-container>\n        </span>\n      </div>\n\n      <span class=\"post-info__item\">{{ 'post.source' | translate : { source: post.source } }}</span>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { PostPropertiesInterface, PostResult } from '@mzima-client/sdk';\n\n@Component({\n  selector: 'app-post-metadata',\n  templateUrl: './post-metadata.component.html',\n  styleUrls: ['./post-metadata.component.scss'],\n})\nexport class PostMetadataComponent implements OnInit {\n  @Input() post: PostResult | PostPropertiesInterface;\n  author: string;\n\n  ngOnInit(): void {\n    this.getUsername();\n  }\n\n  private getUsername(): void {\n    const authorNameOrContact =\n      this.post.user?.realname || this.post.contact?.contact || this.post.author_realname;\n\n    this.author = authorNameOrContact || 'Anonymous';\n  }\n}\n","import * as i5 from '@angular/cdk/portal';\nimport { ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Injectable, Optional, Inject, ViewChild, forwardRef, TemplateRef, ContentChild, Directive, NgModule } from '@angular/core';\nimport { Subscription, Subject, merge } from 'rxjs';\nimport { ESCAPE, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW } from '@angular/cdk/keycodes';\nimport { take, startWith, takeUntil, debounceTime, filter } from 'rxjs/operators';\nimport * as i1$1 from '@angular/material/datepicker';\nimport { DateRange, matDatepickerAnimations, MAT_DATEPICKER_SCROLL_STRATEGY, MatDatepickerModule, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER } from '@angular/material/datepicker';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { DateAdapter, mixinColor, MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/bidi';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i9 from '@angular/cdk/overlay';\nimport { OverlayConfig } from '@angular/cdk/overlay';\nimport * as i2$1 from '@angular/forms';\nimport { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i2$2 from '@angular/material/form-field';\nimport * as i5$1 from '@angular/material/input';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i8 from '@angular/material/dialog';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport * as i1$2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NGX_MAT_DATE_FORMATS = new InjectionToken('ngx-mat-date-formats');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nclass NgxMatCalendarCell {\r\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\r\n        this.value = value;\r\n        this.displayValue = displayValue;\r\n        this.ariaLabel = ariaLabel;\r\n        this.enabled = enabled;\r\n        this.cssClasses = cssClasses;\r\n        this.compareValue = compareValue;\r\n        this.rawValue = rawValue;\r\n    }\r\n}\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\nclass NgxMatCalendarBody {\r\n    constructor(_elementRef, _ngZone) {\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        /** The number of columns in the table. */\r\n        this.numCols = 7;\r\n        /** The cell number of the active cell in the table. */\r\n        this.activeCell = 0;\r\n        /** Whether a range is being selected. */\r\n        this.isRange = false;\r\n        /**\r\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n         * maintained even as the table resizes.\r\n         */\r\n        this.cellAspectRatio = 1;\r\n        /** Start of the preview range. */\r\n        this.previewStart = null;\r\n        /** End of the preview range. */\r\n        this.previewEnd = null;\r\n        /** Emits when a new value is selected. */\r\n        this.selectedValueChange = new EventEmitter();\r\n        /** Emits when the preview has changed as a result of a user action. */\r\n        this.previewChange = new EventEmitter();\r\n        /**\r\n         * Event handler for when the user enters an element\r\n         * inside the calendar body (e.g. by hovering in or focus).\r\n         */\r\n        this._enterHandler = (event) => {\r\n            if (this._skipNextFocus && event.type === 'focus') {\r\n                this._skipNextFocus = false;\r\n                return;\r\n            }\r\n            // We only need to hit the zone when we're selecting a range.\r\n            if (event.target && this.isRange) {\r\n                const cell = this._getCellFromElement(event.target);\r\n                if (cell) {\r\n                    this._ngZone.run(() => this.previewChange.emit({ value: cell.enabled ? cell : null, event }));\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Event handler for when the user's pointer leaves an element\r\n         * inside the calendar body (e.g. by hovering out or blurring).\r\n         */\r\n        this._leaveHandler = (event) => {\r\n            // We only need to hit the zone when we're selecting a range.\r\n            if (this.previewEnd !== null && this.isRange) {\r\n                // Only reset the preview end value when leaving cells. This looks better, because\r\n                // we have a gap between the cells and the rows and we don't want to remove the\r\n                // range just for it to show up again when the user moves a few pixels to the side.\r\n                if (event.target && isTableCell(event.target)) {\r\n                    this._ngZone.run(() => this.previewChange.emit({ value: null, event }));\r\n                }\r\n            }\r\n        };\r\n        _ngZone.runOutsideAngular(() => {\r\n            const element = _elementRef.nativeElement;\r\n            element.addEventListener('mouseenter', this._enterHandler, true);\r\n            element.addEventListener('focus', this._enterHandler, true);\r\n            element.addEventListener('mouseleave', this._leaveHandler, true);\r\n            element.addEventListener('blur', this._leaveHandler, true);\r\n        });\r\n    }\r\n    /** Called when a cell is clicked. */\r\n    _cellClicked(cell, event) {\r\n        if (cell.enabled) {\r\n            this.selectedValueChange.emit({ value: cell.value, event });\r\n        }\r\n    }\r\n    /** Returns whether a cell should be marked as selected. */\r\n    _isSelected(cell) {\r\n        return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\r\n    }\r\n    ngOnChanges(changes) {\r\n        const columnChanges = changes['numCols'];\r\n        const { rows, numCols } = this;\r\n        if (changes['rows'] || columnChanges) {\r\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\r\n        }\r\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\r\n            this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\r\n        }\r\n        if (columnChanges || !this._cellWidth) {\r\n            this._cellWidth = `${100 / numCols}%`;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        const element = this._elementRef.nativeElement;\r\n        element.removeEventListener('mouseenter', this._enterHandler, true);\r\n        element.removeEventListener('focus', this._enterHandler, true);\r\n        element.removeEventListener('mouseleave', this._leaveHandler, true);\r\n        element.removeEventListener('blur', this._leaveHandler, true);\r\n    }\r\n    /** Returns whether a cell is active. */\r\n    _isActiveCell(rowIndex, colIndex) {\r\n        let cellNumber = rowIndex * this.numCols + colIndex;\r\n        // Account for the fact that the first row may not have as many cells.\r\n        if (rowIndex) {\r\n            cellNumber -= this._firstRowOffset;\r\n        }\r\n        return cellNumber == this.activeCell;\r\n    }\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(movePreview = true) {\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n                const activeCell = this._elementRef.nativeElement.querySelector('.ngx-mat-calendar-body-active');\r\n                if (activeCell) {\r\n                    if (!movePreview) {\r\n                        this._skipNextFocus = true;\r\n                    }\r\n                    activeCell.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /** Gets whether a value is the start of the main range. */\r\n    _isRangeStart(value) {\r\n        return isStart(value, this.startValue, this.endValue);\r\n    }\r\n    /** Gets whether a value is the end of the main range. */\r\n    _isRangeEnd(value) {\r\n        return isEnd(value, this.startValue, this.endValue);\r\n    }\r\n    /** Gets whether a value is within the currently-selected range. */\r\n    _isInRange(value) {\r\n        return isInRange(value, this.startValue, this.endValue, this.isRange);\r\n    }\r\n    /** Gets whether a value is the start of the comparison range. */\r\n    _isComparisonStart(value) {\r\n        return isStart(value, this.comparisonStart, this.comparisonEnd);\r\n    }\r\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\r\n    _isComparisonBridgeStart(value, rowIndex, colIndex) {\r\n        if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\r\n            return false;\r\n        }\r\n        let previousCell = this.rows[rowIndex][colIndex - 1];\r\n        if (!previousCell) {\r\n            const previousRow = this.rows[rowIndex - 1];\r\n            previousCell = previousRow && previousRow[previousRow.length - 1];\r\n        }\r\n        return previousCell && !this._isRangeEnd(previousCell.compareValue);\r\n    }\r\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\r\n    _isComparisonBridgeEnd(value, rowIndex, colIndex) {\r\n        if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\r\n            return false;\r\n        }\r\n        let nextCell = this.rows[rowIndex][colIndex + 1];\r\n        if (!nextCell) {\r\n            const nextRow = this.rows[rowIndex + 1];\r\n            nextCell = nextRow && nextRow[0];\r\n        }\r\n        return nextCell && !this._isRangeStart(nextCell.compareValue);\r\n    }\r\n    /** Gets whether a value is the end of the comparison range. */\r\n    _isComparisonEnd(value) {\r\n        return isEnd(value, this.comparisonStart, this.comparisonEnd);\r\n    }\r\n    /** Gets whether a value is within the current comparison range. */\r\n    _isInComparisonRange(value) {\r\n        return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\r\n    }\r\n    /** Gets whether a value is the start of the preview range. */\r\n    _isPreviewStart(value) {\r\n        return isStart(value, this.previewStart, this.previewEnd);\r\n    }\r\n    /** Gets whether a value is the end of the preview range. */\r\n    _isPreviewEnd(value) {\r\n        return isEnd(value, this.previewStart, this.previewEnd);\r\n    }\r\n    /** Gets whether a value is inside the preview range. */\r\n    _isInPreview(value) {\r\n        return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\r\n    }\r\n    /** Finds the NgxMatCalendarCell that corresponds to a DOM node. */\r\n    _getCellFromElement(element) {\r\n        let cell;\r\n        if (isTableCell(element)) {\r\n            cell = element;\r\n        }\r\n        else if (isTableCell(element.parentNode)) {\r\n            cell = element.parentNode;\r\n        }\r\n        if (cell) {\r\n            const row = cell.getAttribute('data-ngx-mat-row');\r\n            const col = cell.getAttribute('data-ngx-mat-col');\r\n            if (row && col) {\r\n                return this.rows[parseInt(row)][parseInt(col)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatCalendarBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendarBody, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatCalendarBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatCalendarBody, selector: \"[ngx-mat-calendar-body]\", inputs: { label: \"label\", rows: \"rows\", todayValue: \"todayValue\", startValue: \"startValue\", endValue: \"endValue\", labelMinRequiredCells: \"labelMinRequiredCells\", numCols: \"numCols\", activeCell: \"activeCell\", isRange: \"isRange\", cellAspectRatio: \"cellAspectRatio\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", previewStart: \"previewStart\", previewEnd: \"previewEnd\" }, outputs: { selectedValueChange: \"selectedValueChange\", previewChange: \"previewChange\" }, host: { attributes: { \"role\": \"grid\", \"aria-readonly\": \"true\" }, classAttribute: \"ngx-mat-calendar-body\" }, exportAs: [\"NgxMatCalendarBody\"], usesOnChanges: true, ngImport: i0, template: \"<!--\\r\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\r\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\r\\n-->\\r\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\r\\n  <td class=\\\"mat-calendar-body-label\\\"\\r\\n      [attr.colspan]=\\\"numCols\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n    {{label}}\\r\\n  </td>\\r\\n</tr>\\r\\n\\r\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\r\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\r\\n  <!--\\r\\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\\r\\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\\r\\n    percentage of the width (a variant of the trick described here:\\r\\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\r\\n  -->\\r\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\r\\n      aria-hidden=\\\"true\\\"\\r\\n      class=\\\"mat-calendar-body-label\\\"\\r\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\r\\n  </td>\\r\\n  <td *ngFor=\\\"let item of row; let colIndex = index\\\"\\r\\n      role=\\\"gridcell\\\"\\r\\n      class=\\\"mat-calendar-body-cell\\\"\\r\\n      [ngClass]=\\\"item.cssClasses\\\"\\r\\n      [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\r\\n      [attr.data-mat-row]=\\\"rowIndex\\\"\\r\\n      [attr.data-mat-col]=\\\"colIndex\\\"\\r\\n      [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\r\\n      [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\r\\n      [attr.aria-label]=\\\"item.ariaLabel\\\"\\r\\n      [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\r\\n      [attr.aria-selected]=\\\"_isSelected(item)\\\"\\r\\n      (click)=\\\"_cellClicked(item, $event)\\\"\\r\\n      [style.width]=\\\"_cellWidth\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n      <div class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\r\\n        [class.mat-calendar-body-selected]=\\\"_isSelected(item)\\\"\\r\\n        [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\r\\n        {{item.displayValue}}\\r\\n      </div>\\r\\n      <div class=\\\"mat-calendar-body-cell-preview\\\"></div>\\r\\n  </td>\\r\\n</tr>\\r\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell:before,.mat-calendar-body-cell:after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range):before,.mat-calendar-body-range-start:after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start):before,.mat-calendar-body-comparison-start:after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range):before,[dir=rtl] .mat-calendar-body-range-start:after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start):before,[dir=rtl] .mat-calendar-body-comparison-start:after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0 999px 999px 0}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range):before,.mat-calendar-body-range-end:after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end):before,.mat-calendar-body-comparison-end:after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range):before,[dir=rtl] .mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end):before,[dir=rtl] .mat-calendar-body-comparison-end:after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:999px 0 0 999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start:after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end:after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start:after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start:after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media (hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendarBody, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: '[ngx-mat-calendar-body]', host: {\r\n                        'class': 'ngx-mat-calendar-body',\r\n                        'role': 'grid',\r\n                        'aria-readonly': 'true'\r\n                    }, exportAs: 'NgxMatCalendarBody', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!--\\r\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\r\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\r\\n-->\\r\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\r\\n  <td class=\\\"mat-calendar-body-label\\\"\\r\\n      [attr.colspan]=\\\"numCols\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n    {{label}}\\r\\n  </td>\\r\\n</tr>\\r\\n\\r\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\r\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\r\\n  <!--\\r\\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\\r\\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\\r\\n    percentage of the width (a variant of the trick described here:\\r\\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\r\\n  -->\\r\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\r\\n      aria-hidden=\\\"true\\\"\\r\\n      class=\\\"mat-calendar-body-label\\\"\\r\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\r\\n  </td>\\r\\n  <td *ngFor=\\\"let item of row; let colIndex = index\\\"\\r\\n      role=\\\"gridcell\\\"\\r\\n      class=\\\"mat-calendar-body-cell\\\"\\r\\n      [ngClass]=\\\"item.cssClasses\\\"\\r\\n      [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\r\\n      [attr.data-mat-row]=\\\"rowIndex\\\"\\r\\n      [attr.data-mat-col]=\\\"colIndex\\\"\\r\\n      [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\r\\n      [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\r\\n      [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\r\\n      [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\r\\n      [attr.aria-label]=\\\"item.ariaLabel\\\"\\r\\n      [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\r\\n      [attr.aria-selected]=\\\"_isSelected(item)\\\"\\r\\n      (click)=\\\"_cellClicked(item, $event)\\\"\\r\\n      [style.width]=\\\"_cellWidth\\\"\\r\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\r\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\r\\n      <div class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\r\\n        [class.mat-calendar-body-selected]=\\\"_isSelected(item)\\\"\\r\\n        [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\r\\n        {{item.displayValue}}\\r\\n      </div>\\r\\n      <div class=\\\"mat-calendar-body-cell-preview\\\"></div>\\r\\n  </td>\\r\\n</tr>\\r\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell:before,.mat-calendar-body-cell:after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range):before,.mat-calendar-body-range-start:after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start):before,.mat-calendar-body-comparison-start:after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range):before,[dir=rtl] .mat-calendar-body-range-start:after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start):before,[dir=rtl] .mat-calendar-body-comparison-start:after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0 999px 999px 0}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range):before,.mat-calendar-body-range-end:after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end):before,.mat-calendar-body-comparison-end:after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range):before,[dir=rtl] .mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end):before,[dir=rtl] .mat-calendar-body-comparison-end:after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:999px 0 0 999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start:after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end:after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end:after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start:after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start:after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media (hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { label: [{\r\n                type: Input\r\n            }], rows: [{\r\n                type: Input\r\n            }], todayValue: [{\r\n                type: Input\r\n            }], startValue: [{\r\n                type: Input\r\n            }], endValue: [{\r\n                type: Input\r\n            }], labelMinRequiredCells: [{\r\n                type: Input\r\n            }], numCols: [{\r\n                type: Input\r\n            }], activeCell: [{\r\n                type: Input\r\n            }], isRange: [{\r\n                type: Input\r\n            }], cellAspectRatio: [{\r\n                type: Input\r\n            }], comparisonStart: [{\r\n                type: Input\r\n            }], comparisonEnd: [{\r\n                type: Input\r\n            }], previewStart: [{\r\n                type: Input\r\n            }], previewEnd: [{\r\n                type: Input\r\n            }], selectedValueChange: [{\r\n                type: Output\r\n            }], previewChange: [{\r\n                type: Output\r\n            }] } });\r\n/** Checks whether a node is a table cell element. */\r\nfunction isTableCell(node) {\r\n    return node.nodeName === 'TD';\r\n}\r\n/** Checks whether a value is the start of a range. */\r\nfunction isStart(value, start, end) {\r\n    return end !== null && start !== end && value < end && value === start;\r\n}\r\n/** Checks whether a value is the end of a range. */\r\nfunction isEnd(value, start, end) {\r\n    return start !== null && start !== end && value >= start && value === end;\r\n}\r\n/** Checks whether a value is inside of a range. */\r\nfunction isInRange(value, start, end, rangeEnabled) {\r\n    return rangeEnabled && start !== null && end !== null && start !== end &&\r\n        value >= start && value <= end;\r\n}\n\nclass NgxMatDateAdapter extends DateAdapter {\r\n    /**\r\n     * Check if two date have same time\r\n     * @param a Date 1\r\n     * @param b Date 2\r\n     */\r\n    isSameTime(a, b) {\r\n        if (a == null || b == null)\r\n            return true;\r\n        return this.getHour(a) === this.getHour(b)\r\n            && this.getMinute(a) === this.getMinute(b)\r\n            && this.getSecond(a) === this.getSecond(b);\r\n    }\r\n    /**\r\n     * Copy time from a date to a another date\r\n     * @param toDate\r\n     * @param fromDate\r\n     */\r\n    copyTime(toDate, fromDate) {\r\n        this.setHour(toDate, this.getHour(fromDate));\r\n        this.setMinute(toDate, this.getMinute(fromDate));\r\n        this.setSecond(toDate, this.getSecond(fromDate));\r\n    }\r\n    /**\r\n   * Compares two dates.\r\n   * @param first The first date to compare.\r\n   * @param second The second date to compare.\r\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n   *     a number greater than 0 if the first date is later.\r\n   */\r\n    compareDateWithTime(first, second, showSeconds) {\r\n        let res = super.compareDate(first, second) ||\r\n            this.getHour(first) - this.getHour(second) ||\r\n            this.getMinute(first) - this.getMinute(second);\r\n        if (showSeconds) {\r\n            res = res || this.getSecond(first) - this.getSecond(second);\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * Set time by using default values\r\n     * @param defaultTime List default values [hour, minute, second]\r\n     */\r\n    setTimeByDefaultValues(date, defaultTime) {\r\n        if (!Array.isArray(defaultTime)) {\r\n            throw Error('@Input DefaultTime should be an array');\r\n        }\r\n        this.setHour(date, defaultTime[0] || 0);\r\n        this.setMinute(date, defaultTime[1] || 0);\r\n        this.setSecond(date, defaultTime[2] || 0);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token used to customize the date range selection behavior. */\r\nconst NGX_MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('NGX_MAT_DATE_RANGE_SELECTION_STRATEGY');\r\n/** Provides the default date range selection behavior. */\r\nclass DefaultNgxMatCalendarRangeStrategy {\r\n    constructor(_dateAdapter) {\r\n        this._dateAdapter = _dateAdapter;\r\n    }\r\n    selectionFinished(date, currentRange) {\r\n        let { start, end } = currentRange;\r\n        if (start == null) {\r\n            start = date;\r\n        }\r\n        else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\r\n            end = date;\r\n        }\r\n        else {\r\n            start = date;\r\n            end = null;\r\n        }\r\n        return new DateRange(start, end);\r\n    }\r\n    createPreview(activeDate, currentRange) {\r\n        let start = null;\r\n        let end = null;\r\n        if (currentRange.start && !currentRange.end && activeDate) {\r\n            start = currentRange.start;\r\n            end = activeDate;\r\n        }\r\n        return new DateRange(start, end);\r\n    }\r\n}\r\n/** @nocollapse */ DefaultNgxMatCalendarRangeStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: DefaultNgxMatCalendarRangeStrategy, deps: [{ token: NgxMatDateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ DefaultNgxMatCalendarRangeStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: DefaultNgxMatCalendarRangeStrategy });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: DefaultNgxMatCalendarRangeStrategy, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: NgxMatDateAdapter }]; } });\n\nconst LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n};\r\nconst MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n};\r\nconst DEFAULT_STEP = 1;\r\nconst NUMERIC_REGEX = /[^0-9]/g;\r\nconst PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nconst PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nconst PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\nfunction formatTwoDigitTimeValue(val) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\nfunction createMissingDateImplError(provider) {\r\n    return Error(`NgxMatDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n/** Formats a range of years. */\r\nfunction formatYearRange(start, end) {\r\n    return `${start} \\u2013 ${end}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DAYS_PER_WEEK = 7;\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\nclass NgxMatMonthView {\r\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir, _rangeStrategy) {\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dateFormats = _dateFormats;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dir = _dir;\r\n        this._rangeStrategy = _rangeStrategy;\r\n        this._rerenderSubscription = Subscription.EMPTY;\r\n        /** Emits when a new date is selected. */\r\n        this.selectedChange = new EventEmitter();\r\n        /** Emits when any date is selected. */\r\n        this._userSelection = new EventEmitter();\r\n        /** Emits when any date is activated. */\r\n        this.activeDateChange = new EventEmitter();\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n        this._activeDate = this._dateAdapter.today();\r\n    }\r\n    /**\r\n     * The date to display in this month view (everything other than the month and year is ignored).\r\n     */\r\n    get activeDate() { return this._activeDate; }\r\n    set activeDate(value) {\r\n        const oldActiveDate = this._activeDate;\r\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n            this._init();\r\n        }\r\n    }\r\n    /** The currently selected date. */\r\n    get selected() { return this._selected; }\r\n    set selected(value) {\r\n        if (value instanceof DateRange) {\r\n            this._selected = value;\r\n        }\r\n        else {\r\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        }\r\n        this._setRanges(this._selected);\r\n    }\r\n    /** The minimum selectable date. */\r\n    get minDate() { return this._minDate; }\r\n    set minDate(value) {\r\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The maximum selectable date. */\r\n    get maxDate() { return this._maxDate; }\r\n    set maxDate(value) {\r\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    ngAfterContentInit() {\r\n        this._rerenderSubscription = this._dateAdapter.localeChanges\r\n            .pipe(startWith(null))\r\n            .subscribe(() => this._init());\r\n    }\r\n    ngOnDestroy() {\r\n        this._rerenderSubscription.unsubscribe();\r\n    }\r\n    /** Handles when a new date is selected. */\r\n    _dateSelected(event) {\r\n        const date = event.value;\r\n        const selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n        const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n        const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n        let rangeStartDate;\r\n        let rangeEndDate;\r\n        if (this._selected instanceof DateRange) {\r\n            rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\r\n            rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\r\n        }\r\n        else {\r\n            rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\r\n        }\r\n        if (rangeStartDate !== date || rangeEndDate !== date) {\r\n            this.selectedChange.emit(selectedDate);\r\n        }\r\n        this._userSelection.emit({ value: selectedDate, event: event.event });\r\n    }\r\n    /** Handles keydown events on the calendar body when calendar is in month view. */\r\n    _handleCalendarBodyKeydown(event) {\r\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n        // disabled ones from being selected. This may not be ideal, we should look into whether\r\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n        const oldActiveDate = this._activeDate;\r\n        const isRtl = this._isRtl();\r\n        switch (event.keyCode) {\r\n            case LEFT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n                break;\r\n            case RIGHT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n                break;\r\n            case UP_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n                break;\r\n            case DOWN_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n                break;\r\n            case HOME:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\r\n                break;\r\n            case END:\r\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n                    this._dateAdapter.getDate(this._activeDate)));\r\n                break;\r\n            case PAGE_UP:\r\n                this.activeDate = event.altKey ?\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n                break;\r\n            case PAGE_DOWN:\r\n                this.activeDate = event.altKey ?\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n                break;\r\n            case ENTER:\r\n            case SPACE:\r\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\r\n                    this._dateSelected({ value: this._dateAdapter.getDate(this._activeDate), event });\r\n                    // Prevent unexpected default actions such as form submission.\r\n                    event.preventDefault();\r\n                }\r\n                return;\r\n            case ESCAPE:\r\n                // Abort the current range selection if the user presses escape mid-selection.\r\n                if (this._previewEnd != null) {\r\n                    this._previewStart = this._previewEnd = null;\r\n                    this.selectedChange.emit(null);\r\n                    this._userSelection.emit({ value: null, event });\r\n                    event.preventDefault();\r\n                    event.stopPropagation(); // Prevents the overlay from closing.\r\n                }\r\n                return;\r\n            default:\r\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n                return;\r\n        }\r\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n            this.activeDateChange.emit(this.activeDate);\r\n        }\r\n        this._focusActiveCell();\r\n        // Prevent unexpected default actions such as form submission.\r\n        event.preventDefault();\r\n    }\r\n    /** Initializes this month view. */\r\n    _init() {\r\n        this._setRanges(this.selected);\r\n        this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\r\n        this._monthLabel =\r\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n                .toLocaleUpperCase();\r\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\r\n        this._firstWeekOffset =\r\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n        this._initWeekdays();\r\n        this._createWeekCells();\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(movePreview) {\r\n        this._matCalendarBody._focusActiveCell(movePreview);\r\n    }\r\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\r\n    _previewChanged({ event, value: cell }) {\r\n        if (this._rangeStrategy) {\r\n            // We can assume that this will be a range, because preview\r\n            // events aren't fired for single date selections.\r\n            const value = cell ? cell.rawValue : null;\r\n            const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\r\n            this._previewStart = this._getCellCompareValue(previewRange.start);\r\n            this._previewEnd = this._getCellCompareValue(previewRange.end);\r\n            // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\r\n            // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\r\n            // when navigating one month back using the keyboard which will cause this handler\r\n            // to throw a \"changed after checked\" error when updating the preview state.\r\n            this._changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n    /** Initializes the weekdays. */\r\n    _initWeekdays() {\r\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n        // Rotate the labels for days of the week based on the configured first day of the week.\r\n        let weekdays = longWeekdays.map((long, i) => {\r\n            return { long, narrow: narrowWeekdays[i] };\r\n        });\r\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n    }\r\n    /** Creates MatCalendarCells for the dates in this month. */\r\n    _createWeekCells() {\r\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n        const dateNames = this._dateAdapter.getDateNames();\r\n        this._weeks = [[]];\r\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n            if (cell == DAYS_PER_WEEK) {\r\n                this._weeks.push([]);\r\n                cell = 0;\r\n            }\r\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n            const enabled = this._shouldEnableDate(date);\r\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\r\n            this._weeks[this._weeks.length - 1].push(new NgxMatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\r\n        }\r\n    }\r\n    /** Date filter for the month */\r\n    _shouldEnableDate(date) {\r\n        return !!date &&\r\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\r\n            (!this.dateFilter || this.dateFilter(date));\r\n    }\r\n    /**\r\n     * Gets the date in this month that the given Date falls on.\r\n     * Returns null if the given Date is in another month.\r\n     */\r\n    _getDateInCurrentMonth(date) {\r\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n            this._dateAdapter.getDate(date) : null;\r\n    }\r\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n    _hasSameMonthAndYear(d1, d2) {\r\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n    }\r\n    /** Gets the value that will be used to one cell to another. */\r\n    _getCellCompareValue(date) {\r\n        if (date) {\r\n            // We use the time since the Unix epoch to compare dates in this view, rather than the\r\n            // cell values, because we need to support ranges that span across multiple months/years.\r\n            const year = this._dateAdapter.getYear(date);\r\n            const month = this._dateAdapter.getMonth(date);\r\n            const day = this._dateAdapter.getDate(date);\r\n            return new Date(year, month, day).getTime();\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n    /** Determines whether the user has the RTL layout direction. */\r\n    _isRtl() {\r\n        return this._dir && this._dir.value === 'rtl';\r\n    }\r\n    /** Sets the current range based on a model value. */\r\n    _setRanges(selectedValue) {\r\n        if (selectedValue instanceof DateRange) {\r\n            this._rangeStart = this._getCellCompareValue(selectedValue.start);\r\n            this._rangeEnd = this._getCellCompareValue(selectedValue.end);\r\n            this._isRange = true;\r\n        }\r\n        else {\r\n            this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\r\n            this._isRange = false;\r\n        }\r\n        this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\r\n        this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatMonthView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatMonthView, deps: [{ token: i0.ChangeDetectorRef }, { token: NGX_MAT_DATE_FORMATS, optional: true }, { token: NgxMatDateAdapter, optional: true }, { token: i2.Directionality, optional: true }, { token: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatMonthView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatMonthView, selector: \"ngx-mat-month-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedChange: \"selectedChange\", _userSelection: \"_userSelection\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: NgxMatCalendarBody, descendants: true }], exportAs: [\"ngxMatMonthView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr>\\r\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th>\\r\\n    </tr>\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [label]=\\\"_monthLabel\\\"\\r\\n         [rows]=\\\"_weeks\\\"\\r\\n         [todayValue]=\\\"_todayDate!\\\"\\r\\n         [startValue]=\\\"_rangeStart!\\\"\\r\\n         [endValue]=\\\"_rangeEnd!\\\"\\r\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\r\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\r\\n         [previewStart]=\\\"_previewStart\\\"\\r\\n         [previewEnd]=\\\"_previewEnd\\\"\\r\\n         [isRange]=\\\"_isRange\\\"\\r\\n         [labelMinRequiredCells]=\\\"3\\\"\\r\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\r\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\r\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: NgxMatCalendarBody, selector: \"[ngx-mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"NgxMatCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatMonthView, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-month-view', exportAs: 'ngxMatMonthView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr>\\r\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th>\\r\\n    </tr>\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [label]=\\\"_monthLabel\\\"\\r\\n         [rows]=\\\"_weeks\\\"\\r\\n         [todayValue]=\\\"_todayDate!\\\"\\r\\n         [startValue]=\\\"_rangeStart!\\\"\\r\\n         [endValue]=\\\"_rangeEnd!\\\"\\r\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\r\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\r\\n         [previewStart]=\\\"_previewStart\\\"\\r\\n         [previewEnd]=\\\"_previewEnd\\\"\\r\\n         [isRange]=\\\"_isRange\\\"\\r\\n         [labelMinRequiredCells]=\\\"3\\\"\\r\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\r\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\r\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_FORMATS]\r\n                }] }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_RANGE_SELECTION_STRATEGY]\r\n                }, {\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { activeDate: [{\r\n                type: Input\r\n            }], selected: [{\r\n                type: Input\r\n            }], minDate: [{\r\n                type: Input\r\n            }], maxDate: [{\r\n                type: Input\r\n            }], dateFilter: [{\r\n                type: Input\r\n            }], dateClass: [{\r\n                type: Input\r\n            }], comparisonStart: [{\r\n                type: Input\r\n            }], comparisonEnd: [{\r\n                type: Input\r\n            }], selectedChange: [{\r\n                type: Output\r\n            }], _userSelection: [{\r\n                type: Output\r\n            }], activeDateChange: [{\r\n                type: Output\r\n            }], _matCalendarBody: [{\r\n                type: ViewChild,\r\n                args: [NgxMatCalendarBody]\r\n            }] } });\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst yearsPerPage = 24;\r\nconst yearsPerRow = 4;\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\nclass NgxMatMultiYearView {\r\n    constructor(_changeDetectorRef, _dateAdapter, _dir) {\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dir = _dir;\r\n        this._rerenderSubscription = Subscription.EMPTY;\r\n        /** Emits when a new year is selected. */\r\n        this.selectedChange = new EventEmitter();\r\n        /** Emits the selected year. This doesn't imply a change on the selected date */\r\n        this.yearSelected = new EventEmitter();\r\n        /** Emits when any date is activated. */\r\n        this.activeDateChange = new EventEmitter();\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        this._activeDate = this._dateAdapter.today();\r\n    }\r\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n    get activeDate() { return this._activeDate; }\r\n    set activeDate(value) {\r\n        let oldActiveDate = this._activeDate;\r\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\r\n            this._init();\r\n        }\r\n    }\r\n    /** The currently selected date. */\r\n    get selected() { return this._selected; }\r\n    set selected(value) {\r\n        if (value instanceof DateRange) {\r\n            this._selected = value;\r\n        }\r\n        else {\r\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        }\r\n        this._setSelectedYear(value);\r\n    }\r\n    /** The minimum selectable date. */\r\n    get minDate() { return this._minDate; }\r\n    set minDate(value) {\r\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The maximum selectable date. */\r\n    get maxDate() { return this._maxDate; }\r\n    set maxDate(value) {\r\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    ngAfterContentInit() {\r\n        this._rerenderSubscription = this._dateAdapter.localeChanges\r\n            .pipe(startWith(null))\r\n            .subscribe(() => this._init());\r\n    }\r\n    ngOnDestroy() {\r\n        this._rerenderSubscription.unsubscribe();\r\n    }\r\n    /** Initializes this multi-year view. */\r\n    _init() {\r\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n        // We want a range years such that we maximize the number of\r\n        // enabled dates visible at once. This prevents issues where the minimum year\r\n        // is the last item of a page OR the maximum year is the first item of a page.\r\n        // The offset from the active year to the \"slot\" for the starting year is the\r\n        // *actual* first rendered year in the multi-year view.\r\n        const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n        this._years = [];\r\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\r\n            row.push(minYearOfPage + i);\r\n            if (row.length == yearsPerRow) {\r\n                this._years.push(row.map(year => this._createCellForYear(year)));\r\n                row = [];\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Handles when a new year is selected. */\r\n    _yearSelected(event) {\r\n        const year = event.value;\r\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\r\n        let month = this._dateAdapter.getMonth(this.activeDate);\r\n        let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\r\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n    }\r\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n    _handleCalendarBodyKeydown(event) {\r\n        const oldActiveDate = this._activeDate;\r\n        const isRtl = this._isRtl();\r\n        switch (event.keyCode) {\r\n            case LEFT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n                break;\r\n            case RIGHT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n                break;\r\n            case UP_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n                break;\r\n            case DOWN_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n                break;\r\n            case HOME:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\r\n                break;\r\n            case END:\r\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\r\n                break;\r\n            case PAGE_UP:\r\n                this.activeDate =\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\r\n                break;\r\n            case PAGE_DOWN:\r\n                this.activeDate =\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\r\n                break;\r\n            case ENTER:\r\n            case SPACE:\r\n                this._yearSelected({ value: this._dateAdapter.getYear(this._activeDate), event });\r\n                break;\r\n            default:\r\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n                return;\r\n        }\r\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n            this.activeDateChange.emit(this.activeDate);\r\n        }\r\n        this._focusActiveCell();\r\n        // Prevent unexpected default actions such as form submission.\r\n        event.preventDefault();\r\n    }\r\n    _getActiveCell() {\r\n        return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n    }\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell() {\r\n        this._matCalendarBody._focusActiveCell();\r\n    }\r\n    /** Creates an MatCalendarCell for the given year. */\r\n    _createCellForYear(year) {\r\n        let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\r\n        return new NgxMatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\r\n    }\r\n    /** Whether the given year is enabled. */\r\n    _shouldEnableYear(year) {\r\n        // disable if the year is greater than maxDate lower than minDate\r\n        if (year === undefined || year === null ||\r\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\r\n            return false;\r\n        }\r\n        // enable if it reaches here and there's no filter defined\r\n        if (!this.dateFilter) {\r\n            return true;\r\n        }\r\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n        // If any date in the year is enabled count the year as enabled.\r\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n            if (this.dateFilter(date)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n    /** Determines whether the user has the RTL layout direction. */\r\n    _isRtl() {\r\n        return this._dir && this._dir.value === 'rtl';\r\n    }\r\n    /** Sets the currently-highlighted year based on a model value. */\r\n    _setSelectedYear(value) {\r\n        this._selectedYear = null;\r\n        if (value instanceof DateRange) {\r\n            const displayValue = value.start || value.end;\r\n            if (displayValue) {\r\n                this._selectedYear = this._dateAdapter.getYear(displayValue);\r\n            }\r\n        }\r\n        else if (value) {\r\n            this._selectedYear = this._dateAdapter.getYear(value);\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatMultiYearView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatMultiYearView, deps: [{ token: i0.ChangeDetectorRef }, { token: NgxMatDateAdapter, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatMultiYearView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatMultiYearView, selector: \"ngx-mat-multi-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: NgxMatCalendarBody, descendants: true }], exportAs: [\"ngxMatMultiYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [rows]=\\\"_years\\\"\\r\\n         [todayValue]=\\\"_todayYear\\\"\\r\\n         [startValue]=\\\"_selectedYear!\\\"\\r\\n         [endValue]=\\\"_selectedYear!\\\"\\r\\n         [numCols]=\\\"4\\\"\\r\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\r\\n         [activeCell]=\\\"_getActiveCell()\\\"\\r\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatCalendarBody, selector: \"[ngx-mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"NgxMatCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatMultiYearView, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-multi-year-view', exportAs: 'ngxMatMultiYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [rows]=\\\"_years\\\"\\r\\n         [todayValue]=\\\"_todayYear\\\"\\r\\n         [startValue]=\\\"_selectedYear!\\\"\\r\\n         [endValue]=\\\"_selectedYear!\\\"\\r\\n         [numCols]=\\\"4\\\"\\r\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\r\\n         [activeCell]=\\\"_getActiveCell()\\\"\\r\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { activeDate: [{\r\n                type: Input\r\n            }], selected: [{\r\n                type: Input\r\n            }], minDate: [{\r\n                type: Input\r\n            }], maxDate: [{\r\n                type: Input\r\n            }], dateFilter: [{\r\n                type: Input\r\n            }], selectedChange: [{\r\n                type: Output\r\n            }], yearSelected: [{\r\n                type: Output\r\n            }], activeDateChange: [{\r\n                type: Output\r\n            }], _matCalendarBody: [{\r\n                type: ViewChild,\r\n                args: [NgxMatCalendarBody]\r\n            }] } });\r\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\r\n    const year1 = dateAdapter.getYear(date1);\r\n    const year2 = dateAdapter.getYear(date2);\r\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n    return Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n        Math.floor((year2 - startingYear) / yearsPerPage);\r\n}\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\r\n    const activeYear = dateAdapter.getYear(activeDate);\r\n    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);\r\n}\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\r\n    let startingYear = 0;\r\n    if (maxDate) {\r\n        const maxYear = dateAdapter.getYear(maxDate);\r\n        startingYear = maxYear - yearsPerPage + 1;\r\n    }\r\n    else if (minDate) {\r\n        startingYear = dateAdapter.getYear(minDate);\r\n    }\r\n    return startingYear;\r\n}\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo(a, b) {\r\n    return (a % b + b) % b;\r\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\nclass NgxMatYearView {\r\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dateFormats = _dateFormats;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dir = _dir;\r\n        this._rerenderSubscription = Subscription.EMPTY;\r\n        /** Emits when a new month is selected. */\r\n        this.selectedChange = new EventEmitter();\r\n        /** Emits the selected month. This doesn't imply a change on the selected date */\r\n        this.monthSelected = new EventEmitter();\r\n        /** Emits when any date is activated. */\r\n        this.activeDateChange = new EventEmitter();\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n        this._activeDate = this._dateAdapter.today();\r\n    }\r\n    /** The date to display in this year view (everything other than the year is ignored). */\r\n    get activeDate() { return this._activeDate; }\r\n    set activeDate(value) {\r\n        let oldActiveDate = this._activeDate;\r\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\r\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n            this._init();\r\n        }\r\n    }\r\n    /** The currently selected date. */\r\n    get selected() { return this._selected; }\r\n    set selected(value) {\r\n        if (value instanceof DateRange) {\r\n            this._selected = value;\r\n        }\r\n        else {\r\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        }\r\n        this._setSelectedMonth(value);\r\n    }\r\n    /** The minimum selectable date. */\r\n    get minDate() { return this._minDate; }\r\n    set minDate(value) {\r\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The maximum selectable date. */\r\n    get maxDate() { return this._maxDate; }\r\n    set maxDate(value) {\r\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    ngAfterContentInit() {\r\n        this._rerenderSubscription = this._dateAdapter.localeChanges\r\n            .pipe(startWith(null))\r\n            .subscribe(() => this._init());\r\n    }\r\n    ngOnDestroy() {\r\n        this._rerenderSubscription.unsubscribe();\r\n    }\r\n    /** Handles when a new month is selected. */\r\n    _monthSelected(event) {\r\n        const month = event.value;\r\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n        this.monthSelected.emit(normalizedDate);\r\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n    }\r\n    /** Handles keydown events on the calendar body when calendar is in year view. */\r\n    _handleCalendarBodyKeydown(event) {\r\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n        // disabled ones from being selected. This may not be ideal, we should look into whether\r\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n        const oldActiveDate = this._activeDate;\r\n        const isRtl = this._isRtl();\r\n        switch (event.keyCode) {\r\n            case LEFT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n                break;\r\n            case RIGHT_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n                break;\r\n            case UP_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n                break;\r\n            case DOWN_ARROW:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n                break;\r\n            case HOME:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\r\n                break;\r\n            case END:\r\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\r\n                break;\r\n            case PAGE_UP:\r\n                this.activeDate =\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n                break;\r\n            case PAGE_DOWN:\r\n                this.activeDate =\r\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n                break;\r\n            case ENTER:\r\n            case SPACE:\r\n                this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\r\n                break;\r\n            default:\r\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n                return;\r\n        }\r\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n            this.activeDateChange.emit(this.activeDate);\r\n        }\r\n        this._focusActiveCell();\r\n        // Prevent unexpected default actions such as form submission.\r\n        event.preventDefault();\r\n    }\r\n    /** Initializes this year view. */\r\n    _init() {\r\n        this._setSelectedMonth(this.selected);\r\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n        let monthNames = this._dateAdapter.getMonthNames('short');\r\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell() {\r\n        this._matCalendarBody._focusActiveCell();\r\n    }\r\n    /**\r\n     * Gets the month in this year that the given Date falls on.\r\n     * Returns null if the given Date is in another year.\r\n     */\r\n    _getMonthInCurrentYear(date) {\r\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n            this._dateAdapter.getMonth(date) : null;\r\n    }\r\n    /** Creates an MatCalendarCell for the given month. */\r\n    _createCellForMonth(month, monthName) {\r\n        let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\r\n        return new NgxMatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\r\n    }\r\n    /** Whether the given month is enabled. */\r\n    _shouldEnableMonth(month) {\r\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n        if (month === undefined || month === null ||\r\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\r\n            return false;\r\n        }\r\n        if (!this.dateFilter) {\r\n            return true;\r\n        }\r\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n        // If any date in the month is enabled count the month as enabled.\r\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n            if (this.dateFilter(date)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Tests whether the combination month/year is after this.maxDate, considering\r\n     * just the month and year of this.maxDate\r\n     */\r\n    _isYearAndMonthAfterMaxDate(year, month) {\r\n        if (this.maxDate) {\r\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n            return year > maxYear || (year === maxYear && month > maxMonth);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Tests whether the combination month/year is before this.minDate, considering\r\n     * just the month and year of this.minDate\r\n     */\r\n    _isYearAndMonthBeforeMinDate(year, month) {\r\n        if (this.minDate) {\r\n            const minYear = this._dateAdapter.getYear(this.minDate);\r\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n            return year < minYear || (year === minYear && month < minMonth);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n    /** Determines whether the user has the RTL layout direction. */\r\n    _isRtl() {\r\n        return this._dir && this._dir.value === 'rtl';\r\n    }\r\n    /** Sets the currently-selected month based on a model value. */\r\n    _setSelectedMonth(value) {\r\n        if (value instanceof DateRange) {\r\n            this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\r\n                this._getMonthInCurrentYear(value.end);\r\n        }\r\n        else {\r\n            this._selectedMonth = this._getMonthInCurrentYear(value);\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatYearView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatYearView, deps: [{ token: i0.ChangeDetectorRef }, { token: NGX_MAT_DATE_FORMATS, optional: true }, { token: NgxMatDateAdapter, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatYearView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatYearView, selector: \"ngx-mat-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\" }, outputs: { selectedChange: \"selectedChange\", monthSelected: \"monthSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: NgxMatCalendarBody, descendants: true }], exportAs: [\"ngxMatYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [label]=\\\"_yearLabel\\\"\\r\\n         [rows]=\\\"_months\\\"\\r\\n         [todayValue]=\\\"_todayMonth!\\\"\\r\\n         [startValue]=\\\"_selectedMonth!\\\"\\r\\n         [endValue]=\\\"_selectedMonth!\\\"\\r\\n         [labelMinRequiredCells]=\\\"2\\\"\\r\\n         [numCols]=\\\"4\\\"\\r\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\r\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\r\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatCalendarBody, selector: \"[ngx-mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"NgxMatCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatYearView, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-year-view', exportAs: 'ngxMatYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\r\\n  <thead class=\\\"mat-calendar-table-header\\\">\\r\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\r\\n  </thead>\\r\\n  <tbody ngx-mat-calendar-body\\r\\n         [label]=\\\"_yearLabel\\\"\\r\\n         [rows]=\\\"_months\\\"\\r\\n         [todayValue]=\\\"_todayMonth!\\\"\\r\\n         [startValue]=\\\"_selectedMonth!\\\"\\r\\n         [endValue]=\\\"_selectedMonth!\\\"\\r\\n         [labelMinRequiredCells]=\\\"2\\\"\\r\\n         [numCols]=\\\"4\\\"\\r\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\r\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\r\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\r\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\r\\n  </tbody>\\r\\n</table>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_FORMATS]\r\n                }] }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { activeDate: [{\r\n                type: Input\r\n            }], selected: [{\r\n                type: Input\r\n            }], minDate: [{\r\n                type: Input\r\n            }], maxDate: [{\r\n                type: Input\r\n            }], dateFilter: [{\r\n                type: Input\r\n            }], selectedChange: [{\r\n                type: Output\r\n            }], monthSelected: [{\r\n                type: Output\r\n            }], activeDateChange: [{\r\n                type: Output\r\n            }], _matCalendarBody: [{\r\n                type: ViewChild,\r\n                args: [NgxMatCalendarBody]\r\n            }] } });\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Default header for NgxMatCalendar */\r\nclass NgxMatCalendarHeader {\r\n    constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\r\n        this._intl = _intl;\r\n        this.calendar = calendar;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dateFormats = _dateFormats;\r\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n    }\r\n    /** The label for the current calendar view. */\r\n    get periodButtonText() {\r\n        if (this.calendar.currentView == 'month') {\r\n            return this._dateAdapter\r\n                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n                .toLocaleUpperCase();\r\n        }\r\n        if (this.calendar.currentView == 'year') {\r\n            return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n        }\r\n        // The offset from the active year to the \"slot\" for the starting year is the\r\n        // *actual* first rendered year in the multi-year view, and the last year is\r\n        // just yearsPerPage - 1 away.\r\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\r\n        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n        const minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\r\n        const maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\r\n        return formatYearRange(minYearName, maxYearName);\r\n    }\r\n    get periodButtonLabel() {\r\n        return this.calendar.currentView == 'month' ?\r\n            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\r\n    }\r\n    /** The label for the previous button. */\r\n    get prevButtonLabel() {\r\n        return {\r\n            'month': this._intl.prevMonthLabel,\r\n            'year': this._intl.prevYearLabel,\r\n            'multi-year': this._intl.prevMultiYearLabel\r\n        }[this.calendar.currentView];\r\n    }\r\n    /** The label for the next button. */\r\n    get nextButtonLabel() {\r\n        return {\r\n            'month': this._intl.nextMonthLabel,\r\n            'year': this._intl.nextYearLabel,\r\n            'multi-year': this._intl.nextMultiYearLabel\r\n        }[this.calendar.currentView];\r\n    }\r\n    /** Handles user clicks on the period label. */\r\n    currentPeriodClicked() {\r\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n    }\r\n    /** Handles user clicks on the previous button. */\r\n    previousClicked() {\r\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\r\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\r\n    }\r\n    /** Handles user clicks on the next button. */\r\n    nextClicked() {\r\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\r\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\r\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\r\n    }\r\n    /** Whether the previous period button is enabled. */\r\n    previousEnabled() {\r\n        if (!this.calendar.minDate) {\r\n            return true;\r\n        }\r\n        return !this.calendar.minDate ||\r\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\r\n    }\r\n    /** Whether the next period button is enabled. */\r\n    nextEnabled() {\r\n        return !this.calendar.maxDate ||\r\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\r\n    }\r\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n    _isSameView(date1, date2) {\r\n        if (this.calendar.currentView == 'month') {\r\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\r\n        }\r\n        if (this.calendar.currentView == 'year') {\r\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n        }\r\n        // Otherwise we are in 'multi-year' view.\r\n        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatCalendarHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendarHeader, deps: [{ token: i1$1.MatDatepickerIntl }, { token: forwardRef(() => NgxMatCalendar) }, { token: NgxMatDateAdapter, optional: true }, { token: NGX_MAT_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatCalendarHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatCalendarHeader, selector: \"ngx-mat-calendar-header\", exportAs: [\"ngxMatCalendarHeader\"], ngImport: i0, template: \"<div class=\\\"mat-calendar-header\\\">\\r\\n  <div class=\\\"mat-calendar-controls\\\">\\r\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\r\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\r\\n            cdkAriaLive=\\\"polite\\\">\\r\\n      {{periodButtonText}}\\r\\n      <div class=\\\"mat-calendar-arrow\\\"\\r\\n           [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div>\\r\\n    </button>\\r\\n\\r\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\r\\n\\r\\n    <ng-content></ng-content>\\r\\n\\r\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\r\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\r\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\r\\n    </button>\\r\\n\\r\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\r\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\r\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendarHeader, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-calendar-header', exportAs: 'ngxMatCalendarHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-calendar-header\\\">\\r\\n  <div class=\\\"mat-calendar-controls\\\">\\r\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\r\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\r\\n            cdkAriaLive=\\\"polite\\\">\\r\\n      {{periodButtonText}}\\r\\n      <div class=\\\"mat-calendar-arrow\\\"\\r\\n           [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div>\\r\\n    </button>\\r\\n\\r\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\r\\n\\r\\n    <ng-content></ng-content>\\r\\n\\r\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\r\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\r\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\r\\n    </button>\\r\\n\\r\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\r\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\r\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDatepickerIntl }, { type: NgxMatCalendar, decorators: [{\r\n                    type: Inject,\r\n                    args: [forwardRef(() => NgxMatCalendar)]\r\n                }] }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_FORMATS]\r\n                }] }, { type: i0.ChangeDetectorRef }]; } });\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\nclass NgxMatCalendar {\r\n    constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dateFormats = _dateFormats;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        /**\r\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n         * We need to schedule it, rather than do it immediately, because we have to wait\r\n         * for Angular to re-evaluate the view children.\r\n         */\r\n        this._moveFocusOnNextTick = false;\r\n        /** Whether the calendar should be started in month or year view. */\r\n        this.startView = 'month';\r\n        /** Emits when the currently selected date changes. */\r\n        this.selectedChange = new EventEmitter();\r\n        /**\r\n         * Emits the year chosen in multiyear view.\r\n         * This doesn't imply a change on the selected date.\r\n         */\r\n        this.yearSelected = new EventEmitter();\r\n        /**\r\n         * Emits the month chosen in year view.\r\n         * This doesn't imply a change on the selected date.\r\n         */\r\n        this.monthSelected = new EventEmitter();\r\n        /** Emits when any date is selected. */\r\n        this._userSelection = new EventEmitter();\r\n        /**\r\n         * Emits whenever there is a state change that the header may need to respond to.\r\n         */\r\n        this.stateChanges = new Subject();\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n        this._intlChanges = _intl.changes.subscribe(() => {\r\n            _changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    /** A date representing the period (month or year) to start the calendar in. */\r\n    get startAt() { return this._startAt; }\r\n    set startAt(value) {\r\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The currently selected date. */\r\n    get selected() { return this._selected; }\r\n    set selected(value) {\r\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The minimum selectable date. */\r\n    get minDate() { return this._minDate; }\r\n    set minDate(value) {\r\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** The maximum selectable date. */\r\n    get maxDate() { return this._maxDate; }\r\n    set maxDate(value) {\r\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /**\r\n     * The current active date. This determines which time period is shown and which date is\r\n     * highlighted when using keyboard navigation.\r\n     */\r\n    get activeDate() { return this._clampedActiveDate; }\r\n    set activeDate(value) {\r\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n        this.stateChanges.next();\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Whether the calendar is in month view. */\r\n    get currentView() { return this._currentView; }\r\n    set currentView(value) {\r\n        this._currentView = value;\r\n        this._moveFocusOnNextTick = true;\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    ngAfterContentInit() {\r\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n        this.activeDate = this.startAt || this._dateAdapter.today();\r\n        // Assign to the private property since we don't want to move focus on init.\r\n        this._currentView = this.startView;\r\n    }\r\n    ngAfterViewChecked() {\r\n        if (this._moveFocusOnNextTick) {\r\n            this._moveFocusOnNextTick = false;\r\n            this.focusActiveCell();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._intlChanges.unsubscribe();\r\n        this.stateChanges.complete();\r\n    }\r\n    ngOnChanges(changes) {\r\n        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\r\n        if (change && !change.firstChange) {\r\n            const view = this._getCurrentViewComponent();\r\n            if (view) {\r\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n                this._changeDetectorRef.detectChanges();\r\n                view._init();\r\n            }\r\n        }\r\n        this.stateChanges.next();\r\n    }\r\n    focusActiveCell() {\r\n        this._getCurrentViewComponent()._focusActiveCell();\r\n    }\r\n    /** Updates today's date after an update of the active date */\r\n    updateTodaysDate() {\r\n        let view = this.currentView == 'month' ? this.monthView :\r\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\r\n        view.ngAfterContentInit();\r\n    }\r\n    /** Handles date selection in the month view. */\r\n    _dateSelected(date) {\r\n        if (date && !this._dateAdapter.sameDate(date, this.selected)) {\r\n            this.selectedChange.emit(date);\r\n        }\r\n    }\r\n    /** Handles year selection in the multiyear view. */\r\n    _yearSelectedInMultiYearView(normalizedYear) {\r\n        this.yearSelected.emit(normalizedYear);\r\n    }\r\n    /** Handles month selection in the year view. */\r\n    _monthSelectedInYearView(normalizedMonth) {\r\n        this.monthSelected.emit(normalizedMonth);\r\n    }\r\n    _userSelected() {\r\n        this._userSelection.emit();\r\n    }\r\n    /** Handles year/month selection in the multi-year/year views. */\r\n    _goToDateInView(date, view) {\r\n        this.activeDate = date;\r\n        this.currentView = view;\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n    /** Returns the component instance that corresponds to the current calendar view. */\r\n    _getCurrentViewComponent() {\r\n        return this.monthView || this.yearView || this.multiYearView;\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatCalendar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendar, deps: [{ token: i1$1.MatDatepickerIntl }, { token: NgxMatDateAdapter, optional: true }, { token: NGX_MAT_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatCalendar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatCalendar, selector: \"ngx-mat-calendar\", inputs: { headerComponent: \"headerComponent\", startAt: \"startAt\", startView: \"startView\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", _userSelection: \"_userSelection\" }, host: { classAttribute: \"mat-calendar\" }, viewQueries: [{ propertyName: \"monthView\", first: true, predicate: NgxMatMonthView, descendants: true }, { propertyName: \"yearView\", first: true, predicate: NgxMatYearView, descendants: true }, { propertyName: \"multiYearView\", first: true, predicate: NgxMatMultiYearView, descendants: true }], exportAs: [\"ngxMatCalendar\"], usesOnChanges: true, ngImport: i0, template: \"\\r\\n<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\r\\n\\r\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\r\\n  <ngx-mat-month-view\\r\\n      *ngSwitchCase=\\\"'month'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      [dateClass]=\\\"dateClass\\\"\\r\\n      (selectedChange)=\\\"_dateSelected($event)\\\"\\r\\n      (_userSelection)=\\\"_userSelected()\\\">\\r\\n  </ngx-mat-month-view>\\r\\n\\r\\n  <ngx-mat-year-view\\r\\n      *ngSwitchCase=\\\"'year'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\r\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\r\\n  </ngx-mat-year-view>\\r\\n\\r\\n  <ngx-mat-multi-year-view\\r\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\r\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\r\\n  </ngx-mat-multi-year-view>\\r\\n</div>\\r\\n\", styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0}.mat-calendar-content{padding:0 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(4.71429% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button:after,.mat-calendar-next-button:after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button:after{border-left-width:2px;transform:translate(2px) rotate(-45deg)}.mat-calendar-next-button:after{border-right-width:2px;transform:translate(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider:after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i5.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { kind: \"component\", type: NgxMatMonthView, selector: \"ngx-mat-month-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\"], outputs: [\"selectedChange\", \"_userSelection\", \"activeDateChange\"], exportAs: [\"ngxMatMonthView\"] }, { kind: \"component\", type: NgxMatYearView, selector: \"ngx-mat-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\"], outputs: [\"selectedChange\", \"monthSelected\", \"activeDateChange\"], exportAs: [\"ngxMatYearView\"] }, { kind: \"component\", type: NgxMatMultiYearView, selector: \"ngx-mat-multi-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\"], outputs: [\"selectedChange\", \"yearSelected\", \"activeDateChange\"], exportAs: [\"ngxMatMultiYearView\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatCalendar, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-calendar', host: {\r\n                        'class': 'mat-calendar',\r\n                    }, exportAs: 'ngxMatCalendar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"\\r\\n<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\r\\n\\r\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\r\\n  <ngx-mat-month-view\\r\\n      *ngSwitchCase=\\\"'month'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      [dateClass]=\\\"dateClass\\\"\\r\\n      (selectedChange)=\\\"_dateSelected($event)\\\"\\r\\n      (_userSelection)=\\\"_userSelected()\\\">\\r\\n  </ngx-mat-month-view>\\r\\n\\r\\n  <ngx-mat-year-view\\r\\n      *ngSwitchCase=\\\"'year'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\r\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\r\\n  </ngx-mat-year-view>\\r\\n\\r\\n  <ngx-mat-multi-year-view\\r\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\r\\n      [(activeDate)]=\\\"activeDate\\\"\\r\\n      [selected]=\\\"selected\\\"\\r\\n      [dateFilter]=\\\"dateFilter\\\"\\r\\n      [maxDate]=\\\"maxDate\\\"\\r\\n      [minDate]=\\\"minDate\\\"\\r\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\r\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\r\\n  </ngx-mat-multi-year-view>\\r\\n</div>\\r\\n\", styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0}.mat-calendar-content{padding:0 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(4.71429% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button:after,.mat-calendar-next-button:after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button:after{border-left-width:2px;transform:translate(2px) rotate(-45deg)}.mat-calendar-next-button:after{border-right-width:2px;transform:translate(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider:after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.MatDatepickerIntl }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_FORMATS]\r\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { headerComponent: [{\r\n                type: Input\r\n            }], startAt: [{\r\n                type: Input\r\n            }], startView: [{\r\n                type: Input\r\n            }], selected: [{\r\n                type: Input\r\n            }], minDate: [{\r\n                type: Input\r\n            }], maxDate: [{\r\n                type: Input\r\n            }], dateFilter: [{\r\n                type: Input\r\n            }], dateClass: [{\r\n                type: Input\r\n            }], selectedChange: [{\r\n                type: Output\r\n            }], yearSelected: [{\r\n                type: Output\r\n            }], monthSelected: [{\r\n                type: Output\r\n            }], _userSelection: [{\r\n                type: Output\r\n            }], monthView: [{\r\n                type: ViewChild,\r\n                args: [NgxMatMonthView]\r\n            }], yearView: [{\r\n                type: ViewChild,\r\n                args: [NgxMatYearView]\r\n            }], multiYearView: [{\r\n                type: ViewChild,\r\n                args: [NgxMatMultiYearView]\r\n            }] } });\n\nclass NgxMatTimepickerComponent {\r\n    constructor(_dateAdapter, cd, formBuilder) {\r\n        this._dateAdapter = _dateAdapter;\r\n        this.cd = cd;\r\n        this.formBuilder = formBuilder;\r\n        this.disabled = false;\r\n        this.showSpinners = true;\r\n        this.stepHour = DEFAULT_STEP;\r\n        this.stepMinute = DEFAULT_STEP;\r\n        this.stepSecond = DEFAULT_STEP;\r\n        this.showSeconds = false;\r\n        this.disableMinute = false;\r\n        this.enableMeridian = false;\r\n        this.color = 'primary';\r\n        this.meridian = MERIDIANS.AM;\r\n        this._onChange = () => { };\r\n        this._onTouched = () => { };\r\n        this._destroyed = new Subject();\r\n        this.pattern = PATTERN_INPUT_HOUR;\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        this.form = this.formBuilder.group({\r\n            hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n            minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n            second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n        });\r\n    }\r\n    /** Hour */\r\n    get hour() {\r\n        let val = Number(this.form.controls['hour'].value);\r\n        return isNaN(val) ? 0 : val;\r\n    }\r\n    ;\r\n    get minute() {\r\n        let val = Number(this.form.controls['minute'].value);\r\n        return isNaN(val) ? 0 : val;\r\n    }\r\n    ;\r\n    get second() {\r\n        let val = Number(this.form.controls['second'].value);\r\n        return isNaN(val) ? 0 : val;\r\n    }\r\n    ;\r\n    /** Whether or not the form is valid */\r\n    get valid() {\r\n        return this.form.valid;\r\n    }\r\n    ngOnInit() {\r\n        this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n            this._updateModel();\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.disabled || changes.disableMinute) {\r\n            this._setDisableStates();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /**\r\n     * Writes a new value to the element.\r\n     * @param obj\r\n     */\r\n    writeValue(val) {\r\n        if (val != null) {\r\n            this._model = val;\r\n        }\r\n        else {\r\n            this._model = this._dateAdapter.today();\r\n            if (this.defaultTime != null) {\r\n                this._dateAdapter.setTimeByDefaultValues(this._model, this.defaultTime);\r\n            }\r\n        }\r\n        this._updateHourMinuteSecond();\r\n    }\r\n    /** Registers a callback function that is called when the control's value changes in the UI. */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Set the function to be called when the control receives a touch event.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /** Enables or disables the appropriate DOM element */\r\n    setDisabledState(isDisabled) {\r\n        this._disabled = isDisabled;\r\n        this.cd.markForCheck();\r\n    }\r\n    /**\r\n     * Format input\r\n     * @param input\r\n     */\r\n    formatInput(input) {\r\n        input.value = input.value.replace(NUMERIC_REGEX, '');\r\n    }\r\n    /** Toggle meridian */\r\n    toggleMeridian() {\r\n        this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n        this.change('hour');\r\n    }\r\n    /** Change property of time */\r\n    change(prop, up) {\r\n        const next = this._getNextValueByProp(prop, up);\r\n        this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n        this._updateModel();\r\n    }\r\n    /** Update controls of form by model */\r\n    _updateHourMinuteSecond() {\r\n        let _hour = this._dateAdapter.getHour(this._model);\r\n        const _minute = this._dateAdapter.getMinute(this._model);\r\n        const _second = this._dateAdapter.getSecond(this._model);\r\n        if (this.enableMeridian) {\r\n            if (_hour >= LIMIT_TIMES.meridian) {\r\n                _hour = _hour - LIMIT_TIMES.meridian;\r\n                this.meridian = MERIDIANS.PM;\r\n            }\r\n            else {\r\n                this.meridian = MERIDIANS.AM;\r\n            }\r\n            if (_hour === 0) {\r\n                _hour = LIMIT_TIMES.meridian;\r\n            }\r\n        }\r\n        this.form.controls['hour'].setValue(formatTwoDigitTimeValue(_hour));\r\n        this.form.controls['minute'].setValue(formatTwoDigitTimeValue(_minute));\r\n        this.form.controls['second'].setValue(formatTwoDigitTimeValue(_second));\r\n    }\r\n    /** Update model */\r\n    _updateModel() {\r\n        let _hour = this.hour;\r\n        if (this.enableMeridian) {\r\n            if (this.meridian === MERIDIANS.AM && _hour === LIMIT_TIMES.meridian) {\r\n                _hour = 0;\r\n            }\r\n            else if (this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n                _hour = _hour + LIMIT_TIMES.meridian;\r\n            }\r\n        }\r\n        this._dateAdapter.setHour(this._model, _hour);\r\n        this._dateAdapter.setMinute(this._model, this.minute);\r\n        this._dateAdapter.setSecond(this._model, this.second);\r\n        this._onChange(this._model);\r\n    }\r\n    /**\r\n     * Get next value by property\r\n     * @param prop\r\n     * @param up\r\n     */\r\n    _getNextValueByProp(prop, up) {\r\n        const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n        const min = LIMIT_TIMES[`min${keyProp}`];\r\n        let max = LIMIT_TIMES[`max${keyProp}`];\r\n        if (prop === 'hour' && this.enableMeridian) {\r\n            max = LIMIT_TIMES.meridian;\r\n        }\r\n        let next;\r\n        if (up == null) {\r\n            next = this[prop] % (max);\r\n            if (prop === 'hour' && this.enableMeridian) {\r\n                if (next === 0)\r\n                    next = max;\r\n            }\r\n        }\r\n        else {\r\n            next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n            if (prop === 'hour' && this.enableMeridian) {\r\n                next = next % (max + 1);\r\n                if (next === 0)\r\n                    next = up ? 1 : max;\r\n            }\r\n            else {\r\n                next = next % max;\r\n            }\r\n            if (up) {\r\n                next = next > max ? (next - max + min) : next;\r\n            }\r\n            else {\r\n                next = next < min ? (next - min + max) : next;\r\n            }\r\n        }\r\n        return next;\r\n    }\r\n    /**\r\n     * Set disable states\r\n     */\r\n    _setDisableStates() {\r\n        if (this.disabled) {\r\n            this.form.disable();\r\n        }\r\n        else {\r\n            this.form.enable();\r\n            if (this.disableMinute) {\r\n                this.form.get('minute').disable();\r\n                if (this.showSeconds) {\r\n                    this.form.get('second').disable();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerComponent, deps: [{ token: NgxMatDateAdapter, optional: true }, { token: i0.ChangeDetectorRef }, { token: i2$1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatTimepickerComponent, selector: \"ngx-mat-timepicker\", inputs: { disabled: \"disabled\", showSpinners: \"showSpinners\", stepHour: \"stepHour\", stepMinute: \"stepMinute\", stepSecond: \"stepSecond\", showSeconds: \"showSeconds\", disableMinute: \"disableMinute\", enableMeridian: \"enableMeridian\", defaultTime: \"defaultTime\", color: \"color\" }, host: { classAttribute: \"ngx-mat-timepicker\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef((() => NgxMatTimepickerComponent)),\r\n            multi: true\r\n        }\r\n    ], exportAs: [\"ngxMatTimepicker\"], usesOnChanges: true, ngImport: i0, template: \"<form [formGroup]=\\\"form\\\">\\r\\n  <table class=\\\"ngx-mat-timepicker-table\\\">\\r\\n    <tbody class=\\\"ngx-mat-timepicker-tbody\\\">\\r\\n      <tr *ngIf=\\\"showSpinners\\\">\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('hour', true)\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td></td>\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('minute', true)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button> </td>\\r\\n        <td></td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('second', true)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\"></td>\\r\\n      </tr>\\r\\n\\r\\n      <tr>\\r\\n        <td>\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\" formControlName=\\\"hour\\\"\\r\\n              (keydown.ArrowUp)=\\\"change('hour', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('hour', false); $event.preventDefault()\\\" (blur)=\\\"change('hour')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n        <td class=\\\"ngx-mat-timepicker-spacer\\\">&#58;</td>\\r\\n        <td>\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\"\\r\\n              formControlName=\\\"minute\\\" (keydown.ArrowUp)=\\\"change('minute', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('minute', false); $event.preventDefault()\\\" (blur)=\\\"change('minute')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"showSeconds\\\" class=\\\"ngx-mat-timepicker-spacer\\\">&#58;</td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\"\\r\\n              formControlName=\\\"second\\\" (keydown.ArrowUp)=\\\"change('second', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('second', false); $event.preventDefault()\\\" (blur)=\\\"change('second')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-meridian\\\">\\r\\n          <button mat-button (click)=\\\"toggleMeridian()\\\" mat-stroked-button [color]=\\\"color\\\" [disabled]=\\\"disabled\\\">\\r\\n            {{meridian}}\\r\\n          </button>\\r\\n        </td>\\r\\n      </tr>\\r\\n\\r\\n      <tr *ngIf=\\\"showSpinners\\\">\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('hour', false)\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button> </td>\\r\\n        <td></td>\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('minute', false)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button> </td>\\r\\n        <td *ngIf=\\\"showSeconds\\\"></td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('second', false)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\"></td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</form>\", styles: [\".ngx-mat-timepicker{font-size:13px}.ngx-mat-timepicker form{min-width:90px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td{text-align:center}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td.ngx-mat-timepicker-spacer{font-weight:bold}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td.ngx-mat-timepicker-meridian .mat-button{min-width:64px;line-height:36px;min-width:0;border-radius:50%;width:36px;height:36px;padding:0;flex-shrink:0}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-icon-button{height:24px;width:24px;line-height:24px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-icon-button .mat-icon{font-size:24px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-form-field{width:20px;max-width:20px;text-align:center}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i2$2.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i5$1.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { kind: \"directive\", type: i2$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i2$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i2$1.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i2$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i2$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-timepicker', host: {\r\n                        'class': 'ngx-mat-timepicker'\r\n                    }, providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef((() => NgxMatTimepickerComponent)),\r\n                            multi: true\r\n                        }\r\n                    ], exportAs: 'ngxMatTimepicker', encapsulation: ViewEncapsulation.None, template: \"<form [formGroup]=\\\"form\\\">\\r\\n  <table class=\\\"ngx-mat-timepicker-table\\\">\\r\\n    <tbody class=\\\"ngx-mat-timepicker-tbody\\\">\\r\\n      <tr *ngIf=\\\"showSpinners\\\">\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('hour', true)\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td></td>\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('minute', true)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button> </td>\\r\\n        <td></td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_less icon\\\" (click)=\\\"change('second', true)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_less</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\"></td>\\r\\n      </tr>\\r\\n\\r\\n      <tr>\\r\\n        <td>\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\" formControlName=\\\"hour\\\"\\r\\n              (keydown.ArrowUp)=\\\"change('hour', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('hour', false); $event.preventDefault()\\\" (blur)=\\\"change('hour')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n        <td class=\\\"ngx-mat-timepicker-spacer\\\">&#58;</td>\\r\\n        <td>\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\"\\r\\n              formControlName=\\\"minute\\\" (keydown.ArrowUp)=\\\"change('minute', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('minute', false); $event.preventDefault()\\\" (blur)=\\\"change('minute')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"showSeconds\\\" class=\\\"ngx-mat-timepicker-spacer\\\">&#58;</td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <mat-form-field appearance=\\\"legacy\\\">\\r\\n            <input type=\\\"text\\\" matInput (input)=\\\"formatInput($any($event).target)\\\" maxlength=\\\"2\\\"\\r\\n              formControlName=\\\"second\\\" (keydown.ArrowUp)=\\\"change('second', true); $event.preventDefault()\\\"\\r\\n              (keydown.ArrowDown)=\\\"change('second', false); $event.preventDefault()\\\" (blur)=\\\"change('second')\\\">\\r\\n          </mat-form-field>\\r\\n        </td>\\r\\n\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-meridian\\\">\\r\\n          <button mat-button (click)=\\\"toggleMeridian()\\\" mat-stroked-button [color]=\\\"color\\\" [disabled]=\\\"disabled\\\">\\r\\n            {{meridian}}\\r\\n          </button>\\r\\n        </td>\\r\\n      </tr>\\r\\n\\r\\n      <tr *ngIf=\\\"showSpinners\\\">\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('hour', false)\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button> </td>\\r\\n        <td></td>\\r\\n        <td>\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('minute', false)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button> </td>\\r\\n        <td *ngIf=\\\"showSeconds\\\"></td>\\r\\n        <td *ngIf=\\\"showSeconds\\\">\\r\\n          <button type=\\\"button\\\" mat-icon-button aria-label=\\\"expand_more icon\\\" (click)=\\\"change('second', false)\\\"\\r\\n            [disabled]=\\\"disabled || disableMinute\\\">\\r\\n            <mat-icon>expand_more</mat-icon>\\r\\n          </button>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\" class=\\\"ngx-mat-timepicker-spacer\\\"></td>\\r\\n        <td *ngIf=\\\"enableMeridian\\\"></td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</form>\", styles: [\".ngx-mat-timepicker{font-size:13px}.ngx-mat-timepicker form{min-width:90px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td{text-align:center}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td.ngx-mat-timepicker-spacer{font-weight:bold}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td.ngx-mat-timepicker-meridian .mat-button{min-width:64px;line-height:36px;min-width:0;border-radius:50%;width:36px;height:36px;padding:0;flex-shrink:0}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-icon-button{height:24px;width:24px;line-height:24px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-icon-button .mat-icon{font-size:24px}.ngx-mat-timepicker form .ngx-mat-timepicker-table .ngx-mat-timepicker-tbody tr td .mat-form-field{width:20px;max-width:20px;text-align:center}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2$1.FormBuilder }]; }, propDecorators: { disabled: [{\r\n                type: Input\r\n            }], showSpinners: [{\r\n                type: Input\r\n            }], stepHour: [{\r\n                type: Input\r\n            }], stepMinute: [{\r\n                type: Input\r\n            }], stepSecond: [{\r\n                type: Input\r\n            }], showSeconds: [{\r\n                type: Input\r\n            }], disableMinute: [{\r\n                type: Input\r\n            }], enableMeridian: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nconst _MatDatetimepickerContentBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n});\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * NgxMatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\nclass NgxMatDatetimeContent extends _MatDatetimepickerContentBase {\r\n    constructor(elementRef, cd, _viewContainerRef) {\r\n        super(elementRef);\r\n        this.cd = cd;\r\n        this._viewContainerRef = _viewContainerRef;\r\n    }\r\n    /** Whether or not the selected date is valid (min,max...) */\r\n    get valid() {\r\n        if (this.datepicker.hideTime)\r\n            return this.datepicker.valid;\r\n        return this._timePicker && this._timePicker.valid && this.datepicker.valid;\r\n    }\r\n    get isViewMonth() {\r\n        if (!this._calendar || this._calendar.currentView == null)\r\n            return true;\r\n        return this._calendar.currentView == 'month';\r\n    }\r\n    ngAfterViewInit() {\r\n        this._calendar.focusActiveCell();\r\n        if (this.datepicker._customIcon) {\r\n            this._templateCustomIconPortal = new TemplatePortal(this.datepicker._customIcon, this._viewContainerRef);\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatDatetimeContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimeContent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatDatetimeContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatDatetimeContent, selector: \"ngx-mat-datetime-content\", inputs: { color: \"color\" }, host: { properties: { \"@transformPanel\": \"\\\"enter\\\"\", \"class.mat-datepicker-content-touch\": \"datepicker.touchUi\" }, classAttribute: \"mat-datepicker-content\" }, viewQueries: [{ propertyName: \"_calendar\", first: true, predicate: NgxMatCalendar, descendants: true }, { propertyName: \"_timePicker\", first: true, predicate: NgxMatTimepickerComponent, descendants: true }], exportAs: [\"ngxMatDatetimeContent\"], usesInheritance: true, ngImport: i0, template: \"<ngx-mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\"\\r\\n    [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\"\\r\\n    [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\r\\n    [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\"\\r\\n    (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\r\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\">\\r\\n</ngx-mat-calendar>\\r\\n<ng-container *ngIf=\\\"isViewMonth\\\">\\r\\n    <div *ngIf=\\\"!datepicker._hideTime\\\" class=\\\"time-container\\\" [class.disable-seconds]=\\\"!datepicker._showSeconds\\\">\\r\\n        <ngx-mat-timepicker [showSpinners]=\\\"datepicker._showSpinners\\\" [showSeconds]=\\\"datepicker._showSeconds\\\"\\r\\n            [disabled]=\\\"datepicker._disabled\\\" [stepHour]=\\\"datepicker._stepHour\\\" [stepMinute]=\\\"datepicker._stepMinute\\\"\\r\\n            [stepSecond]=\\\"datepicker._stepSecond\\\" [(ngModel)]=\\\"datepicker._selected\\\" [color]=\\\"datepicker._color\\\"\\r\\n            [enableMeridian]=\\\"datepicker._enableMeridian\\\" [disableMinute]=\\\"datepicker._disableMinute\\\">\\r\\n        </ngx-mat-timepicker>\\r\\n    </div>\\r\\n    <div class=\\\"actions\\\">\\r\\n        <button mat-button (click)=\\\"datepicker.ok()\\\" mat-stroked-button [color]=\\\"datepicker._color\\\" cdkFocusInitial\\r\\n            [disabled]=\\\"!valid\\\">\\r\\n            <mat-icon *ngIf=\\\"!datepicker._customIcon\\\">done</mat-icon>\\r\\n            <ng-template [cdkPortalOutlet]=\\\"_templateCustomIconPortal\\\"></ng-template>\\r\\n        </button>\\r\\n    </div>\\r\\n</ng-container>\", styles: [\".mat-datepicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f}.mat-datepicker-content .mat-calendar{width:296px}.mat-datepicker-content .time-container{display:flex;position:relative;padding-top:5px;justify-content:center}.mat-datepicker-content .time-container.disable-seconds .ngx-mat-timepicker .table{margin-left:9px}.mat-datepicker-content .time-container:before{content:\\\"\\\";position:absolute;top:0;left:0;right:0;height:1px;background-color:#0000001f}.mat-datepicker-content .actions{display:flex;padding:5px 15px 10px;justify-content:flex-end}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { kind: \"directive\", type: i2$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: NgxMatTimepickerComponent, selector: \"ngx-mat-timepicker\", inputs: [\"disabled\", \"showSpinners\", \"stepHour\", \"stepMinute\", \"stepSecond\", \"showSeconds\", \"disableMinute\", \"enableMeridian\", \"defaultTime\", \"color\"], exportAs: [\"ngxMatTimepicker\"] }, { kind: \"component\", type: NgxMatCalendar, selector: \"ngx-mat-calendar\", inputs: [\"headerComponent\", \"startAt\", \"startView\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\"], outputs: [\"selectedChange\", \"yearSelected\", \"monthSelected\", \"_userSelection\"], exportAs: [\"ngxMatCalendar\"] }], animations: [\r\n        matDatepickerAnimations.transformPanel,\r\n        matDatepickerAnimations.fadeInCalendar,\r\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimeContent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-datetime-content', host: {\r\n                        'class': 'mat-datepicker-content',\r\n                        '[@transformPanel]': '\"enter\"',\r\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n                    }, animations: [\r\n                        matDatepickerAnimations.transformPanel,\r\n                        matDatepickerAnimations.fadeInCalendar,\r\n                    ], exportAs: 'ngxMatDatetimeContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['color'], template: \"<ngx-mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\"\\r\\n    [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\"\\r\\n    [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\r\\n    [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\"\\r\\n    (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\r\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\">\\r\\n</ngx-mat-calendar>\\r\\n<ng-container *ngIf=\\\"isViewMonth\\\">\\r\\n    <div *ngIf=\\\"!datepicker._hideTime\\\" class=\\\"time-container\\\" [class.disable-seconds]=\\\"!datepicker._showSeconds\\\">\\r\\n        <ngx-mat-timepicker [showSpinners]=\\\"datepicker._showSpinners\\\" [showSeconds]=\\\"datepicker._showSeconds\\\"\\r\\n            [disabled]=\\\"datepicker._disabled\\\" [stepHour]=\\\"datepicker._stepHour\\\" [stepMinute]=\\\"datepicker._stepMinute\\\"\\r\\n            [stepSecond]=\\\"datepicker._stepSecond\\\" [(ngModel)]=\\\"datepicker._selected\\\" [color]=\\\"datepicker._color\\\"\\r\\n            [enableMeridian]=\\\"datepicker._enableMeridian\\\" [disableMinute]=\\\"datepicker._disableMinute\\\">\\r\\n        </ngx-mat-timepicker>\\r\\n    </div>\\r\\n    <div class=\\\"actions\\\">\\r\\n        <button mat-button (click)=\\\"datepicker.ok()\\\" mat-stroked-button [color]=\\\"datepicker._color\\\" cdkFocusInitial\\r\\n            [disabled]=\\\"!valid\\\">\\r\\n            <mat-icon *ngIf=\\\"!datepicker._customIcon\\\">done</mat-icon>\\r\\n            <ng-template [cdkPortalOutlet]=\\\"_templateCustomIconPortal\\\"></ng-template>\\r\\n        </button>\\r\\n    </div>\\r\\n</ng-container>\", styles: [\".mat-datepicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f}.mat-datepicker-content .mat-calendar{width:296px}.mat-datepicker-content .time-container{display:flex;position:relative;padding-top:5px;justify-content:center}.mat-datepicker-content .time-container.disable-seconds .ngx-mat-timepicker .table{margin-left:9px}.mat-datepicker-content .time-container:before{content:\\\"\\\";position:absolute;top:0;left:0;right:0;height:1px;background-color:#0000001f}.mat-datepicker-content .actions{display:flex;padding:5px 15px 10px;justify-content:flex-end}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { _calendar: [{\r\n                type: ViewChild,\r\n                args: [NgxMatCalendar]\r\n            }], _timePicker: [{\r\n                type: ViewChild,\r\n                args: [NgxMatTimepickerComponent]\r\n            }] } });\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\nclass NgxMatDatetimePicker {\r\n    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\r\n        this._dialog = _dialog;\r\n        this._overlay = _overlay;\r\n        this._ngZone = _ngZone;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dir = _dir;\r\n        this._document = _document;\r\n        /** The view that the calendar should start in. */\r\n        this.startView = 'month';\r\n        this._defaultColor = 'primary';\r\n        this._touchUi = false;\r\n        this._hideTime = false;\r\n        /**\r\n         * Emits selected year in multiyear view.\r\n         * This doesn't imply a change on the selected date.\r\n         */\r\n        this.yearSelected = new EventEmitter();\r\n        /**\r\n         * Emits selected month in year view.\r\n         * This doesn't imply a change on the selected date.\r\n         */\r\n        this.monthSelected = new EventEmitter();\r\n        /** Emits when the datepicker has been opened. */\r\n        this.openedStream = new EventEmitter();\r\n        /** Emits when the datepicker has been closed. */\r\n        this.closedStream = new EventEmitter();\r\n        this._opened = false;\r\n        this._showSpinners = true;\r\n        this._showSeconds = false;\r\n        this._stepHour = DEFAULT_STEP;\r\n        this._stepMinute = DEFAULT_STEP;\r\n        this._stepSecond = DEFAULT_STEP;\r\n        this._enableMeridian = false;\r\n        this._hasBackdrop = true;\r\n        /** The id for the datepicker calendar. */\r\n        this.id = `mat-datepicker-${datepickerUid++}`;\r\n        this._validSelected = null;\r\n        /** The element that was focused before the datepicker was opened. */\r\n        this._focusedElementBeforeOpen = null;\r\n        /** Subscription to value changes in the associated input element. */\r\n        this._inputSubscription = Subscription.EMPTY;\r\n        /** Emits when the datepicker is disabled. */\r\n        this.stateChanges = new Subject();\r\n        /** Emits new selected date when selected date changes. */\r\n        this._selectedChanged = new Subject();\r\n        /** The form control validator for the min date. */\r\n        this._minValidator = () => {\r\n            return (!this._minDate || !this._selected ||\r\n                this._dateAdapter.compareDateWithTime(this._minDate, this._selected, this.showSeconds) <= 0) ?\r\n                null : { 'matDatetimePickerMin': { 'min': this._minDate, 'actual': this._selected } };\r\n        };\r\n        /** The form control validator for the max date. */\r\n        this._maxValidator = () => {\r\n            return (!this._maxDate || !this._selected ||\r\n                this._dateAdapter.compareDateWithTime(this._maxDate, this._selected, this.showSeconds) >= 0) ?\r\n                null : { 'matDatetimePickerMax': { 'max': this._maxDate, 'actual': this._selected } };\r\n        };\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    /** The date to open the calendar to initially. */\r\n    get startAt() {\r\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n        // selected value is.\r\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\r\n    }\r\n    set startAt(value) {\r\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n    /** Default Color palette to use on the datepicker's calendar. */\r\n    get defaultColor() {\r\n        return this._defaultColor;\r\n    }\r\n    set defaultColor(value) {\r\n        this._defaultColor = value;\r\n    }\r\n    /** Color palette to use on the datepicker's calendar. */\r\n    get color() {\r\n        return this._color ||\r\n            (this.datepickerInput ? this.datepickerInput._getThemePalette() : 'primary');\r\n    }\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n    /**\r\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n     * than a popup and elements have more padding to allow for bigger touch targets.\r\n     */\r\n    get touchUi() { return this._touchUi; }\r\n    set touchUi(value) {\r\n        this._touchUi = coerceBooleanProperty(value);\r\n    }\r\n    get hideTime() { return this._hideTime; }\r\n    set hideTime(value) {\r\n        this._hideTime = coerceBooleanProperty(value);\r\n    }\r\n    /** Whether the datepicker pop-up should be disabled. */\r\n    get disabled() {\r\n        return this._disabled === undefined && this.datepickerInput ?\r\n            this.datepickerInput.disabled : !!this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this.stateChanges.next(newValue);\r\n        }\r\n    }\r\n    /** Whether the calendar is open. */\r\n    get opened() { return this._opened; }\r\n    set opened(value) { value ? this.open() : this.close(); }\r\n    /** Whether the timepicker'spinners is shown. */\r\n    get showSpinners() { return this._showSpinners; }\r\n    set showSpinners(value) { this._showSpinners = value; }\r\n    /** Whether the second part is disabled. */\r\n    get showSeconds() { return this._showSeconds; }\r\n    set showSeconds(value) { this._showSeconds = value; }\r\n    /** Step hour */\r\n    get stepHour() { return this._stepHour; }\r\n    set stepHour(value) { this._stepHour = value; }\r\n    /** Step minute */\r\n    get stepMinute() { return this._stepMinute; }\r\n    set stepMinute(value) { this._stepMinute = value; }\r\n    /** Step second */\r\n    get stepSecond() { return this._stepSecond; }\r\n    set stepSecond(value) { this._stepSecond = value; }\r\n    /** Enable meridian */\r\n    get enableMeridian() { return this._enableMeridian; }\r\n    set enableMeridian(value) { this._enableMeridian = value; }\r\n    /** disable minute */\r\n    get disableMinute() { return this._disableMinute; }\r\n    set disableMinute(value) { this._disableMinute = value; }\r\n    /** Step second */\r\n    get defaultTime() { return this._defaultTime; }\r\n    set defaultTime(value) { this._defaultTime = value; }\r\n    /** The currently selected date. */\r\n    get _selected() { return this._validSelected; }\r\n    set _selected(value) { this._validSelected = value; }\r\n    /** The minimum selectable date. */\r\n    get _minDate() {\r\n        return this.datepickerInput && this.datepickerInput.min;\r\n    }\r\n    /** The maximum selectable date. */\r\n    get _maxDate() {\r\n        return this.datepickerInput && this.datepickerInput.max;\r\n    }\r\n    get valid() {\r\n        const minValidators = this._minValidator();\r\n        const maxValidators = this._maxValidator();\r\n        return minValidators == null && maxValidators == null;\r\n    }\r\n    get _dateFilter() {\r\n        return this.datepickerInput && this.datepickerInput._dateFilter;\r\n    }\r\n    ngOnDestroy() {\r\n        this.close();\r\n        if (this._popupRef) {\r\n            this._popupRef.dispose();\r\n            this._popupComponentRef = null;\r\n        }\r\n        this._inputSubscription.unsubscribe();\r\n        this.stateChanges.complete();\r\n    }\r\n    /** Selects the given date */\r\n    select(date) {\r\n        this._dateAdapter.copyTime(date, this._selected);\r\n        this._selected = date;\r\n    }\r\n    /** Emits the selected year in multiyear view */\r\n    _selectYear(normalizedYear) {\r\n        this.yearSelected.emit(normalizedYear);\r\n    }\r\n    /** Emits selected month in year view */\r\n    _selectMonth(normalizedMonth) {\r\n        this.monthSelected.emit(normalizedMonth);\r\n    }\r\n    /** OK button handler and close*/\r\n    ok() {\r\n        const cloned = this._dateAdapter.clone(this._selected);\r\n        this._selectedChanged.next(cloned);\r\n        this.close();\r\n    }\r\n    /** Cancel and close */\r\n    cancel() {\r\n        this._selected = this._rawValue;\r\n        this.close();\r\n    }\r\n    /**\r\n     * Register an input with this datepicker.\r\n     * @param input The datepicker input to register with this datepicker.\r\n     */\r\n    _registerInput(input) {\r\n        if (this.datepickerInput) {\r\n            throw Error('A NgxMatDatepicker can only be associated with a single input.');\r\n        }\r\n        this.datepickerInput = input;\r\n        this._inputSubscription =\r\n            this.datepickerInput._valueChange.subscribe((value) => this._selected = value);\r\n    }\r\n    /** Open the calendar. */\r\n    open() {\r\n        this._rawValue = this._selected != null\r\n            ? this._dateAdapter.clone(this._selected) : null;\r\n        if (this._selected == null) {\r\n            this._selected = this._dateAdapter.today();\r\n            if (this.defaultTime != null) {\r\n                this._dateAdapter.setTimeByDefaultValues(this._selected, this.defaultTime);\r\n            }\r\n        }\r\n        if (this._opened || this.disabled) {\r\n            return;\r\n        }\r\n        if (!this.datepickerInput) {\r\n            throw Error('Attempted to open an NgxMatDatepicker with no associated input.');\r\n        }\r\n        if (this._document) {\r\n            this._focusedElementBeforeOpen = this._document.activeElement;\r\n        }\r\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n        this._opened = true;\r\n        this.openedStream.emit();\r\n    }\r\n    /** Close the calendar. */\r\n    close() {\r\n        if (!this._opened) {\r\n            return;\r\n        }\r\n        if (this._popupRef && this._popupRef.hasAttached()) {\r\n            this._popupRef.detach();\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n            this._dialogRef = null;\r\n        }\r\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n            this._calendarPortal.detach();\r\n        }\r\n        const completeClose = () => {\r\n            // The `_opened` could've been reset already if\r\n            // we got two events in quick succession.\r\n            if (this._opened) {\r\n                this._opened = false;\r\n                this.closedStream.emit();\r\n                this._focusedElementBeforeOpen = null;\r\n            }\r\n        };\r\n        if (this._focusedElementBeforeOpen &&\r\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n            // able to close the calendar at all. We work around it by making the logic, that marks\r\n            // the datepicker as closed, async as well.\r\n            this._focusedElementBeforeOpen.focus();\r\n            setTimeout(completeClose);\r\n        }\r\n        else {\r\n            completeClose();\r\n        }\r\n    }\r\n    /** Open the calendar as a dialog. */\r\n    _openAsDialog() {\r\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\r\n        // open at a time, however since we reset the variables in async handlers some overlays\r\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\r\n        // by holding down the enter key).\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n        }\r\n        this._dialogRef = this._dialog.open(NgxMatDatetimeContent, {\r\n            direction: this._dir ? this._dir.value : 'ltr',\r\n            viewContainerRef: this._viewContainerRef,\r\n            panelClass: 'mat-datepicker-dialog',\r\n            hasBackdrop: this._hasBackdrop\r\n        });\r\n        this._dialogRef.afterClosed().subscribe(() => this.close());\r\n        this._dialogRef.componentInstance.datepicker = this;\r\n        this._setColor();\r\n    }\r\n    /** Open the calendar as a popup. */\r\n    _openAsPopup() {\r\n        if (!this._calendarPortal) {\r\n            this._calendarPortal = new ComponentPortal(NgxMatDatetimeContent, this._viewContainerRef);\r\n        }\r\n        if (!this._popupRef) {\r\n            this._createPopup();\r\n        }\r\n        if (!this._popupRef.hasAttached()) {\r\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\r\n            this._popupComponentRef.instance.datepicker = this;\r\n            this._setColor();\r\n            // Update the position once the calendar has rendered.\r\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n                this._popupRef.updatePosition();\r\n            });\r\n        }\r\n    }\r\n    /** Create the popup. */\r\n    _createPopup() {\r\n        const overlayConfig = new OverlayConfig({\r\n            positionStrategy: this._createPopupPositionStrategy(),\r\n            hasBackdrop: this._hasBackdrop,\r\n            backdropClass: 'mat-overlay-transparent-backdrop',\r\n            direction: this._dir,\r\n            scrollStrategy: this._scrollStrategy(),\r\n            panelClass: 'mat-datepicker-popup',\r\n        });\r\n        this._popupRef = this._overlay.create(overlayConfig);\r\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {\r\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n            return event.keyCode === ESCAPE ||\r\n                (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n        }))).subscribe(event => {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            (this._hasBackdrop && event) ? this.cancel() : this.close();\r\n        });\r\n    }\r\n    /** Create the popup PositionStrategy. */\r\n    _createPopupPositionStrategy() {\r\n        return this._overlay.position()\r\n            .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\r\n            .withTransformOriginOn('.mat-datepicker-content')\r\n            .withFlexibleDimensions(false)\r\n            .withViewportMargin(8)\r\n            .withLockedPosition()\r\n            .withPositions([\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'bottom',\r\n                overlayX: 'end',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'top',\r\n                overlayX: 'end',\r\n                overlayY: 'bottom'\r\n            }\r\n        ]);\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n    /** Passes the current theme color along to the calendar overlay. */\r\n    _setColor() {\r\n        const color = this.color;\r\n        if (this._popupComponentRef) {\r\n            this._popupComponentRef.instance.color = color;\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.componentInstance.color = color;\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatDatetimePicker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePicker, deps: [{ token: i8.MatDialog }, { token: i9.Overlay }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: MAT_DATEPICKER_SCROLL_STRATEGY }, { token: NgxMatDateAdapter, optional: true }, { token: i2.Directionality, optional: true }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatDatetimePicker.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatDatetimePicker, selector: \"ngx-mat-datetime-picker\", inputs: { calendarHeaderComponent: \"calendarHeaderComponent\", startAt: \"startAt\", startView: \"startView\", defaultColor: \"defaultColor\", color: \"color\", touchUi: \"touchUi\", hideTime: \"hideTime\", disabled: \"disabled\", panelClass: \"panelClass\", dateClass: \"dateClass\", opened: \"opened\", showSpinners: \"showSpinners\", showSeconds: \"showSeconds\", stepHour: \"stepHour\", stepMinute: \"stepMinute\", stepSecond: \"stepSecond\", enableMeridian: \"enableMeridian\", disableMinute: \"disableMinute\", defaultTime: \"defaultTime\" }, outputs: { yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", openedStream: \"opened\", closedStream: \"closed\" }, queries: [{ propertyName: \"_customIcon\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"ngxMatDatetimePicker\"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePicker, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-mat-datetime-picker',\r\n                    template: '',\r\n                    exportAs: 'ngxMatDatetimePicker',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i8.MatDialog }, { type: i9.Overlay }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DATEPICKER_SCROLL_STRATEGY]\r\n                }] }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i2.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { calendarHeaderComponent: [{\r\n                type: Input\r\n            }], _customIcon: [{\r\n                type: ContentChild,\r\n                args: [TemplateRef]\r\n            }], startAt: [{\r\n                type: Input\r\n            }], startView: [{\r\n                type: Input\r\n            }], defaultColor: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }], touchUi: [{\r\n                type: Input\r\n            }], hideTime: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], yearSelected: [{\r\n                type: Output\r\n            }], monthSelected: [{\r\n                type: Output\r\n            }], panelClass: [{\r\n                type: Input\r\n            }], dateClass: [{\r\n                type: Input\r\n            }], openedStream: [{\r\n                type: Output,\r\n                args: ['opened']\r\n            }], closedStream: [{\r\n                type: Output,\r\n                args: ['closed']\r\n            }], opened: [{\r\n                type: Input\r\n            }], showSpinners: [{\r\n                type: Input\r\n            }], showSeconds: [{\r\n                type: Input\r\n            }], stepHour: [{\r\n                type: Input\r\n            }], stepMinute: [{\r\n                type: Input\r\n            }], stepSecond: [{\r\n                type: Input\r\n            }], enableMeridian: [{\r\n                type: Input\r\n            }], disableMinute: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }] } });\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @docs-private */\r\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n/** @docs-private */\r\nconst MAT_DATEPICKER_VALIDATORS = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatDatetimeInput),\r\n    multi: true\r\n};\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatetimePickerInputEvent instead.\r\n */\r\nclass MatDatetimePickerInputEvent {\r\n    constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    target, \r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    targetElement) {\r\n        this.target = target;\r\n        this.targetElement = targetElement;\r\n        this.value = this.target.value;\r\n    }\r\n}\r\n/** Directive used to connect an input to a matDatetimePicker. */\r\nclass NgxMatDatetimeInput {\r\n    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\r\n        this._elementRef = _elementRef;\r\n        this._dateAdapter = _dateAdapter;\r\n        this._dateFormats = _dateFormats;\r\n        this._formField = _formField;\r\n        /** Emits when a `change` event is fired on this `<input>`. */\r\n        this.dateChange = new EventEmitter();\r\n        /** Emits when an `input` event is fired on this `<input>`. */\r\n        this.dateInput = new EventEmitter();\r\n        /** Emits when the value changes (either due to user input or programmatic change). */\r\n        this._valueChange = new EventEmitter();\r\n        /** Emits when the disabled state has changed */\r\n        this.stateChanges = new EventEmitter();\r\n        this._onTouched = () => { };\r\n        this._cvaOnChange = () => { };\r\n        this._validatorOnChange = () => { };\r\n        this._datepickerSubscription = Subscription.EMPTY;\r\n        this._localeSubscription = Subscription.EMPTY;\r\n        /** The form control validator for whether the input parses. */\r\n        this._parseValidator = () => {\r\n            return this._lastValueValid ?\r\n                null : { 'matDatetimePickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n        };\r\n        /** The form control validator for the min date. */\r\n        this._minValidator = (control) => {\r\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n            return (!this.min || !controlValue ||\r\n                this._dateAdapter.compareDateWithTime(this.min, controlValue, this._datepicker.showSeconds) <= 0) ?\r\n                null : { 'matDatetimePickerMin': { 'min': this.min, 'actual': controlValue } };\r\n        };\r\n        /** The form control validator for the max date. */\r\n        this._maxValidator = (control) => {\r\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n            return (!this.max || !controlValue ||\r\n                this._dateAdapter.compareDateWithTime(this.max, controlValue, this._datepicker.showSeconds) >= 0) ?\r\n                null : { 'matDatetimePickerMax': { 'max': this.max, 'actual': controlValue } };\r\n        };\r\n        /** The form control validator for the date filter. */\r\n        this._filterValidator = (control) => {\r\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n            return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n                null : { 'matDatetimePickerFilter': true };\r\n        };\r\n        /** The combined form control validator for this input. */\r\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n        /** Whether the last value set on the input was valid. */\r\n        this._lastValueValid = false;\r\n        if (!this._dateAdapter) {\r\n            throw createMissingDateImplError('NgxMatDateAdapter');\r\n        }\r\n        if (!this._dateFormats) {\r\n            throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n        }\r\n        // Update the displayed date when the locale changes.\r\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n            this.value = this.value;\r\n        });\r\n    }\r\n    /** The datepicker that this input is associated with. */\r\n    set ngxMatDatetimePicker(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        this._datepicker = value;\r\n        this._datepicker._registerInput(this);\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    /** Function that can be used to filter out dates within the datepicker. */\r\n    set ngxMatDatetimePickerFilter(value) {\r\n        this._dateFilter = value;\r\n        this._validatorOnChange();\r\n    }\r\n    /** The value of the input. */\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        value = this._dateAdapter.deserialize(value);\r\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n        value = this._getValidDateOrNull(value);\r\n        const oldDate = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    /** The minimum valid date. */\r\n    get min() { return this._min; }\r\n    set min(value) {\r\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    /** The maximum valid date. */\r\n    get max() { return this._max; }\r\n    set max(value) {\r\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n        this._validatorOnChange();\r\n    }\r\n    /** Whether the datepicker-input is disabled. */\r\n    get disabled() { return !!this._disabled; }\r\n    set disabled(value) {\r\n        const newValue = value != null && `${value}` !== 'false';\r\n        const element = this._elementRef.nativeElement;\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this.stateChanges.emit(undefined);\r\n        }\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._datepickerSubscription.unsubscribe();\r\n        this._localeSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n    /** @docs-private */\r\n    registerOnValidatorChange(fn) {\r\n        this._validatorOnChange = fn;\r\n    }\r\n    /** @docs-private */\r\n    validate(c) {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef() {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n    /**\r\n     * Gets the element that the datepicker popup should be connected to.\r\n     * @return The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin() {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._cvaOnChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    _onKeydown(event) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._datepicker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    _onInput(value) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n        date = this._getValidDateOrNull(date);\r\n        const isSameTime = this._dateAdapter.isSameTime(date, this._value);\r\n        if ((date != null && (!isSameTime || !this._dateAdapter.sameDate(date, this._value)))\r\n            || (date == null && this._value != null)) {\r\n            this._value = date;\r\n            this._cvaOnChange(date);\r\n            this._valueChange.emit(date);\r\n            this.dateInput.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n        }\r\n        else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n    _onChange() {\r\n        this.dateChange.emit(new MatDatetimePickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    _getThemePalette() {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n        this._onTouched();\r\n    }\r\n    /** Handles focus events on the input. */\r\n    _onFocus() {\r\n        // Close datetime picker if opened\r\n        if (this._datepicker && this._datepicker.opened) {\r\n            this._datepicker.cancel();\r\n        }\r\n    }\r\n    /** Formats a value and sets it on the input element. */\r\n    _formatValue(value) {\r\n        this._elementRef.nativeElement.value =\r\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n    }\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    _getValidDateOrNull(obj) {\r\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatDatetimeInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimeInput, deps: [{ token: i0.ElementRef }, { token: NgxMatDateAdapter, optional: true }, { token: NGX_MAT_DATE_FORMATS, optional: true }, { token: i2$2.MatFormField, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NgxMatDatetimeInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.5\", type: NgxMatDatetimeInput, selector: \"input[ngxMatDatetimePicker]\", inputs: { ngxMatDatetimePicker: \"ngxMatDatetimePicker\", ngxMatDatetimePickerFilter: \"ngxMatDatetimePickerFilter\", value: \"value\", min: \"min\", max: \"max\", disabled: \"disabled\" }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, host: { listeners: { \"input\": \"_onInput($event.target.value)\", \"change\": \"_onChange()\", \"blur\": \"_onBlur()\", \"focus\": \"_onFocus()\", \"keydown\": \"_onKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"_datepicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"(_datepicker?.opened && _datepicker.id) || null\", \"attr.min\": \"min ? _dateAdapter.toIso8601(min) : null\", \"attr.max\": \"max ? _dateAdapter.toIso8601(max) : null\", \"disabled\": \"disabled\" } }, providers: [\r\n        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n        MAT_DATEPICKER_VALIDATORS,\r\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n    ], exportAs: [\"ngxMatDatetimePickerInput\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimeInput, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'input[ngxMatDatetimePicker]',\r\n                    providers: [\r\n                        MAT_DATEPICKER_VALUE_ACCESSOR,\r\n                        MAT_DATEPICKER_VALIDATORS,\r\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatetimeInput },\r\n                    ],\r\n                    host: {\r\n                        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n                        '[disabled]': 'disabled',\r\n                        '(input)': '_onInput($event.target.value)',\r\n                        '(change)': '_onChange()',\r\n                        '(blur)': '_onBlur()',\r\n                        '(focus)': '_onFocus()',\r\n                        '(keydown)': '_onKeydown($event)',\r\n                    },\r\n                    exportAs: 'ngxMatDatetimePickerInput',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NgxMatDateAdapter, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_DATE_FORMATS]\r\n                }] }, { type: i2$2.MatFormField, decorators: [{\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { ngxMatDatetimePicker: [{\r\n                type: Input\r\n            }], ngxMatDatetimePickerFilter: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], dateChange: [{\r\n                type: Output\r\n            }], dateInput: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxMatTimepickerModule {\r\n}\r\n/** @nocollapse */ NgxMatTimepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatTimepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerModule, declarations: [NgxMatTimepickerComponent], imports: [CommonModule,\r\n        MatInputModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        MatIconModule,\r\n        MatButtonModule], exports: [NgxMatTimepickerComponent] });\r\n/** @nocollapse */ NgxMatTimepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerModule, imports: [CommonModule,\r\n        MatInputModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        MatIconModule,\r\n        MatButtonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatTimepickerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatInputModule,\r\n                        ReactiveFormsModule,\r\n                        FormsModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                    ],\r\n                    exports: [\r\n                        NgxMatTimepickerComponent\r\n                    ],\r\n                    declarations: [\r\n                        NgxMatTimepickerComponent\r\n                    ]\r\n                }]\r\n        }] });\n\nclass NgxMatDatetimePickerModule {\r\n}\r\n/** @nocollapse */ NgxMatDatetimePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatDatetimePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePickerModule, declarations: [NgxMatDatetimePicker,\r\n        NgxMatDatetimeContent,\r\n        NgxMatDatetimeInput,\r\n        NgxMatCalendar,\r\n        NgxMatMonthView,\r\n        NgxMatCalendarBody,\r\n        NgxMatYearView,\r\n        NgxMatMultiYearView,\r\n        NgxMatCalendarHeader], imports: [CommonModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        PortalModule,\r\n        FormsModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatInputModule,\r\n        NgxMatTimepickerModule], exports: [NgxMatDatetimePicker,\r\n        NgxMatDatetimeInput,\r\n        NgxMatCalendar,\r\n        NgxMatMonthView,\r\n        NgxMatCalendarBody,\r\n        NgxMatYearView,\r\n        NgxMatMultiYearView,\r\n        NgxMatCalendarHeader] });\r\n/** @nocollapse */ NgxMatDatetimePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePickerModule, providers: [\r\n        MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n        {\r\n            provide: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n            useClass: DefaultNgxMatCalendarRangeStrategy\r\n        }\r\n    ], imports: [CommonModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        PortalModule,\r\n        FormsModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatInputModule,\r\n        NgxMatTimepickerModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatDatetimePickerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatDatepickerModule,\r\n                        MatDialogModule,\r\n                        PortalModule,\r\n                        FormsModule,\r\n                        MatIconModule,\r\n                        MatButtonModule,\r\n                        MatInputModule,\r\n                        NgxMatTimepickerModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatDatetimePicker,\r\n                        NgxMatDatetimeInput,\r\n                        NgxMatCalendar,\r\n                        NgxMatMonthView,\r\n                        NgxMatCalendarBody,\r\n                        NgxMatYearView,\r\n                        NgxMatMultiYearView,\r\n                        NgxMatCalendarHeader\r\n                    ],\r\n                    declarations: [\r\n                        NgxMatDatetimePicker,\r\n                        NgxMatDatetimeContent,\r\n                        NgxMatDatetimeInput,\r\n                        NgxMatCalendar,\r\n                        NgxMatMonthView,\r\n                        NgxMatCalendarBody,\r\n                        NgxMatYearView,\r\n                        NgxMatMultiYearView,\r\n                        NgxMatCalendarHeader\r\n                    ],\r\n                    entryComponents: [\r\n                        NgxMatDatetimeContent,\r\n                        NgxMatCalendarHeader\r\n                    ],\r\n                    providers: [\r\n                        MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n                        {\r\n                            provide: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n                            useClass: DefaultNgxMatCalendarRangeStrategy\r\n                        }\r\n                    ]\r\n                }]\r\n        }] });\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API;\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n}\r\ncatch {\r\n    SUPPORTS_INTL_API = false;\r\n}\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n    'long': [\r\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n        'October', 'November', 'December'\r\n    ],\r\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n/** Creates an array and fills it with values. */\r\nfunction range(length, valueFunction) {\r\n    const valuesArray = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        valuesArray[i] = valueFunction(i);\r\n    }\r\n    return valuesArray;\r\n}\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\nclass NgxMatNativeDateAdapter extends NgxMatDateAdapter {\r\n    constructor(matDateLocale, platform) {\r\n        super();\r\n        /**\r\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n         * will produce `'8/13/1800'`.\r\n         *\r\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n         * getting the string representation of a Date object from its utc representation. We're keeping\r\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n         * though.\r\n         */\r\n        this.useUtcForDisplay = true;\r\n        super.setLocale(matDateLocale);\r\n        // IE does its own time zone correction, so we disable this on IE.\r\n        this.useUtcForDisplay = !platform.TRIDENT;\r\n        this._clampDate = platform.TRIDENT || platform.EDGE;\r\n    }\r\n    getYear(date) {\r\n        return date.getFullYear();\r\n    }\r\n    getMonth(date) {\r\n        return date.getMonth();\r\n    }\r\n    getDate(date) {\r\n        return date.getDate();\r\n    }\r\n    getDayOfWeek(date) {\r\n        return date.getDay();\r\n    }\r\n    getMonthNames(style) {\r\n        if (SUPPORTS_INTL_API) {\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n            return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n        }\r\n        return DEFAULT_MONTH_NAMES[style];\r\n    }\r\n    getDateNames() {\r\n        if (SUPPORTS_INTL_API) {\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n            return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n        }\r\n        return DEFAULT_DATE_NAMES;\r\n    }\r\n    getDayOfWeekNames(style) {\r\n        if (SUPPORTS_INTL_API) {\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n            return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\r\n        }\r\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n    }\r\n    getYearName(date) {\r\n        if (SUPPORTS_INTL_API) {\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n        }\r\n        return String(this.getYear(date));\r\n    }\r\n    getFirstDayOfWeek() {\r\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n        return 0;\r\n    }\r\n    getNumDaysInMonth(date) {\r\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\r\n    }\r\n    clone(date) {\r\n        return new Date(date.getTime());\r\n    }\r\n    createDate(year, month, date) {\r\n        // Check for invalid month and date (except upper bound on date which we have to check after\r\n        // creating the Date).\r\n        if (month < 0 || month > 11) {\r\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n        }\r\n        if (date < 1) {\r\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n        }\r\n        let result = this._createDateWithOverflow(year, month, date);\r\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n        if (result.getMonth() != month) {\r\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n        }\r\n        return result;\r\n    }\r\n    today() {\r\n        return new Date();\r\n    }\r\n    parse(value) {\r\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n        // parameters.\r\n        if (typeof value == 'number') {\r\n            return new Date(value);\r\n        }\r\n        return value ? new Date(Date.parse(value)) : null;\r\n    }\r\n    format(date, displayFormat) {\r\n        if (!this.isValid(date)) {\r\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n        }\r\n        if (SUPPORTS_INTL_API) {\r\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n                date = this.clone(date);\r\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n            }\r\n            displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n        }\r\n        return this._stripDirectionalityCharacters(date.toDateString());\r\n    }\r\n    addCalendarYears(date, years) {\r\n        return this.addCalendarMonths(date, years * 12);\r\n    }\r\n    addCalendarMonths(date, months) {\r\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n        // It's possible to wind up in the wrong month if the original month has more days than the new\r\n        // month. In this case we want to go to the last day of the desired month.\r\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n        // guarantee this.\r\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n        }\r\n        return newDate;\r\n    }\r\n    addCalendarDays(date, days) {\r\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n    }\r\n    toIso8601(date) {\r\n        return [\r\n            date.getUTCFullYear(),\r\n            this._2digit(date.getUTCMonth() + 1),\r\n            this._2digit(date.getUTCDate())\r\n        ].join('-');\r\n    }\r\n    /**\r\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n     * invalid date for all other values.\r\n     */\r\n    deserialize(value) {\r\n        if (typeof value === 'string') {\r\n            if (!value) {\r\n                return null;\r\n            }\r\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n            // string is the right format first.\r\n            if (ISO_8601_REGEX.test(value)) {\r\n                let date = new Date(value);\r\n                if (this.isValid(date)) {\r\n                    return date;\r\n                }\r\n            }\r\n        }\r\n        return super.deserialize(value);\r\n    }\r\n    isDateInstance(obj) {\r\n        return obj instanceof Date;\r\n    }\r\n    isValid(date) {\r\n        return !isNaN(date.getTime());\r\n    }\r\n    invalid() {\r\n        return new Date(NaN);\r\n    }\r\n    getHour(date) {\r\n        return date.getHours();\r\n    }\r\n    getMinute(date) {\r\n        return date.getMinutes();\r\n    }\r\n    getSecond(date) {\r\n        return date.getSeconds();\r\n    }\r\n    setHour(date, value) {\r\n        date.setHours(value);\r\n    }\r\n    setMinute(date, value) {\r\n        date.setMinutes(value);\r\n    }\r\n    setSecond(date, value) {\r\n        date.setSeconds(value);\r\n    }\r\n    /** Creates a date but allows the month and date to overflow. */\r\n    _createDateWithOverflow(year, month, date) {\r\n        const result = new Date(year, month, date);\r\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n        // abbreviations for 19xx.\r\n        if (year >= 0 && year < 100) {\r\n            result.setFullYear(this.getYear(result) - 1900);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Pads a number to make it two digits.\r\n     * @param n The number to pad.\r\n     * @returns The padded number.\r\n     */\r\n    _2digit(n) {\r\n        return ('00' + n).slice(-2);\r\n    }\r\n    /**\r\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n     * other browsers do not. We remove them to make output consistent and because they interfere with\r\n     * date parsing.\r\n     * @param str The string to strip direction characters from.\r\n     * @returns The stripped string.\r\n     */\r\n    _stripDirectionalityCharacters(str) {\r\n        return str.replace(/[\\u200e\\u200f]/g, '');\r\n    }\r\n    /**\r\n     * When converting Date object to string, javascript built-in functions may return wrong\r\n     * results because it applies its internal DST rules. The DST rules around the world change\r\n     * very frequently, and the current valid rule is not always valid in previous years though.\r\n     * We work around this problem building a new Date object which has its internal UTC\r\n     * representation with the local date and time.\r\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n     *    timeZone set to 'utc' to work fine.\r\n     * @param date Date from which we want to get the string representation according to dtf\r\n     * @returns A Date object with its UTC representation based on the passed in date info\r\n     */\r\n    _format(dtf, date) {\r\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\r\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\r\n        const d = new Date();\r\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n        return dtf.format(d);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatNativeDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: i1$2.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ NgxMatNativeDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateAdapter });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateAdapter, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_DATE_LOCALE]\r\n                }] }, { type: i1$2.Platform }]; } });\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DEFAULT_DATE_INPUT = {\r\n    year: 'numeric', month: 'numeric', day: 'numeric',\r\n    hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n};\r\nconst NGX_MAT_NATIVE_DATE_FORMATS = {\r\n    parse: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n    },\r\n    display: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n        monthYearLabel: { year: 'numeric', month: 'short' },\r\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NgxNativeDateModule {\r\n}\r\n/** @nocollapse */ NgxNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxNativeDateModule, imports: [PlatformModule] });\r\n/** @nocollapse */ NgxNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxNativeDateModule, providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ], imports: [PlatformModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxNativeDateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [PlatformModule],\r\n                    providers: [\r\n                        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n                    ],\r\n                }]\r\n        }] });\r\nclass NgxMatNativeDateModule {\r\n}\r\n/** @nocollapse */ NgxMatNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateModule, imports: [NgxNativeDateModule] });\r\n/** @nocollapse */ NgxMatNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateModule, providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }], imports: [NgxNativeDateModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.5\", ngImport: i0, type: NgxMatNativeDateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [NgxNativeDateModule],\r\n                    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-mat-datetime-picker\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DefaultNgxMatCalendarRangeStrategy, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MatDatetimePickerInputEvent, NGX_MAT_DATE_FORMATS, NGX_MAT_DATE_RANGE_SELECTION_STRATEGY, NGX_MAT_NATIVE_DATE_FORMATS, NgxMatCalendar, NgxMatCalendarBody, NgxMatCalendarCell, NgxMatCalendarHeader, NgxMatDateAdapter, NgxMatDatetimeContent, NgxMatDatetimeInput, NgxMatDatetimePicker, NgxMatDatetimePickerModule, NgxMatMonthView, NgxMatMultiYearView, NgxMatNativeDateAdapter, NgxMatNativeDateModule, NgxMatTimepickerComponent, NgxMatTimepickerModule, NgxMatYearView, NgxNativeDateModule, getActiveOffset, isSameMultiYearView, yearsPerPage, yearsPerRow };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() {\n        return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridTile {\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /** Amount of rows that the grid tile takes up. */\n    get rowspan() {\n        return this._rowspan;\n    }\n    set rowspan(value) {\n        this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /** Amount of columns that the grid tile takes up. */\n    get colspan() {\n        return this._colspan;\n    }\n    set colspan(value) {\n        this._colspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTile, deps: [{ token: i0.ElementRef }, { token: MAT_GRID_LIST, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTile.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridTile, selector: \"mat-grid-tile\", inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, host: { properties: { \"attr.rowspan\": \"rowspan\", \"attr.colspan\": \"colspan\" }, classAttribute: \"mat-grid-tile\" }, exportAs: [\"matGridTile\"], ngImport: i0, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTile, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile', exportAs: 'matGridTile', host: {\n                        'class': 'mat-grid-tile',\n                        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                        // the DOM. This is needed for the grid-tile harness.\n                        '[attr.rowspan]': 'rowspan',\n                        '[attr.colspan]': 'colspan',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_GRID_LIST]\n                }] }]; }, propDecorators: { rowspan: [{\n                type: Input\n            }], colspan: [{\n                type: Input\n            }] } });\nclass MatGridTileText {\n    constructor(_element) {\n        this._element = _element;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileText, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nMatGridTileText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridTileText, selector: \"mat-grid-tile-header, mat-grid-tile-footer\", queries: [{ propertyName: \"_lines\", predicate: MatLine, descendants: true }], ngImport: i0, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileText, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }] } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridAvatarCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridAvatarCssMatStyler, selector: \"[mat-grid-avatar], [matGridAvatar]\", host: { classAttribute: \"mat-grid-avatar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\n                    host: { 'class': 'mat-grid-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileHeaderCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridTileHeaderCssMatStyler, selector: \"mat-grid-tile-header\", host: { classAttribute: \"mat-grid-tile-header\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileHeaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-header',\n                    host: { 'class': 'mat-grid-tile-header' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatGridTileFooterCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridTileFooterCssMatStyler, selector: \"mat-grid-tile-footer\", host: { classAttribute: \"mat-grid-tile-footer\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridTileFooterCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-grid-tile-footer',\n                    host: { 'class': 'mat-grid-tile-footer' },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() {\n        return null;\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom',\n            calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`),\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n        this._gutter = '1px';\n    }\n    /** Amount of columns in the grid list. */\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /** Size of the grid list's gutter in pixels. */\n    get gutterSize() {\n        return this._gutter;\n    }\n    set gutterSize(value) {\n        this._gutter = `${value == null ? '' : value}`;\n    }\n    /** Set internal representation of row height from the user-provided value. */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set rowHeight(value) {\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /** Throw a friendly error if cols property is missing */\n    _checkCols() {\n        if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /** Default to equal width:height if rowHeight property is missing */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /** Computes and applies the size and position for all children grid tiles. */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        const tracker = this._tileCoordinator;\n        const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((tile, index) => {\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridList, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatGridList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatGridList, selector: \"mat-grid-list\", inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, host: { properties: { \"attr.cols\": \"cols\" }, classAttribute: \"mat-grid-list\" }, providers: [\n        {\n            provide: MAT_GRID_LIST,\n            useExisting: MatGridList,\n        },\n    ], queries: [{ propertyName: \"_tiles\", predicate: MatGridTile, descendants: true }], exportAs: [\"matGridList\"], ngImport: i0, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-grid-list', exportAs: 'matGridList', host: {\n                        'class': 'mat-grid-list',\n                        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                        // needed for the grid-list harness.\n                        '[attr.cols]': 'cols',\n                    }, providers: [\n                        {\n                            provide: MAT_GRID_LIST,\n                            useExisting: MatGridList,\n                        },\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div>\\n  <ng-content></ng-content>\\n</div>\", styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { _tiles: [{\n                type: ContentChildren,\n                args: [MatGridTile, { descendants: true }]\n            }], cols: [{\n                type: Input\n            }], gutterSize: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatGridListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridListModule, declarations: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler], imports: [MatLineModule, MatCommonModule], exports: [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler] });\nMatGridListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridListModule, imports: [MatLineModule, MatCommonModule, MatLineModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatGridListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatLineModule, MatCommonModule],\n                    exports: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                    declarations: [\n                        MatGridList,\n                        MatGridTile,\n                        MatGridTileText,\n                        MatGridTileHeaderCssMatStyler,\n                        MatGridTileFooterCssMatStyler,\n                        MatGridAvatarCssMatStyler,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RedirectGuard } from '../core/guards/redirect.guard';\nimport { PostEditComponent } from './post-edit/post-edit.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: '/feed',\n  },\n  {\n    path: 'create/:type',\n    component: PostEditComponent,\n    data: { breadcrumb: 'Create Post' },\n  },\n  {\n    path: ':id/edit',\n    canActivate: [RedirectGuard],\n    component: PostEditComponent,\n    data: { breadcrumb: 'Edit Post', edit: true },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PostRoutingModule {}\n","<div class=\"image-loader\">\n  <div class=\"image-loader__btn\">\n    <div class=\"image-loader__preview\" *ngIf=\"preview\">\n      <img [src]=\"preview\" />\n    </div>\n    <div class=\"image-loader__controls\">\n      <mzima-client-button\n        fill=\"outline\"\n        color=\"secondary\"\n        class=\"image-loader__control\"\n        (buttonClick)=\"fileInput.click()\"\n        [data-qa]=\"'btn-post-item-upload'\"\n      >\n        <ng-container *ngIf=\"!preview; else changeButton\">\n          {{ 'post.media.add_photo' | translate }}\n        </ng-container>\n        <ng-template #changeButton>\n          {{ 'post.media.replace_image' | translate }}\n        </ng-template>\n        <mat-icon icon [svgIcon]=\"!preview ? 'plus' : 'edit'\"></mat-icon>\n      </mzima-client-button>\n      <input\n        hidden\n        #fileInput\n        type=\"file\"\n        accept=\"image/jpeg, image/png\"\n        (change)=\"onFileSelected($event)\"\n      />\n\n      <mzima-client-button\n        color=\"danger\"\n        *ngIf=\"preview\"\n        [iconOnly]=\"true\"\n        (buttonClick)=\"deletePhoto()\"\n        [data-qa]=\"'btn-post-item-delete-photo'\"\n        class=\"image-loader__control image-loader__control--delete\"\n      >\n        <mat-icon icon svgIcon=\"delete\"></mat-icon>\n      </mzima-client-button>\n    </div>\n\n    <mat-error class=\"error-msg\" *ngIf=\"requiredError\">\n      {{ 'post.image_is_required' | translate }}\n    </mat-error>\n    <mat-error class=\"error-msg\" *ngIf=\"maxSizeError\">\n      {{ 'post.image_max_size' | translate }}\n    </mat-error>\n  </div>\n\n  <div class=\"form-row\" *ngIf=\"hasCaption\">\n    <mat-label>{{ 'post.media.add_caption' | translate }}</mat-label>\n    <mat-form-field appearance=\"outline\">\n      <input\n        matInput\n        [formControl]=\"captionControl\"\n        (change)=\"captionChanged()\"\n        [disabled]=\"!!id\"\n      />\n    </mat-form-field>\n    <mat-error>\n      <p *ngIf=\"captionControl?.hasError('specialCharacters')\">\n        This field contains special characters\n      </p>\n    </mat-error>\n  </div>\n</div>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ConfirmModalService } from '../../core/services/confirm-modal.service';\nimport { formHelper } from '@helpers';\n\n@Component({\n  selector: 'app-image-uploader',\n  templateUrl: './image-uploader.component.html',\n  styleUrls: ['./image-uploader.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ImageUploaderComponent),\n      multi: true,\n    },\n  ],\n})\nexport class ImageUploaderComponent implements ControlValueAccessor {\n  @Input() public hasCaption: boolean;\n  @Input() public maxSizeError?: boolean;\n  @Input() public requiredError?: boolean;\n  id?: number;\n  captionControl = new FormControl('');\n  photo: File | null;\n  preview: string | SafeUrl | null;\n  isDisabled = false;\n  upload = false;\n  onChange: any = () => {};\n  onTouched: any = () => {};\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    private confirm: ConfirmModalService,\n    private translate: TranslateService,\n  ) {}\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.upload = false;\n      this.captionControl.patchValue(obj.caption);\n      this.id = obj.id;\n      this.photo = this.preview = obj.photo;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  onFileSelected(event: Event) {\n    const inputElement = event.target as HTMLInputElement;\n\n    if (inputElement.files && inputElement.files.length) {\n      this.photo = formHelper.prepareImageFileToUpload(inputElement.files[0]);\n      this.upload = true;\n      this.preview = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(this.photo));\n      this.onChange({\n        caption: this.captionControl.value,\n        photo: this.photo,\n        id: this.id,\n        upload: this.upload,\n      });\n      this.id = undefined;\n      inputElement.value = '';\n    }\n  }\n\n  async deletePhoto() {\n    const confirmed = await this.confirm.open({\n      title: this.translate.instant('notify.default.are_you_sure_you_want_to_delete_this'),\n      description: this.translate.instant('notify.default.proceed_warning'),\n    });\n\n    if (!confirmed) return;\n\n    this.photo = this.preview = null;\n    this.onChange({\n      caption: this.captionControl.value,\n      photo: this.photo,\n      id: this.id,\n      delete: true,\n    });\n  }\n\n  captionChanged() {\n    console.log(this.captionControl.value);\n    this.onChange({\n      caption: this.captionControl.value,\n      photo: this.photo,\n      id: this.id,\n      upload: this.upload,\n    });\n  }\n}\n","import {\n  NgxMatDatetimePickerModule,\n  NgxMatNativeDateModule,\n} from '@angular-material-components/datetime-picker';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SortByFieldModule } from '@pipes';\nimport { DirectiveModule, MapWithMarkerModule, PipeModule, SpinnerModule } from '@shared';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { PostRoutingModule } from './post-routing.module';\nimport { LeafletModule } from '@asymmetrik/ngx-leaflet';\nimport { PostEditComponent } from './post-edit/post-edit.component';\nimport { LocationSelectComponent } from './location-select/location-select.component';\nimport { PostPreviewComponent } from './post-preview/post-preview.component';\nimport { PostDetailsComponent } from './post-details/post-details.component';\nimport { PostMetadataComponent } from './post-metadata/post-metadata.component';\nimport { TwitterWidgetComponent } from './twitter-widget/twitter-widget.component';\nimport { PostHeadComponent } from './post-head/post-head.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\nimport { ImageUploaderComponent } from './image-uploader/image-uploader.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { PostNotFoundComponent } from './post-not-found/post-not-found.component';\nimport { PostNotAllowedComponent } from './post-not-allowed/post-not-allowed.component';\nimport { PostConversationComponent } from './post-conversation/post-conversation.component';\n\n@NgModule({\n  declarations: [\n    PostEditComponent,\n    LocationSelectComponent,\n    PostPreviewComponent,\n    PostDetailsComponent,\n    PostMetadataComponent,\n    TwitterWidgetComponent,\n    PostHeadComponent,\n    ImageUploaderComponent,\n    PostNotFoundComponent,\n    PostNotAllowedComponent,\n    PostConversationComponent,\n  ],\n  imports: [\n    CommonModule,\n    PostRoutingModule,\n    LeafletModule,\n    TranslateModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    SpinnerModule,\n    MatRippleModule,\n    DirectiveModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatGridListModule,\n    FormsModule,\n    MapWithMarkerModule,\n    ReactiveFormsModule,\n    MatSlideToggleModule,\n    MatCheckboxModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    NgxMatDatetimePickerModule,\n    MatRadioModule,\n    MatListModule,\n    MatSelectModule,\n    MatMenuModule,\n    PipeModule,\n    NgxMatNativeDateModule,\n    MzimaUiModule,\n    SortByFieldModule,\n    NgxPaginationModule,\n  ],\n  exports: [\n    PostPreviewComponent,\n    PostDetailsComponent,\n    PostMetadataComponent,\n    PostEditComponent,\n    PostNotFoundComponent,\n    PostNotAllowedComponent,\n    PostConversationComponent,\n  ],\n})\nexport class PostModule {}\n","<ng-content *ngIf=\"!isTwitterScriptLoading\"></ng-content>\n<ng-container *ngIf=\"isTwitterFailed\">\n  <img\n    class=\"tweet_failed\"\n    src=\"/assets/images/tweet.svg\"\n    [alt]=\"'app.tweet_is_unavailable' | translate\"\n  />\n</ng-container>\n\n<app-spinner class=\"spinner\" *ngIf=\"isTwitterScriptLoading\"></app-spinner>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { TwitterService } from '../../core/services/twitter.service';\n\n@Component({\n  selector: 'app-twitter-widget',\n  templateUrl: './twitter-widget.component.html',\n  styleUrls: ['./twitter-widget.component.scss'],\n})\nexport class TwitterWidgetComponent implements OnInit {\n  @Input() public id: string;\n  public tweet: object;\n\n  @Output() loadingFailed = new EventEmitter();\n  isTwitterScriptLoading = true;\n  isTwitterFailed = false;\n\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly twitterService: TwitterService,\n    private readonly _changeDetectorRef: ChangeDetectorRef,\n  ) {}\n\n  public ngOnInit(): void {\n    this._loadTwitterScript();\n  }\n\n  private _loadTwitterScript(): void {\n    this.twitterService.loadScript().subscribe((twitterData: any) => {\n      this._updateTwitterScriptLoadingState();\n      twitterData.widgets.createTweet(this.id, this._elementRef.nativeElement, {}).then(\n        (tweet: any) => {\n          this.tweet = tweet;\n          this.isTwitterScriptLoading = false;\n        },\n        () => {\n          this.isTwitterScriptLoading = false;\n        },\n      );\n\n      /* The Twitter-widget does not resolve the promise if \n      the Tweet is deleted, so need to check it with a timeout */\n      setTimeout(() => {\n        this.isTwitterScriptLoading = false;\n        if (!this.tweet) {\n          this.isTwitterFailed = true;\n          this.loadingFailed.emit('Tweet failed to load');\n        }\n      }, 30000);\n    });\n  }\n\n  private _updateTwitterScriptLoadingState(): void {\n    this._changeDetectorRef.detectChanges();\n  }\n}\n"],"x_google_ignoreList":[5,6]}