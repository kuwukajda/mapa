{"version":3,"file":"158.489a0d114cdfe54c.js","mappings":"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","names":["i0","ctx_r31","$event","PostStatus","DataImportComponent","BaseComponent","sessionService","breakpointService","importService","translateService","notification","pollingService","loader","router","route","confirm","formsService","surveysService","selectedFile","selectedForm","forms$","uploadedCSV","hasRequiredTask","requiredFields","Map","maps_to","uploadErrors","importErrors","fileChanged","surveys","statusOption","selectedStatus","displayedColumns","constructor","super","this","checkDesktop","ngOnInit","getSurveys","get","subscribe","result","of","results","loadData","uploadFile","reader","FileReader","onload","target","files","checkFormAndFile","readAsDataURL","transformAttributes","attributes","title","_","filter","type","reduce","collection","item","concat","key","label","priority","required","value","description","points","reject","push","sortBy","show","id","next","csv","columns","every","c","showError","instant","proceedAttributes","error","err","errors","hide","tasks","forEach","task","fields","some","setRequiredFields","getFieldKey","field","formChanged","clear","set","cancelImport","open","then","delete","navigate","isDesktop","remapColumns","map","invert","clone","omit","mKeys","keys","col","i","includes","toString","validateCSV","duplicateVars","checkForDuplicates","allDuplicatesAreEmpty","o","length","duplicates","join","missing","checkRequiredFields","countBy","pickBy","v","console","log","k","finish","fixed","form","status","updateAndImport","update","import","action","relativeTo","queryParams","job","selectors","ctx","ImportResultsComponent","importFinished","importSuccess","filename","collectionId","importJobs","pollingInfo","document","jobId","snapshot","queryParamMap","split","getImportJobsById","pollingImportFinished","getImportJobs","importFinished$","pipe","untilDestroyed","collection_id","getPollingInfo","getCurrentPool","tslib_es6","UntilDestroy","PollingService","Router","ActivatedRoute","routes","path","component","data","breadcrumb","DataImportRoutingModule","RouterModule","DataImportModule","CommonModule","MatProgressBarModule","TranslateModule","MatButtonModule","DirectiveModule","MatSelectModule","MatIconModule","MatRadioModule","FormsModule","MatTableModule","LottieAnimationModule","MzimaUiModule"],"sourceRoot":"webpack:///","sources":["./apps/web-mzima-client/src/app/settings/data-import/data-import.component.html","./apps/web-mzima-client/src/app/settings/data-import/data-import.component.ts","./apps/web-mzima-client/src/app/settings/data-import/import-results/import-results.component.html","./apps/web-mzima-client/src/app/settings/data-import/import-results/import-results.component.ts","./apps/web-mzima-client/src/app/settings/data-import/data-import-routing.module.ts","./apps/web-mzima-client/src/app/settings/data-import/data-import.module.ts"],"sourcesContent":["<div class=\"head\">\n  <h1 *ngIf=\"isDesktop\">{{ 'app.import' | translate }}</h1>\n  <mzima-client-button class=\"upload-button\" [data-qa]=\"'btn-upload'\">\n    <span>\n      {{\n        (selectedFile ? 'data_import.change_csv_file' : 'data_import.upload_csv_file')\n          | translate\n            : {\n                selectedfile: selectedFile\n                  ? selectedFile.name.slice(0, selectedFile.name.length - 4)\n                  : null\n              }\n      }}\n    </span>\n    <mat-icon icon svgIcon=\"plus\"></mat-icon>\n    <input name=\"file\" type=\"file\" accept=\".csv\" (change)=\"uploadFile($event)\" />\n  </mzima-client-button>\n</div>\n\n<div class=\"form-row\">\n  <mat-label\n    >{{ 'data_import.import_to' | translate }}\n    {{ 'data_import.which_survey' | translate }}*</mat-label\n  >\n  <mat-form-field appearance=\"outline\">\n    <mat-select\n      [data-qa]=\"'select-survey'\"\n      disableOptionCentering\n      [(value)]=\"selectedForm\"\n      placeholder=\"{{ 'survey.choose_survey' | translate }}\"\n      (selectionChange)=\"formChanged()\"\n    >\n      <mat-option *ngFor=\"let option of surveys | async\" [value]=\"option\">\n        {{ option.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n<ng-container *ngIf=\"selectedForm && selectedFile\">\n  <div class=\"form-row metadata\">\n    <span class=\"metadata__title\">\n      <mat-icon svgIcon=\"document-csv\"></mat-icon>\n      {{ selectedFile.name }}\n    </span>\n    <mat-icon class=\"metadata__separator\" svgIcon=\"arrow-right\"></mat-icon>\n    <span class=\"metadata__title\">\n      <mat-icon svgIcon=\"survey\"></mat-icon>\n      {{ selectedForm.name }}\n    </span>\n  </div>\n  <ng-container *ngIf=\"uploadErrors?.length === 0\">\n    <div class=\"form-row\">\n      <mat-label>{{ 'data_import.choose_status_to_imported_posts' | translate }}</mat-label>\n      <mat-radio-group\n        [data-qa]=\"'radio-option'\"\n        [(ngModel)]=\"statusOption\"\n        [attr.aria-label]=\"'data_import.imported_posts_status' | translate\"\n      >\n        <div class=\"radio-button\">\n          <mat-radio-button value=\"mark_as\">\n            {{ 'data_import.marked_as' | translate }}\n          </mat-radio-button>\n          <div *ngIf=\"statusOption === 'mark_as'\" class=\"radio-button__content\">\n            <mat-radio-group [(ngModel)]=\"selectedStatus\" [data-qa]=\"'radio-status'\">\n              <div class=\"radio-button\">\n                <mat-radio-button [value]=\"PostStatus.Published\">\n                  {{ 'post.published' | translate }}\n                </mat-radio-button>\n              </div>\n\n              <!--// IF the chosen survey has tasks that must be completed before its posts can be published //-->\n              <p *ngIf=\"hasRequiredTask\">\n                {{ 'data_import.has_tasks_required_start' | translate }}\n                <strong>{{ selectedForm.name }}</strong>\n                {{ 'data_import.has_tasks_required_end' | translate }}\n              </p>\n              <!--// END IF //-->\n\n              <div class=\"radio-button\">\n                <mat-radio-button [value]=\"PostStatus.Draft\">\n                  {{ 'post.draft' | translate }}\n                </mat-radio-button>\n              </div>\n\n              <div class=\"radio-button\">\n                <mat-radio-button [value]=\"PostStatus.Archived\">\n                  {{ 'post.archived' | translate }}\n                </mat-radio-button>\n              </div>\n            </mat-radio-group>\n          </div>\n        </div>\n\n        <div class=\"radio-button\">\n          <mat-radio-button value=\"defined_column\">\n            {{ 'data_import.defined_column' | translate }}\n          </mat-radio-button>\n          <div class=\"radio-group\" *ngIf=\"statusOption === 'defined_column'\">\n            <div class=\"radio-button__content\">\n              <div class=\"form-row\">\n                <mat-form-field appearance=\"outline\">\n                  <mat-select\n                    [(ngModel)]=\"selectedStatus\"\n                    disableOptionCentering\n                    placeholder=\"{{ 'app.choose' | translate }}\"\n                  >\n                    <mat-option\n                      *ngFor=\"let column of uploadedCSV.columns; let i = index\"\n                      [value]=\"i\"\n                    >\n                      {{ column }}\n                    </mat-option>\n                  </mat-select>\n                  <mat-hint>{{ 'data_import.status_explanation' | translate }}</mat-hint>\n                </mat-form-field>\n              </div>\n\n              <!--// IF the chosen survey has tasks that must be completed before its posts can be published //-->\n              <!-- <p class=\"note\">\n              Your survey, <strong>{{ selectedForm.name }}</strong\n              >, includes tasks that typically must be completed for each post before they can\n              be marked 'published.' During this import, all of your imported posts will have\n              their tasks marked as 'incomplete', even if their status is marked as 'published.'\n              If you edit any of these posts after they've been imported, however, you'll be\n              asked to complete those tasks before re-publishing them.\n            </p> -->\n              <!--// END IF //-->\n            </div>\n          </div>\n        </div>\n      </mat-radio-group>\n    </div>\n    <ng-container>\n      <div class=\"table-description\">\n        <mat-label class=\"form-label\">{{\n          'data_import.choose_which_column' | translate\n        }}</mat-label>\n        <p>{{ 'data_import.each_survey_field' | translate }}</p>\n      </div>\n    </ng-container>\n\n    <ng-container *ngFor=\"let task of selectedForm.tasks\">\n      <div class=\"table-description\">\n        <mat-label class=\"form-label\">\n          {{ task.label }}\n        </mat-label>\n        <p>{{ task.description }}</p>\n      </div>\n\n      <table mat-table [dataSource]=\"task.fields\">\n        <ng-container matColumnDef=\"survey\">\n          <th mat-header-cell *matHeaderCellDef>{{ 'data_import.survey_field' | translate }}</th>\n          <td mat-cell *matCellDef=\"let field\">\n            {{ field.label }}&nbsp;\n            <ng-container *ngIf=\"field.required\">*</ng-container>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"csv\">\n          <th mat-header-cell *matHeaderCellDef>{{ 'data_import.csv_column' | translate }}</th>\n          <td mat-cell *matCellDef=\"let field\">\n            <mat-form-field appearance=\"outline\">\n              <mat-select\n                [data-qa]=\"'select-columns'\"\n                disableOptionCentering\n                [(ngModel)]=\"maps_to[getFieldKey(field)]\"\n                [placeholder]=\"'data_import.leave_empty' | translate\"\n              >\n                <mat-option selected=\"selected\" value=\"\">\n                  {{ 'data_import.leave_empty' | translate }} {{ field.key }}\n                </mat-option>\n                <mat-option *ngFor=\"let column of uploadedCSV.columns; let i = index\" [value]=\"i\">\n                  {{ column }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n      </table>\n    </ng-container>\n\n    <mat-error *ngIf=\"importErrors\">\n      {{ 'notify.data_import.csv_import_error' | translate }}\n    </mat-error>\n    <div class=\"form-controls-spacer\"></div>\n    <div class=\"form-controls-panel form-controls-panel--sticky\">\n      <mzima-client-button\n        fill=\"outline\"\n        color=\"secondary\"\n        (buttonClick)=\"cancelImport()\"\n        [data-qa]=\"'btn-cancel-import'\"\n      >\n        {{ 'app.cancel' | translate }}\n      </mzima-client-button>\n      <mzima-client-button (buttonClick)=\"finish()\" [data-qa]=\"'btn-finish'\">\n        {{ 'app.import' | translate }}\n      </mzima-client-button>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"uploadErrors.length > 0\">\n    <mat-error *ngFor=\"let err of uploadErrors\">\n      {{ err.message }}\n    </mat-error>\n  </ng-container>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { omit, clone, invert, keys, includes } from 'lodash';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  DataImportService,\n  FormsService,\n  FormCSVInterface,\n  FormInterface,\n  SurveysService,\n  SurveyItem,\n} from '@mzima-client/sdk';\n\nimport { BaseComponent } from '../../base.component';\nimport { NotificationService } from '../../core/services/notification.service';\nimport { PollingService } from '../../core/services/polling.service';\nimport { LoaderService } from '../../core/services/loader.service';\nimport { ConfirmModalService } from '../../core/services/confirm-modal.service';\nimport { BreakpointService, SessionService } from '@services';\nimport _ from 'lodash';\n\nenum PostStatus {\n  Published = 'published',\n  Draft = 'draft',\n  Archived = 'archived',\n}\n\n@Component({\n  selector: 'app-data-import',\n  templateUrl: './data-import.component.html',\n  styleUrls: ['./data-import.component.scss'],\n})\nexport class DataImportComponent extends BaseComponent implements OnInit {\n  PostStatus = PostStatus;\n  selectedFile: File;\n  selectedForm: SurveyItem;\n  forms$: Observable<FormInterface[]>;\n  uploadedCSV: FormCSVInterface;\n  hasRequiredTask = false;\n  requiredFields = new Map<string, string>();\n  maps_to: any = {};\n  uploadErrors: any[] = [];\n  importErrors: boolean = false;\n  fileChanged = false;\n  public surveys: Observable<any>;\n\n  statusOption: string;\n  selectedStatus: PostStatus;\n  displayedColumns: string[] = ['survey', 'csv'];\n\n  constructor(\n    protected override sessionService: SessionService,\n    protected override breakpointService: BreakpointService,\n    private importService: DataImportService,\n    private translateService: TranslateService,\n    private notification: NotificationService,\n    private pollingService: PollingService,\n    private loader: LoaderService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private confirm: ConfirmModalService,\n    private formsService: FormsService,\n    private surveysService: SurveysService,\n  ) {\n    super(sessionService, breakpointService);\n    this.checkDesktop();\n  }\n\n  ngOnInit() {\n    this.getSurveys();\n  }\n\n  getSurveys() {\n    this.surveysService.get().subscribe((result) => {\n      this.surveys = of(result.results);\n    });\n  }\n  loadData(): void {}\n\n  uploadFile($event: any) {\n    this.fileChanged = true;\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.selectedFile = $event.target.files[0];\n      this.checkFormAndFile();\n    };\n    reader.readAsDataURL($event.target.files[0]);\n  }\n\n  transformAttributes(attributes: any[]) {\n    const title: any = _.chain(attributes)\n      .filter({ type: 'title' })\n      .reduce(function (collection: any[], item) {\n        return collection.concat({\n          key: 'title',\n          label: item.label,\n          priority: 0,\n          required: true,\n          type: 'title',\n        });\n      }, [])\n      .value();\n\n    const description: any = _.chain(attributes)\n      .filter({ type: 'description' })\n      .reduce(function (collection: any[], item) {\n        return collection.concat({\n          key: 'content',\n          label: item.label,\n          priority: 0,\n          required: true,\n          type: 'description',\n        });\n      }, [])\n      .value();\n\n    const points: any[] = _.chain(attributes)\n      .filter({ type: 'point' })\n      .reduce(function (collection: any[], item) {\n        return collection.concat(\n          {\n            key: item.key + '.lat',\n            label: item.label + ' (Latitude)',\n            priority: item.priority,\n            required: item.required,\n          },\n          {\n            key: item.key + '.lon',\n            label: item.label + ' (Longitude)',\n            priority: item.priority,\n            required: item.required,\n          },\n        );\n      }, [])\n      .value();\n\n    attributes = _.chain(attributes)\n      .reject({ type: 'point' })\n      .reject({ type: 'title' })\n      .reject({ type: 'description' })\n      .push(...title)\n      .push(...description)\n      .push(...points)\n      .sortBy('priority')\n      .value();\n\n    return attributes;\n  }\n\n  private checkFormAndFile() {\n    if (this.selectedFile && this.selectedForm) {\n      if (this.fileChanged) {\n        this.loader.show();\n        this.importService.uploadFile(this.selectedFile, this.selectedForm.id).subscribe({\n          next: (csv) => {\n            this.uploadedCSV = csv.result;\n            this.fileChanged = false;\n\n            if (this.uploadedCSV.columns?.every((c: any) => c === ''))\n              return this.notification.showError(\n                this.translateService.instant('notify.data_import.empty_mapping_empty'),\n              );\n\n            this.proceedAttributes();\n            this.uploadErrors = [];\n          },\n          error: (err) => {\n            this.uploadErrors = err.error.errors;\n            this.notification.showError(err);\n            this.loader.hide();\n          },\n        });\n      } else {\n        this.proceedAttributes();\n      }\n    }\n  }\n\n  private proceedAttributes() {\n    this.selectedForm.tasks.forEach((task) => {\n      task.fields = this.transformAttributes(task.fields);\n    });\n    this.hasRequiredTask = this.selectedForm.tasks.some((task) => task.required);\n    this.setRequiredFields();\n\n    this.loader.hide();\n  }\n\n  getFieldKey(field: any) {\n    if (field.type === 'title') {\n      return 'title';\n    }\n    if (field.type === 'description') {\n      return 'content';\n    }\n    return field.key;\n  }\n\n  formChanged() {\n    if (this.selectedFile && this.selectedForm) {\n      this.checkFormAndFile();\n    }\n  }\n\n  setRequiredFields() {\n    this.requiredFields.clear();\n    this.selectedForm.tasks.forEach((task) => {\n      task.fields.forEach((field) => {\n        if (field.required) {\n          this.requiredFields.set(this.getFieldKey(field), field.label);\n        }\n      });\n    });\n  }\n\n  cancelImport() {\n    this.confirm\n      .open({\n        title: this.translateService.instant('notify.data_import.csv_import_cancel_confirm'),\n      })\n      .then(() => {\n        this.notification.showError(\n          this.translateService.instant('notify.data_import.csv_import_cancel'),\n        );\n        this.importService.delete(this.uploadedCSV.id).subscribe(() => {\n          if (this.isDesktop) {\n            this.router.navigate([`/settings/data-import`]);\n          } else {\n            this.router.navigate([`/settings`]);\n          }\n        });\n      });\n  }\n\n  private remapColumns() {\n    let map: any = invert(clone(this.maps_to));\n    map = omit(map, '');\n    const mKeys = keys(map);\n    this.uploadedCSV.columns.forEach((col, i) => {\n      map[i] = includes(mKeys, i.toString()) ? map[i] : null;\n    });\n    return map;\n  }\n\n  validateCSV() {\n    const csvIsValid = true;\n    if (_.every(this.uploadedCSV.maps_to, _.isEmpty)) {\n      this.notification.showError(this.translateService.instant('notify.data_import.no_mappings'));\n      return false;\n    }\n\n    const duplicateVars = this.checkForDuplicates();\n    const allDuplicatesAreEmpty =\n      duplicateVars.filter((o) => o === '').length === duplicateVars.length;\n    // if duplicate var only holds '' , warn that column names cannot be empty\n    if (duplicateVars.length > 0 && !allDuplicatesAreEmpty) {\n      this.notification.showError(\n        this.translateService.instant('notify.data_import.duplicate_fields', {\n          duplicates: duplicateVars.join(', '),\n        }),\n      );\n      return false;\n    } else if (duplicateVars.length > 0) {\n      // if duplicate var only holds '' , warn that column names cannot be empty\n      this.notification.showError(\n        this.translateService.instant('notify.data_import.empty_mapping_empty'),\n      );\n      return false;\n    }\n\n    //Check required fields are set\n    const missing = this.checkRequiredFields(this.maps_to);\n    if (!_.isEmpty(missing)) {\n      this.notification.showError(\n        this.translateService.instant('notify.data_import.required_fields', {\n          required: missing.join(', '),\n        }),\n      );\n      return false;\n    }\n    return csvIsValid;\n  }\n\n  checkForDuplicates() {\n    // Check to make sure the user hasn't double mapped a key\n    // First, collect the counts for all keys\n    // Remove empty fields\n    const map = _.omitBy(this.maps_to, _.isNil);\n    return _.chain(map)\n      .map((item) => {\n        return this.uploadedCSV.columns[item];\n      })\n      .countBy((item) => {\n        return item;\n      })\n      .pickBy((v) => {\n        return v > 1;\n      })\n      .keys()\n      .value();\n  }\n\n  checkRequiredFields(fields: any) {\n    console.log(fields);\n    const missing: any = [];\n    this.requiredFields.forEach((v, k) => {\n      if (_.isNil(fields[k])) {\n        missing.push(v);\n      }\n    });\n    return missing;\n  }\n\n  finish() {\n    this.uploadedCSV.maps_to = this.remapColumns();\n    if (!this.validateCSV()) {\n      return;\n    }\n    this.uploadedCSV.fixed = { form: this.selectedForm.id };\n\n    if (this.selectedStatus) {\n      if (this.statusOption === 'mark_as') {\n        this.uploadedCSV.fixed.status = this.selectedStatus;\n      } else {\n        this.uploadedCSV.maps_to[this.selectedStatus] = 'status';\n      }\n    }\n\n    this.updateAndImport();\n  }\n\n  updateAndImport() {\n    this.importService.update(this.uploadedCSV.id, this.uploadedCSV).subscribe(() => {\n      this.importService.import({ id: this.uploadedCSV.id, action: 'import' }).subscribe({\n        next: () => {\n          // this.pollingService.getImportJobs();\n          this.router.navigate(['results'], {\n            relativeTo: this.route,\n            queryParams: { job: this.uploadedCSV.id },\n          });\n        },\n        error: () => {\n          this.importErrors = true;\n        },\n      });\n    });\n  }\n}\n","<div class=\"completed\" *ngIf=\"importFinished; else notFinished\">\n  <ng-container *ngIf=\"importSuccess; else importFailed\">\n    <app-lottie-animation\n      class=\"visual\"\n      [path]=\"'/assets/lottie/success-animation.json'\"\n    ></app-lottie-animation>\n\n    <h1>{{ 'data_import.import_complete' | translate }}</h1>\n    <div class=\"description\">\n      <p [innerHTML]=\"'data_import.complete_info' | translate : { filename: filename }\"></p>\n    </div>\n\n    <div class=\"form-controls-panel\">\n      <mzima-client-button\n        fill=\"outline\"\n        color=\"secondary\"\n        [routerLink]=\"['/feed/collection', collectionId]\"\n      >\n        {{ 'data_import.see_imported_posts' | translate }}\n      </mzima-client-button>\n      <mzima-client-button [routerLink]=\"['/settings/data-import']\">\n        {{ 'data_import.import_another' | translate }}\n      </mzima-client-button>\n    </div>\n  </ng-container>\n  <ng-template #importFailed>\n    <app-lottie-animation\n      class=\"visual\"\n      [path]=\"'/assets/lottie/error-animation.json'\"\n    ></app-lottie-animation>\n    <h1>{{ 'data_import.import_error' | translate }}</h1>\n  </ng-template>\n</div>\n\n<ng-template #notFinished>\n  <mat-progress-bar class=\"progress\" mode=\"indeterminate\"></mat-progress-bar>\n  <h1>{{ 'data_import.nearly_complete' | translate }}</h1>\n  <div class=\"description\">\n    <p>{{ 'data_import.finish_info' | translate }}</p>\n  </div>\n\n  <div class=\"form-controls-panel\">\n    <mzima-client-button\n      fill=\"outline\"\n      color=\"secondary\"\n      *ngIf=\"document.magic\"\n      (buttonClick)=\"getPollingInfo()\"\n    >\n      {{ 'data_import.get_polling_info' | translate }}\n    </mzima-client-button>\n    <mzima-client-button [routerLink]=\"['/settings/data-import']\">\n      {{ 'data_import.import_another' | translate }}\n    </mzima-client-button>\n  </div>\n  <!-- TODO: FIXME: DEBUG INFO -->\n  <pre>{{ pollingInfo | json }}</pre>\n  <!-- EOF Debug -->\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { PollingService } from '../../../core/services/polling.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-import-results',\n  templateUrl: './import-results.component.html',\n  styleUrls: ['./import-results.component.scss'],\n})\nexport class ImportResultsComponent implements OnInit {\n  importFinished = false;\n  importSuccess = false;\n  filename: string;\n  collectionId: any;\n  importJobs: any;\n  pollingInfo: any;\n  document: any = document;\n\n  constructor(\n    private pollingService: PollingService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    const jobId = this.route.snapshot.queryParamMap.get('job')?.split(',');\n    if (jobId) {\n      this.pollingService.getImportJobsById(jobId);\n      this.pollingImportFinished();\n    } else {\n      this.pollingService.getImportJobs();\n      this.pollingImportFinished();\n    }\n  }\n\n  private pollingImportFinished() {\n    this.pollingService.importFinished$.pipe(untilDestroyed(this)).subscribe((job: any) => {\n      this.importFinished = true;\n      this.importSuccess = job.status === 'SUCCESS';\n      this.collectionId = job.collection_id;\n      this.filename = job.filename;\n    });\n  }\n\n  getPollingInfo() {\n    this.pollingInfo = this.pollingService.getCurrentPool();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { DataImportComponent } from './data-import.component';\nimport { ImportResultsComponent } from './import-results/import-results.component';\n\nconst routes: Routes = [\n  { path: '', component: DataImportComponent },\n  {\n    path: 'results',\n    component: ImportResultsComponent,\n    data: {\n      breadcrumb: 'Results',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DataImportRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DirectiveModule, LottieAnimationModule } from '@shared';\nimport { DataImportRoutingModule } from './data-import-routing.module';\nimport { DataImportComponent } from './data-import.component';\nimport { ImportResultsComponent } from './import-results/import-results.component';\nimport { MzimaUiModule } from '@mzima-client/mzima-ui';\n\n@NgModule({\n  declarations: [DataImportComponent, ImportResultsComponent],\n  imports: [\n    CommonModule,\n    DataImportRoutingModule,\n    MatProgressBarModule,\n    TranslateModule,\n    MatButtonModule,\n    DirectiveModule,\n    MatSelectModule,\n    MatIconModule,\n    MatRadioModule,\n    FormsModule,\n    MatTableModule,\n    LottieAnimationModule,\n    MzimaUiModule,\n  ],\n})\nexport class DataImportModule {}\n"],"x_google_ignoreList":[]}