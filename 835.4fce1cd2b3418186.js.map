{"version":3,"file":"835.4fce1cd2b3418186.js","mappings":"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","names":["i0","_r8","_r0","ctx_r5","ctx_r6","_r15","$implicit","_r23","ctx_r20","ctx_r21","PaginationService","constructor","this","change","EventEmitter","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","start","end","serverSideMode","length","createInstance","perPage","emitChange","stateIsIdentical","saveState","config","checkConfig","missing","filter","Error","join","size","every","element","index","ɵfac","ɵpipe","pure","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ɵdir","selectors","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","trackByIndex","ɵcmp","ctx","i2","styles","NgxPaginationModule","ɵmod","ɵinj","imports","CommonModule"],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-pagination/fesm2020/ngx-pagination.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n"],"x_google_ignoreList":[0]}